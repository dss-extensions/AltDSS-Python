'''
This module exposes base objects for the pythonic Obj and Batch interfaces from DSS C-API.
These interfaces are unique to DSS Extensions, they are not present in the official OpenDSS.

This is still under development and the final implementation might differ in some aspects.

Copyright (c) 2021-2022 Paulo Meira
Copyright (c) 2021-2022 DSS Extensions contributors
'''
from typing import Union, List, AnyStr
import numpy as np
from .enums import DSSJSONFlags

try:
    from enum import IntEnum
except:
    from aenum import IntEnum

try:
    import numpy.typing as npt
    npt.NDArray[np.float64]
except:
    class npt:
        NDArray = List


from ._cffi_api_util import Base

class BatchFloat64ArrayProxy:
    def __init__(self, batch, idx):
        self._batch = batch
        self._idx = idx
        self._lib = batch._api_util.lib

    def to_array(self):
        batch = self._batch
        return batch._get_float64_array(
            batch._lib.Batch_GetFloat64,
            batch.pointer[0],
            batch.count[0],
            self._idx
        )

    def __call__(self):
        return self.to_array()

    def __len__(self):
        return self._batch.count[0]

    def __mul__(self, other):
        return self.to_array() * other

    def __truediv__(self, other):
        return self.to_array() / other

    def __floordiv__(self, other):
        return self.to_array() // other

    def __add__(self, other):
        return self.to_array() + other

    def __sub__(self, other):
        return self.to_array() - other

    def __array__(self):
        return self.to_array()

    def __iadd__(self, other):
        batch = self._batch

        if np.isscalar(other):
            self._lib.Batch_Float64(
                batch.pointer[0], 
                batch.count[0],
                self._idx,
                self._lib.BatchOperation_Increment,
                other
            )
            return self

        if len(other) != batch.count[0]:
            raise ValueError(f"Number of elements ({len(other)}) doesn't match the batch size ({batch.count[0]})")

        data = self.to_array() + other
        data, data_ptr, _ = batch._prepare_float64_array(data)
        batch._lib.Batch_SetFloat64Array(
            batch.pointer[0], 
            batch.count[0], 
            self._idx,
            data_ptr
        )
        batch._check_for_error()
        return self

    def __isub__(self, other):
        return self.__iadd__(-other)

    def __imul__(self, other):
        batch = self._batch

        if np.isscalar(other):
            self._lib.Batch_Float64(
                batch.pointer[0], 
                batch.count[0], 
                self._idx,
                self._lib.BatchOperation_Multiply,
                other
            )
            return self

        if len(other) != batch.count[0]:
            raise ValueError(f"Number of elements ({len(other)}) doesn't match the batch size ({batch.count[0]})")

        data = self.to_array() * other
        data, data_ptr, _ = batch._prepare_float64_array(data)
        self._lib.Batch_SetFloat64Array(
            batch.pointer[0], 
            batch.count[0], 
            data_ptr
        )
        batch._check_for_error()
        return self

    def __idiv__(self, other):
        batch = self._batch

        if np.isscalar(other):
            self._lib.Batch_Float64(
                batch.pointer[0], 
                batch.count[0], 
                self._idx,
                self._lib.BatchOperation_Multiply,
                1 / other
            )
            return self

        if len(other) != batch.count[0]:
            raise ValueError(f"Number of elements ({len(other)}) doesn't match the batch size ({batch.count[0]})")

        data = self.to_array() / other
        data, data_ptr, _ = batch._prepare_float64_array(data)
        self._lib.Batch_SetFloat64Array(
            batch.pointer[0], 
            batch.count[0], 
            data_ptr
        )
        batch._check_for_error()
        return self


class BatchInt32ArrayProxy:
    def __init__(self, batch, idx):#, kind):
        self._batch = batch
        self._idx = idx
        self._lib = batch._api_util.lib

    def to_array(self):
        batch = self._batch
        return batch._get_int32_array(
            batch._lib.Batch_GetInt32,
            batch.pointer[0],
            batch.count[0],
            self._idx
        )

    def __call__(self):
        return self.to_array()

    def __len__(self):
        return self._batch.count[0]

    def __mul__(self, other):
        return self.to_array() * other

    def __truediv__(self, other):
        return self.to_array() / other

    def __floordiv__(self, other):
        return self.to_array() // other
    
    def __add__(self, other):
        return self.to_array() + other

    def __sub__(self, other):
        return self.to_array() - other

    def __array__(self):
        return self.to_array()

    def __iadd__(self, other):
        batch = self._batch

        if np.isscalar(other):
            self._lib.Batch_Int32(
                batch.pointer[0], 
                batch.count[0], 
                self._idx,
                self._lib.BatchOperation_Increment,
                other
            )
            return self

        if len(other) != batch.count[0]:
            raise ValueError(f"Number of elements ({len(other)}) doesn't match the batch size ({batch.count[0]})")

        data = self.to_array() + other
        data, data_ptr, _ = batch._api_util.prepare_int32_array(data)
        batch._lib.Batch_SetInt32Array(
            batch.pointer[0], 
            batch.count[0],
            self._idx,
            data_ptr
        )
        batch._check_for_error()
        return self

    def __isub__(self, other):
        return self.__iadd__(-other)

    def __imul__(self, other):
        batch = self._batch

        if np.isscalar(other):
            self._lib.Batch_Int32(
                batch.pointer[0], 
                batch.count[0],
                self._idx,
                self._lib.BatchOperation_Multiply,
                other
            )
            return self

        if len(other) != batch.count[0]:
            raise ValueError(f"Number of elements ({len(other)}) doesn't match the batch size ({batch.count[0]})")

        data = self.to_array() * other
        data, data_ptr, _ = batch._prepare_int32_array(data)
        self._lib.Batch_SetInt32Array(
            batch.pointer[0], 
            batch.count[0], 
            data_ptr
        )
        batch._check_for_error()
        return self

    def __idiv__(self, other):
        batch = self._batch

        if np.isscalar(other):
            self._lib.Batch_Int32(
                batch.pointer[0], 
                batch.count[0],
                self._idx,
                self._lib.BatchOperation_Multiply,
                1 / other
            )
            return self

        if len(other) != batch.count[0]:
            raise ValueError(f"Number of elements ({len(other)}) doesn't match the batch size ({batch.count[0]})")

        data = self.to_array() / other
        data, data_ptr, _ = batch._prepare_int32_array(data)
        self._lib.Batch_SetInt32Array(
            batch.pointer[0], 
            batch.count[0], 
            data_ptr
        )
        batch._check_for_error()
        return self



class DSSObj(Base):
    # _properties_by_idx = {
    #     1: ('kV', 'Obj_SetDouble')
    # }
    # _properties_by_name = {
    #     'kV': (1, 'Obj_SetDouble')
    # }

    def __init__(self, api_util, ptr):
        Base.__init__(self, api_util)
        self._ptr = ptr
        self._ffi = api_util.ffi
        self._get_int32_list = api_util.get_int32_array2

    # def __getitem__(self, name_or_idx):
    #     if isinstance(name_or_idx, int):
    #         funcname, *_ = self._properties_by_idx[name_or_idx]
    #         return getattr(self._lib, funcname)(name_or_idx)

    #     if type(name_or_idx) is bytes:
    #         name_or_idx = name_or_idx.decode(self._api_util.codec)

    #     idx, funcname, *_ = self._properties_by_name[name_or_idx]
    #     return getattr(self._lib, funcname)(idx)

    # def to_dict(self):
    #     return {
    #         name: getattr(self._lib, funcname)(idx)
    #         for (name, (idx, funcname, *_)) in self._properties_by_name.items()
    #     }

    def to_json(self, options: Union[int, DSSJSONFlags] = 0):
        '''
        Returns an element's data as a JSON-encoded string.

        The `options` parameter contains bit-flags to toggle specific features.

        By default (`options = 0`), only the properties explicitly set. The properties are returned in the order they are set in the input.
        As a reminder, OpenDSS is sensitive to the order of the properties.

        The `options` bit-flags are available in the `DSSJSONFlags` enum.
        Values used by this function are:

        - `Full`: if set, all properties are returned, ordered by property index instead.
        - `SkipRedundant`: if used with `Full`, all properties except redundant and unused ones are returned.
        - `EnumAsInt`: enumerated properties are returned as integer values instead of strings.
        - `FullNames`: any element reference will use the full name (`{class name}.{element name}`) even if not required.
        - `Pretty`: more whitespace is used in the output for a "prettier" format.

        **NOT IMPLEMENTED YET**:
        - `State`: include run-time state information
        - `Debug`: include debug information

        Other bit-flags are reserved for future uses. Please use `DSSJSONFlags` enum to avoid potential conflicts.

        (API Extension)
        '''
        s = self._lib.Obj_ToJSON(self._ptr, options)
        self._check_for_error()
        return self._ffi.string(s).decode(self._api_util.codec)

    def __eq__(self, other):
        return isinstance(other, self.__class__) and (other._ptr == self._ptr)

    def __repr__(self):
        # This could probably be done in DSS C-API instead (equivalent to SaveWrite)
        ffi = self._api_util.ffi
        # seq = sorted(enumerate(ffi.unpack(self._lib.Obj_GetPropSeqPtr(self._ptr, ffi.NULL), self._lib.Obj_GetNumProperties(self._ptr)), start=1), key=lambda v: v[1])
        # vals = []
        # for propidx, propseq in seq:
        #     if propseq:
        #         vals.append(f'{self._properties_by_idx[propidx][0]}={self[propidx]}')

        return f'<{self._cls_name}.{self.name}>'# {" ".join(vals)}'

    @property
    def name(self) -> str:
        s = self._lib.Obj_GetName(self._ptr)
        self._check_for_error()
        return self._ffi.string(s).decode(self._api_util.codec)

    def _get_complex(self, idx: int) -> complex:
        return self._get_float64_array(
            self._lib.Obj_GetFloat64Array, 
            self._ptr,
            idx
        ).astype(complex)[0]

    def _set_complex(self, idx: int, value: complex):
        data = np.array([complex(value)])
        data, data_ptr, cnt_ptr = self._prepare_float64_array(data)
        self._lib.Obj_SetFloat64Array(self._ptr, data_ptr, cnt_ptr)
        self._check_for_error()

    def _get_prop_string(self, idx: int) -> str:
        s = self._lib.Obj_GetString(self._ptr, idx)
        return self._decode_and_free_string(s)

    def _set_string(self, idx: int, value: AnyStr):
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Obj_SetString(self._ptr, idx, value)
        self._check_for_error()

    def _set_float64_array(self, idx: int, value: npt.NDArray[np.float64]):
        value, value_ptr, value_count = self._prepare_float64_array(value)
        self._lib.Obj_SetFloat64Array(self._ptr, idx, value_ptr, value_count)
        self._check_for_error()

    def _set_int32_array(self, idx: int, value: npt.NDArray[np.int32]):
        value, value_ptr, value_count = self._prepare_int32_array(value)
        self._lib.Obj_SetInt32Array(self._ptr, idx, value_ptr, value_count)
        self._check_for_error()

    def _set_string_array(self, idx: int, value: List[AnyStr]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, idx, value_ptr, value_count)
        self._check_for_error()

    def _get_obj(self, idx: int, pycls):
        other_ptr = self._lib.Obj_GetObject(self._ptr, idx)
        self._check_for_error()
        if other_ptr == self._ffi.NULL:
            return None

        if pycls is None:
            cls_idx = self._lib.Obj_GetClassIdx(other_ptr)
            pycls = self._iobj._idx_to_cls[cls_idx]

        return pycls(self._api_util, other_ptr)

    def _set_obj(self, idx: int, other):
        if other is not None:
            other_ptr = other._ptr
        else:
            other_ptr = self._ffi.NULL

        self._lib.Obj_SetObject(self._ptr, idx, other_ptr)
        self._check_for_error()

    def _get_obj_array(self, idx: int, pycls):
        ptr = self._ffi.new('void***')
        cnt = self._ffi.new('int32_t[4]')
        self._lib.Obj_GetObjectArray(ptr, cnt, self._ptr, idx)
        if not cnt[0]:
            self._lib.DSS_Dispose_PPointer(ptr)
            self._check_for_error()
            return []

        # wrap the results with Python classes
        if pycls is None:
            res = []
            for other_ptr in self._ffi.unpack(ptr[0], cnt[0]):
                cls_idx = self._lib.Obj_GetClassIdx(other_ptr)
                pycls = self._iobj._idx_to_cls[cls_idx]
                res.append(pycls(self._api_util, other_ptr))
        else:
            res = [
                pycls(self._api_util, other_ptr)
                for other_ptr in self._ffi.unpack(ptr[0], cnt[0])
            ]

        self._lib.DSS_Dispose_PPointer(ptr)
        self._check_for_error()
        return res

    def _set_obj_array(self, idx: int, other):
        if other is None or not other:
            other_ptr = self._ffi.NULL
            other_cnt = 0
        else:
            other_cnt = len(other)
            other_ptr = self.ffi.new('void*[]', other_cnt)
            other_ptr[:] = [o._ptr for o in other]
            
        self._lib.Obj_SetObjectArray(self._ptr, idx, other_ptr, other_cnt)
        self._check_for_error()        


class DSSBatch(Base):

    #TODO: keep property name for debugging? Or maybe use from the parent object

    def __init__(self, api_util, **kwargs):
        if len(kwargs) > 1:
            raise ValueError('Exactly one argument is expected.')
        
        Base.__init__(self, api_util)
        self._ffi = api_util.ffi

        self.pointer = self._ffi.new('void***')
        self.count = self._ffi.new('int32_t[4]')
        if len(kwargs) == 0:
            self._lib.Batch_CreateByClass(self.pointer, self.count, self._cls_idx)
            self._check_for_error()
            return
            
        regexp = kwargs.get('re')
        if regexp is not None:
            if not isinstance(regexp, bytes):
                regexp = regexp.encode(self._api_util.codec)

            self._lib.Batch_CreateByRegExp(self.pointer, self.count, self._cls_idx, regexp)
            self._check_for_error()
            return

        idx = kwargs.get('idx')
        if regexp is not None:
            idx, idx_ptr, idx_cnt = self._prepare_int32_array(idx)
            self._lib.Batch_CreateByIndex(self.pointer, self.count, self._cls_idx, idx_ptr, idx_cnt)
            self._check_for_error()
            return

        (prop_name, intval), = kwargs.items()
        prop_idx = self._obj_cls._cls_prop_idx.get(prop_name.lower())
        if prop_idx is None:
            raise ValueError('Invalid property name "{}"'.format(prop_name))
        self._lib.Batch_CreateByInt32Property(self.pointer, self.count, self._cls_idx, prop_idx, intval)
        self._check_for_error()

    def to_json(self, options: Union[int, DSSJSONFlags] = 0):
        '''
        Returns the data (as a list) of the elements in a batch as a JSON-encoded string.

        The `options` parameter contains bit-flags to toggle specific features.
        See `Obj_ToJSON` (C-API) for more, or `DSSObj.to_json` in Python.
        
        Additionally, the `ExcludeDisabled` flag can be used to excluded disabled elements from the output.

        (API Extension)
        '''
        s = self._lib.Batch_ToJSON(self.pointer[0], self.count[0], options)
        self._check_for_error()
        return self._ffi.string(s).decode(self._api_util.codec)

    def __eq__(self, other):
        return self is other

    def __len__(self):
        if self.count is None or self.count == self._ffi.NULL:
            return 0

        return self.count[0]

    def __iter__(self):
        for ptr in self._ffi.unpack(self.pointer[0], self.count[0]):
            yield self._obj_cls(self._api_util, ptr)

    def __getitem__(self, idx0):
        #TODO: decide if we keep it 0-based or 1-based here
        '''Get element at 0-based index of the batch pointer array'''
        if idx0 >= len(self) or idx0 < 0:
            raise IndexError

        ptr = self.pointer[0][idx0]
        return self._obj_cls(self._api_util, ptr)

    def _set_batch_float64_array(self, idx: int, value):
        if isinstance(value, BatchFloat64ArrayProxy):
            if self is value._batch and value._idx == idx:
                # ignore if we're setting to property to itself
                return

            value = value.to_array()

        if np.isscalar(value):
            self._lib.Batch_Float64(
                self.pointer[0], 
                self.count[0], 
                idx,
                self._lib.BatchOperation_Set,
                value
            )
            return

        data, data_ptr, data_cnt = self._prepare_float64_array(value)
        if data_cnt != self.count[0]:
            raise ValueError("Number of elements must match")

        self._lib.Batch_SetFloat64Array(
            self.pointer[0], 
            self.count[0], 
            data_ptr,
            idx
        )


    def _set_batch_int32_array(self, idx: int, value):
        if isinstance(value, BatchInt32ArrayProxy):
            if self is value._batch and value._idx == idx:
                # ignore if we're setting to property to itself
                return

            value = value.to_array()

        if np.isscalar(value):
            self._lib.Batch_Int32(
                self.pointer[0], 
                self.count[0], 
                idx,
                self._lib.BatchOperation_Set,
                value
            )
            return
        
        data, data_ptr, data_cnt = self._prepare_float64_array(value)
        if data_cnt != self.count[0]:
            raise ValueError("Number of elements must match")

        self._lib.Batch_SetInt32Array(
            self.pointer[0], 
            self.count[0], 
            data_ptr,
            idx
        )

    def _set_batch_string(self, idx: int, value: AnyStr):
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], idx, value)

    def _set_batch_obj(self, idx: int, other):
        if other is not None:
            other_ptr = other._ptr
        else:
            other_ptr = self._ffi.NULL

        self._lib.Batch_SetObject(self.pointer[0], self.count[0], idx, other_ptr)
        self._check_for_error()


    def _get_string_ll(self, idx: int):
        return [   
            self._get_string_array(self._lib.Obj_GetStringArray, x, idx) 
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]


    @property
    def name(self) -> List[str]:
        res = [
            self._ffi.string(self._lib.Obj_GetName(ptr)).decode(self._api_util.codec)
            for ptr in self._ffi.unpack(self.pointer[0], self.count[0])
        ]
        self._check_for_error()
        return res
        

    def _get_batch_obj_array(self, idx: int, pycls):
        if self.count[0] == 0:
            return []

        obj = self._obj_cls(self._api_util, self.pointer[0])
        res = []
        for ptr in self._ffi.unpack(self.pointer[0], self.count[0]):
            obj._ptr = ptr
            res.append(obj._get_obj_array(idx, pycls))

        return res

    def _set_batch_obj_array(self, idx: int, other):
        if self.count[0] == 0:
            return

        if other is None or not other:
            other_ptr = self._ffi.NULL
            other_cnt = 0
            self._lib.Batch_SetObjectArray(self.pointer[0], self.count[0], idx, other_ptr, other_cnt)
            self._check_for_error()
            return
        elif isinstance(other[0], DSSObj):
            other_ptr = self.ffi.new('void*[]', len(other))
            other_ptr[:] = [o._ptr for o in other]
            self._lib.Batch_SetObjectArray(self.pointer[0], self.count[0], idx, other_ptr, len(other))
            return            

        obj = self._obj_cls(self._api_util, self.pointer[0])
        res = []
        for other_objs, ptr in zip(other, self._ffi.unpack(self.pointer[0], self.count[0])):
            # this could be optimized to reuse the pointers, but it's not usually in
            # the hot path
            obj._ptr = ptr
            obj._set_obj_array(idx, other_objs)


class IDSSObj(Base):
    def __init__(self, iobj, cls_idx, obj_cls, batch_cls):
        Base.__init__(self, iobj._api_util)
        self._iobj = iobj
        self.cls_idx = cls_idx
        self._obj_cls = obj_cls
        self._batch_cls = batch_cls
        iobj._idx_to_cls[cls_idx] = self

    def batch(self, **kwargs):
        '''
        Creates a new batch hanlder of (existing) objects
        '''
        return self._batch_cls(self._api_util, **kwargs)

    def new(self, name: str, begin_edit=True, activate=False):
        if not isinstance(name, bytes):
            name = name.encode(self._api_util.codec)

        ptr = self._api_util.lib.Obj_New(
            self._api_util.ctx,
            self.cls_idx,
            name,
            activate,
            begin_edit
        )

        if ptr == self._api_util.ffi.NULL:
            raise ValueError('Could not create object "{}".'.format(name))

        return self._obj_cls(self._api_util, ptr)

    def find(self, name_or_idx):
        lib = self._lib

        if isinstance(name_or_idx, int):
            ptr = lib.Obj_GetHandleByIdx(self._api_util.ctx, self.cls_idx, name_or_idx)
            if ptr == self._api_util.ffi.NULL:
                raise ValueError('Could not find object by index "{}".'.format(name_or_idx))
        else:
            if type(name_or_idx) is not bytes:
                name_or_idx = name_or_idx.encode(self._api_util.codec)
            
            ptr = lib.Obj_GetHandleByName(self._api_util.ctx, self.cls_idx, name_or_idx)
            if ptr == self._api_util.ffi.NULL:
                raise ValueError('Could not find object by name "{}".'.format(name_or_idx))

        return self._obj_cls(self._api_util, ptr)

    def __len__(self):
        return self._lib.Obj_GetCount(self._api_util.ctx, self.cls_idx)

    def __iter__(self):
        for idx in range(len(self)):
            ptr = self._lib.Obj_GetHandleByIdx(self._api_util.ctx, self.cls_idx, idx + 1)
            yield self._obj_cls(self._api_util, ptr)

    def __getitem__(self, name_or_idx):
        return self.find(name_or_idx)


# Global enumerations
class EarthModel(IntEnum):
    """Earth Model (DSS enumeration)"""
    Carson = 1 # Carson
    FullCarson = 2 # FullCarson
    Deri = 3 # Deri

class LineType(IntEnum):
    """Line Type (DSS enumeration)"""
    oh = 1 # oh
    ug = 2 # ug
    ug_ts = 3 # ug_ts
    ug_cn = 4 # ug_cn
    swt_ldbrk = 5 # swt_ldbrk
    swt_fuse = 6 # swt_fuse
    swt_sect = 7 # swt_sect
    swt_rec = 8 # swt_rec
    swt_disc = 9 # swt_disc
    swt_brk = 10 # swt_brk
    swt_elbow = 11 # swt_elbow

class DimensionUnits(IntEnum):
    """Dimension Units (DSS enumeration)"""
    none = 0 # none
    mi = 1 # mi
    kft = 2 # kft
    km = 3 # km
    m = 4 # m
    ft = 5 # ft
    inch = 6 # in
    cm = 7 # cm
    mm = 8 # mm
    meter = 4 # meter
    miles = 1 # miles

class ScanType(IntEnum):
    """Scan Type (DSS enumeration)"""
    none = -1 # None
    Zero = 0 # Zero
    Positive = 1 # Positive

class SequenceType(IntEnum):
    """Sequence Type (DSS enumeration)"""
    Negative = -1 # Negative
    Zero = 0 # Zero
    Positive = 1 # Positive

class Connection(IntEnum):
    """Connection (DSS enumeration)"""
    wye = 0 # wye
    delta = 1 # delta
    y = 0 # y
    ln = 0 # ln
    ll = 1 # ll

class CoreType(IntEnum):
    """Core Type (DSS enumeration)"""
    shell = 0 # shell
    one_phase = 1 # 1-phase
    three_leg = 3 # 3-leg
    four_leg = 4 # 4-leg
    five_leg = 5 # 5-leg
    core_1_phase = 9 # core-1-phase

class PhaseSequence(IntEnum):
    """Phase Sequence (DSS enumeration)"""
    Lag = 0 # Lag
    Lead = 1 # Lead
    ANSI = 0 # ANSI
    Euro = 1 # Euro

class LoadSolutionModel(IntEnum):
    """Load Solution Model (DSS enumeration)"""
    PowerFlow = 1 # PowerFlow
    Admittance = 2 # Admittance

class RandomType(IntEnum):
    """Random Type (DSS enumeration)"""
    none = 0 # None
    Gaussian = 1 # Gaussian
    Uniform = 2 # Uniform
    LogNormal = 3 # LogNormal

class ControlMode(IntEnum):
    """Control Mode (DSS enumeration)"""
    Off = -1 # Off
    Static = 0 # Static
    Event = 1 # Event
    Time = 2 # Time
    MultiRate = 3 # MultiRate

class SolutionMode(IntEnum):
    """Solution Mode (DSS enumeration)"""
    Snap = 0 # Snap
    Daily = 1 # Daily
    Yearly = 2 # Yearly
    M1 = 3 # M1
    LD1 = 4 # LD1
    PeakDay = 5 # PeakDay
    DutyCycle = 6 # DutyCycle
    Direct = 7 # Direct
    MF = 8 # MF
    FaultStudy = 9 # FaultStudy
    M2 = 10 # M2
    M3 = 11 # M3
    LD2 = 12 # LD2
    AutoAdd = 13 # AutoAdd
    Dynamic = 14 # Dynamic
    Harmonic = 15 # Harmonic
    Time = 16 # Time
    HarmonicT = 17 # HarmonicT
    Snapshot = 0 # Snapshot

class SolutionAlgorithm(IntEnum):
    """Solution Algorithm (DSS enumeration)"""
    Normal = 0 # Normal
    Newton = 1 # Newton

class CircuitModel(IntEnum):
    """Circuit Model (DSS enumeration)"""
    Multiphase = 0 # Multiphase
    Positive = 1 # Positive

class AutoAddDeviceType(IntEnum):
    """AutoAdd Device Type (DSS enumeration)"""
    Generator = 1 # Generator
    Capacitor = 2 # Capacitor

class LoadShapeClass(IntEnum):
    """Load Shape Class (DSS enumeration)"""
    none = -1 # None
    Daily = 0 # Daily
    Yearly = 1 # Yearly
    Duty = 2 # Duty

class MonitoredPhase(IntEnum):
    """Monitored Phase (DSS enumeration)"""
    min = -3 # min
    max = -2 # max
    avg = -1 # avg


class LineCode(DSSObj):
    _cls_name = 'LineCode'
    _cls_idx = 1
    _cls_prop_idx = {
        'nphases': 1,
        'r1': 2,
        'x1': 3,
        'r0': 4,
        'x0': 5,
        'c1': 6,
        'c0': 7,
        'units': 8,
        'rmatrix': 9,
        'xmatrix': 10,
        'cmatrix': 11,
        'basefreq': 12,
        'normamps': 13,
        'emergamps': 14,
        'faultrate': 15,
        'pctperm': 16,
        'repair': 17,
        'kron': 18,
        'rg': 19,
        'xg': 20,
        'rho': 21,
        'neutral': 22,
        'b1': 23,
        'b0': 24,
        'seasons': 25,
        'ratings': 26,
        'linetype': 27,
        'like': 28,
    }

    @property
    def nphases(self) -> int:
        """
        DSS property name: nphases
        DSS property index: 1

        Number of phases in the line this line code data represents.  Setting this property reinitializes the line code.  Impedance matrix is reset for default symmetrical component.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @nphases.setter
    def nphases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def r1(self) -> float:
        """
        DSS property name: r1
        DSS property index: 2

        Positive-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Rmatrix.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @r1.setter
    def r1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def x1(self) -> float:
        """
        DSS property name: x1
        DSS property index: 3

        Positive-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Xmatrix
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @x1.setter
    def x1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def r0(self) -> float:
        """
        DSS property name: r0
        DSS property index: 4

        Zero-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @r0.setter
    def r0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def x0(self) -> float:
        """
        DSS property name: x0
        DSS property index: 5

        Zero-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @x0.setter
    def x0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def C1(self) -> float:
        """
        DSS property name: C1
        DSS property index: 6

        Positive-sequence capacitance, nf per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Cmatrix and B1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @C1.setter
    def C1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def C0(self) -> float:
        """
        DSS property name: C0
        DSS property index: 7

        Zero-sequence capacitance, nf per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also B0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @C0.setter
    def C0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def units(self) -> DimensionUnits:
        """
        DSS property name: units
        DSS property index: 8

        One of (ohms per ...) {none|mi|km|kft|m|me|ft|in|cm}.  Default is none; assumes units agree with length unitsgiven in Line object
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 8))

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(8, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 8, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 8

        One of (ohms per ...) {none|mi|km|kft|m|me|ft|in|cm}.  Default is none; assumes units agree with length unitsgiven in Line object
        """
        return self._get_prop_string(8)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    @property
    def rmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: rmatrix
        DSS property index: 9

        Resistance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 9)

    @rmatrix.setter
    def rmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def xmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: xmatrix
        DSS property index: 10

        Reactance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 10)

    @xmatrix.setter
    def xmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def cmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: cmatrix
        DSS property index: 11

        Nodal Capacitance matrix, lower triangle, nf per unit length.Order of the matrix is the number of phases. May be used to specify the shunt capacitance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 11)

    @cmatrix.setter
    def cmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def baseFreq(self) -> float:
        """
        DSS property name: baseFreq
        DSS property index: 12

        Frequency at which impedances are specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @baseFreq.setter
    def baseFreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 13

        Normal ampere limit on line.  This is the so-called Planning Limit. It may also be the value above which load will have to be dropped in a contingency.  Usually about 75% - 80% of the emergency (one-hour) rating.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 14

        Emergency ampere limit on line (usually one-hour rating).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 15

        Number of faults per unit length per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 16

        Percentage of the faults that become permanent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 17

        Hours to repair.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    def Kron(self, value: bool):
        """
        DSS property name: Kron
        DSS property index: 18

        Kron = Y/N. Default=N.  Perform Kron reduction on the impedance matrix after it is formed, reducing order by 1. Eliminates the conductor designated by the "Neutral=" property. Do this after the R, X, and C matrices are defined. Ignored for symmetrical components. May be issued more than once to eliminate more than one conductor by resetting the Neutral property after the previous invoking of this property. Generally, you do not want to do a Kron reduction on the matrix if you intend to solve at a frequency other than the base frequency and exploit the Rg and Xg values.
        """
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def Rg(self) -> float:
        """
        DSS property name: Rg
        DSS property index: 19

        Carson earth return resistance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments. Default is 0.01805 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @Rg.setter
    def Rg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def Xg(self) -> float:
        """
        DSS property name: Xg
        DSS property index: 20

        Carson earth return reactance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments. Default value is 0.155081 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @Xg.setter
    def Xg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def rho(self) -> float:
        """
        DSS property name: rho
        DSS property index: 21

        Default=100 meter ohms.  Earth resitivity used to compute earth correction factor.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @rho.setter
    def rho(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def neutral(self) -> int:
        """
        DSS property name: neutral
        DSS property index: 22

        Designates which conductor is the "neutral" conductor that will be eliminated by Kron reduction. Default is the last conductor (nphases value). After Kron reduction is set to 0. Subsequent issuing of Kron=Yes will not do anything until this property is set to a legal value. Applies only to LineCodes defined by R, X, and C matrix.
        """
        return self._lib.Obj_GetInt32(self._ptr, 22)

    @neutral.setter
    def neutral(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    @property
    def B1(self) -> float:
        """
        DSS property name: B1
        DSS property index: 23

        Alternate way to specify C1. MicroS per unit length
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @B1.setter
    def B1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def B0(self) -> float:
        """
        DSS property name: B0
        DSS property index: 24

        Alternate way to specify C0. MicroS per unit length
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @B0.setter
    def B0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 25

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 25)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 25, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 26

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 26)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(26, value)

    @property
    def linetype(self) -> LineType:
        """
        DSS property name: LineType
        DSS property index: 27

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return LineType(self._lib.Obj_GetInt32(self._ptr, 27))

    @linetype.setter
    def linetype(self, value: Union[AnyStr, int, LineType]):
        if not isinstance(value, int):
            self._set_string(27, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 27, value)

    @property
    def linetype_str(self) -> str:
        """
        DSS property name: LineType
        DSS property index: 27

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return self._get_prop_string(27)

    @linetype_str.setter
    def linetype_str(self, value: AnyStr):
        self.linetype = value

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 28

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(28, value)

class LoadShape(DSSObj):
    _cls_name = 'LoadShape'
    _cls_idx = 2
    _cls_prop_idx = {
        'npts': 1,
        'interval': 2,
        'mult': 3,
        'hour': 4,
        'mean': 5,
        'stddev': 6,
        'csvfile': 7,
        'sngfile': 8,
        'dblfile': 9,
        'action': 10,
        'qmult': 11,
        'useactual': 12,
        'pmax': 13,
        'qmax': 14,
        'sinterval': 15,
        'minterval': 16,
        'pbase': 17,
        'qbase': 18,
        'pmult': 19,
        'pqcsvfile': 20,
        'memorymapping': 21,
        'like': 22,
    }

    # Class-specific enumerations
    class LoadShapeAction(IntEnum):
        """LoadShape: Action (DSS enumeration for LoadShape)"""
        Normalize = 0 # Normalize
        DblSave = 1 # DblSave
        SngSave = 2 # SngSave


    @property
    def npts(self) -> int:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in load shape vectors. This gets reset to the number of multiplier values found (in files only) if less than specified.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @npts.setter
    def npts(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def interval(self) -> float:
        """
        DSS property name: interval
        DSS property index: 2

        Time interval for fixed interval data, hrs. Default = 1. If Interval = 0 then time data (in hours) may be at either regular or  irregular intervals and time value must be specified using either the Hour property or input files. Then values are interpolated when Interval=0, but not for fixed interval data.  

        See also "sinterval" and "minterval".
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @interval.setter
    def interval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def mult(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: mult
        DSS property index: 3

        Array of multiplier values for active power (P) or other key value (such as pu V for Vsource). 

        You can also use the syntax: 

        mult = (file=filename)     !for text file one value per line
        mult = (dblfile=filename)  !for packed file of doubles
        mult = (sngfile=filename)  !for packed file of singles 
        mult = (file=MyCSVFile.CSV, col=3, header=yes)  !for multicolumn CSV files 

        Note: this property will reset Npts if the  number of values in the files are fewer.

        Same as Pmult
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @mult.setter
    def mult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def hour(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: hour
        DSS property index: 4

        Array of hour values. Only necessary to define for variable interval data (Interval=0). If you set Interval>0 to denote fixed interval data, DO NOT USE THIS PROPERTY. You can also use the syntax: 
        hour = (file=filename)     !for text file one value per line
        hour = (dblfile=filename)  !for packed file of doubles
        hour = (sngfile=filename)  !for packed file of singles 
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 4)

    @hour.setter
    def hour(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def mean(self) -> float:
        """
        DSS property name: mean
        DSS property index: 5

        Mean of the active power multipliers.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently. Used for Monte Carlo load simulations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @mean.setter
    def mean(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def stddev(self) -> float:
        """
        DSS property name: stddev
        DSS property index: 6

        Standard deviation of active power multipliers.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently.Is overwritten if you subsequently read in a curve

        Used for Monte Carlo load simulations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @stddev.setter
    def stddev(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def csvfile(self) -> str:
        """
        DSS property name: csvfile
        DSS property index: 7

        Switch input of active power load curve data to a CSV text file containing (hour, mult) points, or simply (mult) values for fixed time interval data, one per line. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(7)

    @csvfile.setter
    def csvfile(self, value: AnyStr):
        self._set_string(7, value)

    @property
    def sngfile(self) -> str:
        """
        DSS property name: sngfile
        DSS property index: 8

        Switch input of active power load curve data to a binary file of singles containing (hour, mult) points, or simply (mult) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(8)

    @sngfile.setter
    def sngfile(self, value: AnyStr):
        self._set_string(8, value)

    @property
    def dblfile(self) -> str:
        """
        DSS property name: dblfile
        DSS property index: 9

        Switch input of active power load curve data to a binary file of doubles containing (hour, mult) points, or simply (mult) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(9)

    @dblfile.setter
    def dblfile(self, value: AnyStr):
        self._set_string(9, value)

    def action(self, value: Union[str, bytes, int, LoadShapeAction]):
        """
        DSS property name: action
        DSS property index: 10

        {NORMALIZE | DblSave | SngSave} After defining load curve data, setting action=normalize will modify the multipliers so that the peak is 1.0. The mean and std deviation are recomputed.

        Setting action=DblSave or SngSave will cause the present mult and qmult values to be written to either a packed file of double or single. The filename is the loadshape name. The mult array will have a "_P" appended on the file name and the qmult array, if it exists, will have "_Q" appended.
        """
        if isinstance(value, int):
            self._lib.Obj_SetInt32(self._ptr, 10, value)
            return
    
        self._set_string(10, value)

    @property
    def qmult(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: qmult
        DSS property index: 11

        Array of multiplier values for reactive power (Q).  You can also use the syntax: 
        qmult = (file=filename)     !for text file one value per line
        qmult = (dblfile=filename)  !for packed file of doubles
        qmult = (sngfile=filename)  !for packed file of singles 
        qmult = (file=MyCSVFile.CSV, col=4, header=yes)  !for multicolumn CSV files 
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 11)

    @qmult.setter
    def qmult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def UseActual(self) -> bool:
        """
        DSS property name: UseActual
        DSS property index: 12

        {Yes | No* | True | False*} If true, signifies to Load, Generator, Vsource, or other objects to use the return value as the actual kW, kvar, kV, or other value rather than a multiplier. Nominally for AMI Load data but may be used for other functions.
        """
        return self._lib.Obj_GetInt32(self._ptr, 12) != 0

    @UseActual.setter
    def UseActual(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    @property
    def Pmax(self) -> float:
        """
        DSS property name: Pmax
        DSS property index: 13

        kW value at the time of max power. Is automatically set upon reading in a loadshape. Use this property to override the value automatically computed or to retrieve the value computed.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @Pmax.setter
    def Pmax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def Qmax(self) -> float:
        """
        DSS property name: Qmax
        DSS property index: 14

        kvar value at the time of max kW power. Is automatically set upon reading in a loadshape. Use this property to override the value automatically computed or to retrieve the value computed.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @Qmax.setter
    def Qmax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def sinterval(self) -> float:
        """
        DSS property name: sinterval
        DSS property index: 15

        Specify fixed interval in SECONDS. Alternate way to specify Interval property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @sinterval.setter
    def sinterval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def minterval(self) -> float:
        """
        DSS property name: minterval
        DSS property index: 16

        Specify fixed interval in MINUTES. Alternate way to specify Interval property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @minterval.setter
    def minterval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def Pbase(self) -> float:
        """
        DSS property name: Pbase
        DSS property index: 17

        Base P value for normalization. Default is zero, meaning the peak will be used.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @Pbase.setter
    def Pbase(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def Qbase(self) -> float:
        """
        DSS property name: Qbase
        DSS property index: 18

        Base Q value for normalization. Default is zero, meaning the peak will be used.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @Qbase.setter
    def Qbase(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def Pmult(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Pmult
        DSS property index: 19

        Synonym for "mult".
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 19)

    @Pmult.setter
    def Pmult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(19, value)

    @property
    def PQCSVFile(self) -> str:
        """
        DSS property name: PQCSVFile
        DSS property index: 20

        Switch input to a CSV text file containing (active, reactive) power (P, Q) multiplier pairs, one per row. 
        If the interval=0, there should be 3 items on each line: (hour, Pmult, Qmult)
        """
        return self._get_prop_string(20)

    @PQCSVFile.setter
    def PQCSVFile(self, value: AnyStr):
        self._set_string(20, value)

    @property
    def MemoryMapping(self) -> bool:
        """
        DSS property name: MemoryMapping
        DSS property index: 21

        {Yes | No* | True | False*} Enables the memory mapping functionality for dealing with large amounts of load shapes. 
        By defaul is False. Use it to accelerate the model loading when the containing a large number of load shapes.
        """
        return self._lib.Obj_GetInt32(self._ptr, 21) != 0

    @MemoryMapping.setter
    def MemoryMapping(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 21, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 22

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(22, value)

class TShape(DSSObj):
    _cls_name = 'TShape'
    _cls_idx = 3
    _cls_prop_idx = {
        'npts': 1,
        'interval': 2,
        'temp': 3,
        'hour': 4,
        'mean': 5,
        'stddev': 6,
        'csvfile': 7,
        'sngfile': 8,
        'dblfile': 9,
        'sinterval': 10,
        'minterval': 11,
        'action': 12,
        'like': 13,
    }

    # Class-specific enumerations
    class TShapeAction(IntEnum):
        """TShape: Action (DSS enumeration for TShape)"""
        DblSave = 0 # DblSave
        SngSave = 1 # SngSave


    @property
    def npts(self) -> int:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in temperature shape vectors. This gets reset to the number of Temperature values found if less than specified.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @npts.setter
    def npts(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def interval(self) -> float:
        """
        DSS property name: interval
        DSS property index: 2

        Time interval for fixed interval data, hrs. Default = 1. If Interval = 0 then time data (in hours) may be at irregular intervals and time value must be specified using either the Hour property or input files. Then values are interpolated when Interval=0, but not for fixed interval data.  

        See also "sinterval" and "minterval".
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @interval.setter
    def interval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def temp(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: temp
        DSS property index: 3

        Array of temperature values.  Units should be compatible with the object using the data. You can also use the syntax: 
        Temp = (file=filename)     !for text file one value per line
        Temp = (dblfile=filename)  !for packed file of doubles
        Temp = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts if the  number of values in the files are fewer.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @temp.setter
    def temp(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def hour(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: hour
        DSS property index: 4

        Array of hour values. Only necessary to define this property for variable interval data. If the data are fixed interval, do not use this property. You can also use the syntax: 
        hour = (file=filename)     !for text file one value per line
        hour = (dblfile=filename)  !for packed file of doubles
        hour = (sngfile=filename)  !for packed file of singles 
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 4)

    @hour.setter
    def hour(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def mean(self) -> float:
        """
        DSS property name: mean
        DSS property index: 5

        Mean of the temperature curve values.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently. Used for Monte Carlo load simulations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @mean.setter
    def mean(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def stddev(self) -> float:
        """
        DSS property name: stddev
        DSS property index: 6

        Standard deviation of the temperatures.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently.Is overwritten if you subsequently read in a curve

        Used for Monte Carlo load simulations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @stddev.setter
    def stddev(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def csvfile(self) -> str:
        """
        DSS property name: csvfile
        DSS property index: 7

        Switch input of  temperature curve data to a csv file containing (hour, Temp) points, or simply (Temp) values for fixed time interval data, one per line. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(7)

    @csvfile.setter
    def csvfile(self, value: AnyStr):
        self._set_string(7, value)

    @property
    def sngfile(self) -> str:
        """
        DSS property name: sngfile
        DSS property index: 8

        Switch input of  temperature curve data to a binary file of singles containing (hour, Temp) points, or simply (Temp) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(8)

    @sngfile.setter
    def sngfile(self, value: AnyStr):
        self._set_string(8, value)

    @property
    def dblfile(self) -> str:
        """
        DSS property name: dblfile
        DSS property index: 9

        Switch input of  temperature curve data to a binary file of doubles containing (hour, Temp) points, or simply (Temp) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(9)

    @dblfile.setter
    def dblfile(self, value: AnyStr):
        self._set_string(9, value)

    @property
    def sinterval(self) -> float:
        """
        DSS property name: sinterval
        DSS property index: 10

        Specify fixed interval in SECONDS. Alternate way to specify Interval property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @sinterval.setter
    def sinterval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def minterval(self) -> float:
        """
        DSS property name: minterval
        DSS property index: 11

        Specify fixed interval in MINUTES. Alternate way to specify Interval property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @minterval.setter
    def minterval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    def action(self, value: Union[str, bytes, int, TShapeAction]):
        """
        DSS property name: action
        DSS property index: 12

        {DblSave | SngSave} After defining temperature curve data... Setting action=DblSave or SngSave will cause the present "Temp" values to be written to either a packed file of double or single. The filename is the Tshape name. 
        """
        if isinstance(value, int):
            self._lib.Obj_SetInt32(self._ptr, 12, value)
            return
    
        self._set_string(12, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 13

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(13, value)

class PriceShape(DSSObj):
    _cls_name = 'PriceShape'
    _cls_idx = 4
    _cls_prop_idx = {
        'npts': 1,
        'interval': 2,
        'price': 3,
        'hour': 4,
        'mean': 5,
        'stddev': 6,
        'csvfile': 7,
        'sngfile': 8,
        'dblfile': 9,
        'sinterval': 10,
        'minterval': 11,
        'action': 12,
        'like': 13,
    }

    # Class-specific enumerations
    class PriceShapeAction(IntEnum):
        """PriceShape: Action (DSS enumeration for PriceShape)"""
        DblSave = 0 # DblSave
        SngSave = 1 # SngSave


    @property
    def npts(self) -> int:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in price shape vectors. This gets reset to the number of Price values found if less than specified.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @npts.setter
    def npts(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def interval(self) -> float:
        """
        DSS property name: interval
        DSS property index: 2

        Time interval for fixed interval data, hrs. Default = 1. If Interval = 0 then time data (in hours) may be at irregular intervals and time value must be specified using either the Hour property or input files. Then values are interpolated when Interval=0, but not for fixed interval data.  

        See also "sinterval" and "minterval".
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @interval.setter
    def interval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def price(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: price
        DSS property index: 3

        Array of Price values.  Units should be compatible with the object using the data. You can also use the syntax: 
        Price = (file=filename)     !for text file one value per line
        Price = (dblfile=filename)  !for packed file of doubles
        Price = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts if the  number of values in the files are fewer.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @price.setter
    def price(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def hour(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: hour
        DSS property index: 4

        Array of hour values. Only necessary to define this property for variable interval data. If the data are fixed interval, do not use this property. You can also use the syntax: 
        hour = (file=filename)     !for text file one value per line
        hour = (dblfile=filename)  !for packed file of doubles
        hour = (sngfile=filename)  !for packed file of singles 
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 4)

    @hour.setter
    def hour(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def mean(self) -> float:
        """
        DSS property name: mean
        DSS property index: 5

        Mean of the Price curve values.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently. Used for Monte Carlo load simulations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @mean.setter
    def mean(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def stddev(self) -> float:
        """
        DSS property name: stddev
        DSS property index: 6

        Standard deviation of the Prices.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently.Is overwritten if you subsequently read in a curve

        Used for Monte Carlo load simulations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @stddev.setter
    def stddev(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def csvfile(self) -> str:
        """
        DSS property name: csvfile
        DSS property index: 7

        Switch input of  Price curve data to a csv file containing (hour, Price) points, or simply (Price) values for fixed time interval data, one per line. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(7)

    @csvfile.setter
    def csvfile(self, value: AnyStr):
        self._set_string(7, value)

    @property
    def sngfile(self) -> str:
        """
        DSS property name: sngfile
        DSS property index: 8

        Switch input of  Price curve data to a binary file of singles containing (hour, Price) points, or simply (Price) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(8)

    @sngfile.setter
    def sngfile(self, value: AnyStr):
        self._set_string(8, value)

    @property
    def dblfile(self) -> str:
        """
        DSS property name: dblfile
        DSS property index: 9

        Switch input of  Price curve data to a binary file of doubles containing (hour, Price) points, or simply (Price) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(9)

    @dblfile.setter
    def dblfile(self, value: AnyStr):
        self._set_string(9, value)

    @property
    def sinterval(self) -> float:
        """
        DSS property name: sinterval
        DSS property index: 10

        Specify fixed interval in SECONDS. Alternate way to specify Interval property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @sinterval.setter
    def sinterval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def minterval(self) -> float:
        """
        DSS property name: minterval
        DSS property index: 11

        Specify fixed interval in MINUTES. Alternate way to specify Interval property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @minterval.setter
    def minterval(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    def action(self, value: Union[str, bytes, int, PriceShapeAction]):
        """
        DSS property name: action
        DSS property index: 12

        {DblSave | SngSave} After defining Price curve data... Setting action=DblSave or SngSave will cause the present "Price" values to be written to either a packed file of double or single. The filename is the PriceShape name. 
        """
        if isinstance(value, int):
            self._lib.Obj_SetInt32(self._ptr, 12, value)
            return
    
        self._set_string(12, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 13

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(13, value)

class XYcurve(DSSObj):
    _cls_name = 'XYcurve'
    _cls_idx = 5
    _cls_prop_idx = {
        'npts': 1,
        'points': 2,
        'yarray': 3,
        'xarray': 4,
        'csvfile': 5,
        'sngfile': 6,
        'dblfile': 7,
        'x': 8,
        'y': 9,
        'xshift': 10,
        'yshift': 11,
        'xscale': 12,
        'yscale': 13,
        'like': 14,
    }

    @property
    def npts(self) -> int:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in curve. This could get reset to the actual number of points defined if less than specified.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @npts.setter
    def npts(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def Points(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Points
        DSS property index: 2

        One way to enter the points in a curve. Enter x and y values as one array in the order [x1, y1, x2, y2, ...]. For example:

        Points=[1,100 2,200 3, 300] 

        Values separated by commas or white space. Zero fills arrays if insufficient number of values.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 2)

    @Points.setter
    def Points(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def Yarray(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Yarray
        DSS property index: 3

        Alternate way to enter Y values. Enter an array of Y values corresponding to the X values.  You can also use the syntax: 
        Yarray = (file=filename)     !for text file one value per line
        Yarray = (dblfile=filename)  !for packed file of doubles
        Yarray = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts to a smaller value if the  number of values in the files are fewer.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @Yarray.setter
    def Yarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def Xarray(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Xarray
        DSS property index: 4

        Alternate way to enter X values. Enter an array of X values corresponding to the Y values.  You can also use the syntax: 
        Xarray = (file=filename)     !for text file one value per line
        Xarray = (dblfile=filename)  !for packed file of doubles
        Xarray = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts to a smaller value if the  number of values in the files are fewer.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 4)

    @Xarray.setter
    def Xarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def csvfile(self) -> str:
        """
        DSS property name: csvfile
        DSS property index: 5

        Switch input of  X-Y curve data to a CSV file containing X, Y points one per line. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(5)

    @csvfile.setter
    def csvfile(self, value: AnyStr):
        self._set_string(5, value)

    @property
    def sngfile(self) -> str:
        """
        DSS property name: sngfile
        DSS property index: 6

        Switch input of  X-Y curve data to a binary file of SINGLES containing X, Y points packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(6)

    @sngfile.setter
    def sngfile(self, value: AnyStr):
        self._set_string(6, value)

    @property
    def dblfile(self) -> str:
        """
        DSS property name: dblfile
        DSS property index: 7

        Switch input of  X-Y  curve data to a binary file of DOUBLES containing X, Y points packed one after another. NOTE: This action may reset the number of points to a lower value.
        """
        return self._get_prop_string(7)

    @dblfile.setter
    def dblfile(self, value: AnyStr):
        self._set_string(7, value)

    @property
    def x(self) -> float:
        """
        DSS property name: x
        DSS property index: 8

        Enter a value and then retrieve the interpolated Y value from the Y property. On input shifted then scaled to original curve. Scaled then shifted on output.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @x.setter
    def x(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def y(self) -> float:
        """
        DSS property name: y
        DSS property index: 9

        Enter a value and then retrieve the interpolated X value from the X property. On input shifted then scaled to original curve. Scaled then shifted on output.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @y.setter
    def y(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def Xshift(self) -> float:
        """
        DSS property name: Xshift
        DSS property index: 10

        Shift X property values (in/out) by this amount of offset. Default = 0. Does not change original definition of arrays.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @Xshift.setter
    def Xshift(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def Yshift(self) -> float:
        """
        DSS property name: Yshift
        DSS property index: 11

        Shift Y property values (in/out) by this amount of offset. Default = 0. Does not change original definition of arrays.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @Yshift.setter
    def Yshift(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def Xscale(self) -> float:
        """
        DSS property name: Xscale
        DSS property index: 12

        Scale X property values (in/out) by this factor. Default = 1.0. Does not change original definition of arrays.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @Xscale.setter
    def Xscale(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def Yscale(self) -> float:
        """
        DSS property name: Yscale
        DSS property index: 13

        Scale Y property values (in/out) by this factor. Default = 1.0. Does not change original definition of arrays.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @Yscale.setter
    def Yscale(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(14, value)

class GrowthShape(DSSObj):
    _cls_name = 'GrowthShape'
    _cls_idx = 6
    _cls_prop_idx = {
        'npts': 1,
        'year': 2,
        'mult': 3,
        'csvfile': 4,
        'sngfile': 5,
        'dblfile': 6,
        'like': 7,
    }

    @property
    def npts(self) -> int:
        """
        DSS property name: npts
        DSS property index: 1

        Number of points to expect in subsequent vector.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @npts.setter
    def npts(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def year(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: year
        DSS property index: 2

        Array of year values, or a text file spec, corresponding to the multipliers. Enter only those years where the growth changes. May be any integer sequence -- just so it is consistent. See help on Mult.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 2)

    @year.setter
    def year(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def mult(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: mult
        DSS property index: 3

        Array of growth multiplier values, or a text file spec, corresponding to the year values. Enter the multiplier by which you would multiply the previous year's load to get the present year's.

        Examples:

          Year = [1, 2, 5]   Mult=[1.05, 1.025, 1.02].
          Year= (File=years.txt) Mult= (file=mults.txt).

        Text files contain one value per line.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @mult.setter
    def mult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def csvfile(self) -> str:
        """
        DSS property name: csvfile
        DSS property index: 4

        Switch input of growth curve data to a csv file containing (year, mult) points, one per line.
        """
        return self._get_prop_string(4)

    @csvfile.setter
    def csvfile(self, value: AnyStr):
        self._set_string(4, value)

    @property
    def sngfile(self) -> str:
        """
        DSS property name: sngfile
        DSS property index: 5

        Switch input of growth curve data to a binary file of singles containing (year, mult) points, packed one after another.
        """
        return self._get_prop_string(5)

    @sngfile.setter
    def sngfile(self, value: AnyStr):
        self._set_string(5, value)

    @property
    def dblfile(self) -> str:
        """
        DSS property name: dblfile
        DSS property index: 6

        Switch input of growth curve data to a binary file of doubles containing (year, mult) points, packed one after another.
        """
        return self._get_prop_string(6)

    @dblfile.setter
    def dblfile(self, value: AnyStr):
        self._set_string(6, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 7

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(7, value)

class TCC_Curve(DSSObj):
    _cls_name = 'TCC_Curve'
    _cls_idx = 7
    _cls_prop_idx = {
        'npts': 1,
        'c_array': 2,
        't_array': 3,
        'like': 4,
    }

    @property
    def npts(self) -> int:
        """
        DSS property name: npts
        DSS property index: 1

        Number of points to expect in time-current arrays.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @npts.setter
    def npts(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def C_array(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: C_array
        DSS property index: 2

        Array of current (or voltage) values corresponding to time values (see help on T_Array).
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 2)

    @C_array.setter
    def C_array(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def T_array(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: T_array
        DSS property index: 3

        Array of time values in sec. Typical array syntax: 
        t_array = (1, 2, 3, 4, ...)

        Can also substitute a file designation: 
        t_array =  (file=filename)

        The specified file has one value per line.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @T_array.setter
    def T_array(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 4

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(4, value)

class Spectrum(DSSObj):
    _cls_name = 'Spectrum'
    _cls_idx = 8
    _cls_prop_idx = {
        'numharm': 1,
        'harmonic': 2,
        'pctmag': 3,
        '%mag': 3,
        'angle': 4,
        'csvfile': 5,
        'like': 6,
    }

    @property
    def NumHarm(self) -> int:
        """
        DSS property name: NumHarm
        DSS property index: 1

        Number of frequencies in this spectrum. (See CSVFile)
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @NumHarm.setter
    def NumHarm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def harmonic(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: harmonic
        DSS property index: 2

        Array of harmonic values. You can also use the syntax
        harmonic = (file=filename)     !for text file one value per line
        harmonic = (dblfile=filename)  !for packed file of doubles
        harmonic = (sngfile=filename)  !for packed file of singles 
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 2)

    @harmonic.setter
    def harmonic(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def pctmag(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: %mag
        DSS property index: 3

        Array of magnitude values, assumed to be in PERCENT. You can also use the syntax
        %mag = (file=filename)     !for text file one value per line
        %mag = (dblfile=filename)  !for packed file of doubles
        %mag = (sngfile=filename)  !for packed file of singles 
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @pctmag.setter
    def pctmag(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def angle(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: angle
        DSS property index: 4

        Array of phase angle values, degrees.You can also use the syntax
        angle = (file=filename)     !for text file one value per line
        angle = (dblfile=filename)  !for packed file of doubles
        angle = (sngfile=filename)  !for packed file of singles 
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 4)

    @angle.setter
    def angle(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def CSVFile(self) -> str:
        """
        DSS property name: CSVFile
        DSS property index: 5

        File of spectrum points with (harmonic, magnitude-percent, angle-degrees) values, one set of 3 per line, in CSV format. If fewer than NUMHARM frequencies found in the file, NUMHARM is set to the smaller value.
        """
        return self._get_prop_string(5)

    @CSVFile.setter
    def CSVFile(self, value: AnyStr):
        self._set_string(5, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 6

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(6, value)

class WireData(DSSObj):
    _cls_name = 'WireData'
    _cls_idx = 9
    _cls_prop_idx = {
        'rdc': 1,
        'rac': 2,
        'runits': 3,
        'gmrac': 4,
        'gmrunits': 5,
        'radius': 6,
        'radunits': 7,
        'normamps': 8,
        'emergamps': 9,
        'diam': 10,
        'seasons': 11,
        'ratings': 12,
        'capradius': 13,
        'like': 14,
    }

    @property
    def Rdc(self) -> float:
        """
        DSS property name: Rdc
        DSS property index: 1

        dc Resistance, ohms per unit length (see Runits). Defaults to Rac/1.02 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 1)

    @Rdc.setter
    def Rdc(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 1, value)

    @property
    def Rac(self) -> float:
        """
        DSS property name: Rac
        DSS property index: 2

        Resistance at 60 Hz per unit length. Defaults to 1.02*Rdc if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @Rac.setter
    def Rac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def Runits(self) -> DimensionUnits:
        """
        DSS property name: Runits
        DSS property index: 3

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 3))

    @Runits.setter
    def Runits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(3, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def Runits_str(self) -> str:
        """
        DSS property name: Runits
        DSS property index: 3

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(3)

    @Runits_str.setter
    def Runits_str(self, value: AnyStr):
        self.Runits = value

    @property
    def GMRac(self) -> float:
        """
        DSS property name: GMRac
        DSS property index: 4

        GMR at 60 Hz. Defaults to .7788*radius if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @GMRac.setter
    def GMRac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def GMRunits(self) -> DimensionUnits:
        """
        DSS property name: GMRunits
        DSS property index: 5

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 5))

    @GMRunits.setter
    def GMRunits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(5, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def GMRunits_str(self) -> str:
        """
        DSS property name: GMRunits
        DSS property index: 5

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(5)

    @GMRunits_str.setter
    def GMRunits_str(self, value: AnyStr):
        self.GMRunits = value

    @property
    def radius(self) -> float:
        """
        DSS property name: radius
        DSS property index: 6

        Outside radius of conductor. Defaults to GMR/0.7788 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @radius.setter
    def radius(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def radunits(self) -> DimensionUnits:
        """
        DSS property name: radunits
        DSS property index: 7

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 7))

    @radunits.setter
    def radunits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(7, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 7, value)

    @property
    def radunits_str(self) -> str:
        """
        DSS property name: radunits
        DSS property index: 7

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(7)

    @radunits_str.setter
    def radunits_str(self, value: AnyStr):
        self.radunits = value

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 8

        Normal ampacity, amperes. Defaults to Emergency amps/1.5 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 9

        Emergency ampacity, amperes. Defaults to 1.5 * Normal Amps if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def diam(self) -> float:
        """
        DSS property name: diam
        DSS property index: 10

        Diameter; Alternative method for entering radius.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @diam.setter
    def diam(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 11

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 11)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 11, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 12

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 12)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(12, value)

    @property
    def Capradius(self) -> float:
        """
        DSS property name: Capradius
        DSS property index: 13

        Equivalent conductor radius for capacitance calcs. Specify this for bundled conductors. Defaults to same value as radius. Define Diam or Radius property first.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @Capradius.setter
    def Capradius(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(14, value)

class CNData(DSSObj):
    _cls_name = 'CNData'
    _cls_idx = 10
    _cls_prop_idx = {
        'k': 1,
        'diastrand': 2,
        'gmrstrand': 3,
        'rstrand': 4,
        'epsr': 5,
        'inslayer': 6,
        'diains': 7,
        'diacable': 8,
        'rdc': 9,
        'rac': 10,
        'runits': 11,
        'gmrac': 12,
        'gmrunits': 13,
        'radius': 14,
        'radunits': 15,
        'normamps': 16,
        'emergamps': 17,
        'diam': 18,
        'seasons': 19,
        'ratings': 20,
        'capradius': 21,
        'like': 22,
    }

    @property
    def k(self) -> int:
        """
        DSS property name: k
        DSS property index: 1

        Number of concentric neutral strands; default is 2
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @k.setter
    def k(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def DiaStrand(self) -> float:
        """
        DSS property name: DiaStrand
        DSS property index: 2

        Diameter of a concentric neutral strand; same units as core conductor radius; no default.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @DiaStrand.setter
    def DiaStrand(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def GmrStrand(self) -> float:
        """
        DSS property name: GmrStrand
        DSS property index: 3

        Geometric mean radius of a concentric neutral strand; same units as core conductor GMR; defaults to 0.7788 * CN strand radius.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @GmrStrand.setter
    def GmrStrand(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def Rstrand(self) -> float:
        """
        DSS property name: Rstrand
        DSS property index: 4

        AC resistance of a concentric neutral strand; same units as core conductor resistance; no default.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @Rstrand.setter
    def Rstrand(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def EpsR(self) -> float:
        """
        DSS property name: EpsR
        DSS property index: 5

        Insulation layer relative permittivity; default is 2.3.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @EpsR.setter
    def EpsR(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def InsLayer(self) -> float:
        """
        DSS property name: InsLayer
        DSS property index: 6

        Insulation layer thickness; same units as radius; no default. With DiaIns, establishes inner radius for capacitance calculation.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @InsLayer.setter
    def InsLayer(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def DiaIns(self) -> float:
        """
        DSS property name: DiaIns
        DSS property index: 7

        Diameter over insulation layer; same units as radius; no default. Establishes outer radius for capacitance calculation.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @DiaIns.setter
    def DiaIns(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def DiaCable(self) -> float:
        """
        DSS property name: DiaCable
        DSS property index: 8

        Diameter over cable; same units as radius; no default.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @DiaCable.setter
    def DiaCable(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def Rdc(self) -> float:
        """
        DSS property name: Rdc
        DSS property index: 9

        dc Resistance, ohms per unit length (see Runits). Defaults to Rac/1.02 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @Rdc.setter
    def Rdc(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def Rac(self) -> float:
        """
        DSS property name: Rac
        DSS property index: 10

        Resistance at 60 Hz per unit length. Defaults to 1.02*Rdc if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @Rac.setter
    def Rac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def Runits(self) -> DimensionUnits:
        """
        DSS property name: Runits
        DSS property index: 11

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 11))

    @Runits.setter
    def Runits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(11, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 11, value)

    @property
    def Runits_str(self) -> str:
        """
        DSS property name: Runits
        DSS property index: 11

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(11)

    @Runits_str.setter
    def Runits_str(self, value: AnyStr):
        self.Runits = value

    @property
    def GMRac(self) -> float:
        """
        DSS property name: GMRac
        DSS property index: 12

        GMR at 60 Hz. Defaults to .7788*radius if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @GMRac.setter
    def GMRac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def GMRunits(self) -> DimensionUnits:
        """
        DSS property name: GMRunits
        DSS property index: 13

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 13))

    @GMRunits.setter
    def GMRunits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(13, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 13, value)

    @property
    def GMRunits_str(self) -> str:
        """
        DSS property name: GMRunits
        DSS property index: 13

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(13)

    @GMRunits_str.setter
    def GMRunits_str(self, value: AnyStr):
        self.GMRunits = value

    @property
    def radius(self) -> float:
        """
        DSS property name: radius
        DSS property index: 14

        Outside radius of conductor. Defaults to GMR/0.7788 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @radius.setter
    def radius(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def radunits(self) -> DimensionUnits:
        """
        DSS property name: radunits
        DSS property index: 15

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 15))

    @radunits.setter
    def radunits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(15, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def radunits_str(self) -> str:
        """
        DSS property name: radunits
        DSS property index: 15

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(15)

    @radunits_str.setter
    def radunits_str(self, value: AnyStr):
        self.radunits = value

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 16

        Normal ampacity, amperes. Defaults to Emergency amps/1.5 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 17

        Emergency ampacity, amperes. Defaults to 1.5 * Normal Amps if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def diam(self) -> float:
        """
        DSS property name: diam
        DSS property index: 18

        Diameter; Alternative method for entering radius.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @diam.setter
    def diam(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 19

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 19)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 19, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 20

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 20)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(20, value)

    @property
    def Capradius(self) -> float:
        """
        DSS property name: Capradius
        DSS property index: 21

        Equivalent conductor radius for capacitance calcs. Specify this for bundled conductors. Defaults to same value as radius. Define Diam or Radius property first.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @Capradius.setter
    def Capradius(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 22

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(22, value)

class TSData(DSSObj):
    _cls_name = 'TSData'
    _cls_idx = 11
    _cls_prop_idx = {
        'diashield': 1,
        'tapelayer': 2,
        'tapelap': 3,
        'epsr': 4,
        'inslayer': 5,
        'diains': 6,
        'diacable': 7,
        'rdc': 8,
        'rac': 9,
        'runits': 10,
        'gmrac': 11,
        'gmrunits': 12,
        'radius': 13,
        'radunits': 14,
        'normamps': 15,
        'emergamps': 16,
        'diam': 17,
        'seasons': 18,
        'ratings': 19,
        'capradius': 20,
        'like': 21,
    }

    @property
    def DiaShield(self) -> float:
        """
        DSS property name: DiaShield
        DSS property index: 1

        Diameter over tape shield; same units as radius; no default.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 1)

    @DiaShield.setter
    def DiaShield(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 1, value)

    @property
    def TapeLayer(self) -> float:
        """
        DSS property name: TapeLayer
        DSS property index: 2

        Tape shield thickness; same units as radius; no default.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @TapeLayer.setter
    def TapeLayer(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def TapeLap(self) -> float:
        """
        DSS property name: TapeLap
        DSS property index: 3

        Tape Lap in percent; default 20.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @TapeLap.setter
    def TapeLap(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def EpsR(self) -> float:
        """
        DSS property name: EpsR
        DSS property index: 4

        Insulation layer relative permittivity; default is 2.3.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @EpsR.setter
    def EpsR(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def InsLayer(self) -> float:
        """
        DSS property name: InsLayer
        DSS property index: 5

        Insulation layer thickness; same units as radius; no default. With DiaIns, establishes inner radius for capacitance calculation.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @InsLayer.setter
    def InsLayer(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def DiaIns(self) -> float:
        """
        DSS property name: DiaIns
        DSS property index: 6

        Diameter over insulation layer; same units as radius; no default. Establishes outer radius for capacitance calculation.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @DiaIns.setter
    def DiaIns(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def DiaCable(self) -> float:
        """
        DSS property name: DiaCable
        DSS property index: 7

        Diameter over cable; same units as radius; no default.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @DiaCable.setter
    def DiaCable(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def Rdc(self) -> float:
        """
        DSS property name: Rdc
        DSS property index: 8

        dc Resistance, ohms per unit length (see Runits). Defaults to Rac/1.02 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @Rdc.setter
    def Rdc(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def Rac(self) -> float:
        """
        DSS property name: Rac
        DSS property index: 9

        Resistance at 60 Hz per unit length. Defaults to 1.02*Rdc if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @Rac.setter
    def Rac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def Runits(self) -> DimensionUnits:
        """
        DSS property name: Runits
        DSS property index: 10

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 10))

    @Runits.setter
    def Runits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(10, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 10, value)

    @property
    def Runits_str(self) -> str:
        """
        DSS property name: Runits
        DSS property index: 10

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(10)

    @Runits_str.setter
    def Runits_str(self, value: AnyStr):
        self.Runits = value

    @property
    def GMRac(self) -> float:
        """
        DSS property name: GMRac
        DSS property index: 11

        GMR at 60 Hz. Defaults to .7788*radius if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @GMRac.setter
    def GMRac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def GMRunits(self) -> DimensionUnits:
        """
        DSS property name: GMRunits
        DSS property index: 12

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 12))

    @GMRunits.setter
    def GMRunits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(12, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    @property
    def GMRunits_str(self) -> str:
        """
        DSS property name: GMRunits
        DSS property index: 12

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(12)

    @GMRunits_str.setter
    def GMRunits_str(self, value: AnyStr):
        self.GMRunits = value

    @property
    def radius(self) -> float:
        """
        DSS property name: radius
        DSS property index: 13

        Outside radius of conductor. Defaults to GMR/0.7788 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @radius.setter
    def radius(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def radunits(self) -> DimensionUnits:
        """
        DSS property name: radunits
        DSS property index: 14

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 14))

    @radunits.setter
    def radunits(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(14, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 14, value)

    @property
    def radunits_str(self) -> str:
        """
        DSS property name: radunits
        DSS property index: 14

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(14)

    @radunits_str.setter
    def radunits_str(self, value: AnyStr):
        self.radunits = value

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 15

        Normal ampacity, amperes. Defaults to Emergency amps/1.5 if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 16

        Emergency ampacity, amperes. Defaults to 1.5 * Normal Amps if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def diam(self) -> float:
        """
        DSS property name: diam
        DSS property index: 17

        Diameter; Alternative method for entering radius.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @diam.setter
    def diam(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 18

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 18)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 19

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 19)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(19, value)

    @property
    def Capradius(self) -> float:
        """
        DSS property name: Capradius
        DSS property index: 20

        Equivalent conductor radius for capacitance calcs. Specify this for bundled conductors. Defaults to same value as radius. Define Diam or Radius property first.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @Capradius.setter
    def Capradius(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 21

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(21, value)

class LineSpacing(DSSObj):
    _cls_name = 'LineSpacing'
    _cls_idx = 12
    _cls_prop_idx = {
        'nconds': 1,
        'nphases': 2,
        'x': 3,
        'h': 4,
        'units': 5,
        'like': 6,
    }

    @property
    def nconds(self) -> int:
        """
        DSS property name: nconds
        DSS property index: 1

        Number of wires in this geometry. Default is 3. Triggers memory allocations. Define first!
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @nconds.setter
    def nconds(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def nphases(self) -> int:
        """
        DSS property name: nphases
        DSS property index: 2

        Number of retained phase conductors. If less than the number of wires, list the retained phase coordinates first.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @nphases.setter
    def nphases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def x(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: x
        DSS property index: 3

        Array of wire X coordinates.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 3)

    @x.setter
    def x(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def h(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: h
        DSS property index: 4

        Array of wire Heights.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 4)

    @h.setter
    def h(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def units(self) -> DimensionUnits:
        """
        DSS property name: units
        DSS property index: 5

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 5))

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(5, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 5

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return self._get_prop_string(5)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 6

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(6, value)

class LineGeometry(DSSObj):
    _cls_name = 'LineGeometry'
    _cls_idx = 13
    _cls_prop_idx = {
        'nconds': 1,
        'nphases': 2,
        'cond': 3,
        'wire': 4,
        'x': 5,
        'h': 6,
        'units': 7,
        'normamps': 8,
        'emergamps': 9,
        'reduce': 10,
        'spacing': 11,
        'wires': 12,
        'cncable': 13,
        'tscable': 14,
        'cncables': 15,
        'tscables': 16,
        'seasons': 17,
        'ratings': 18,
        'linetype': 19,
        'like': 20,
    }

    @property
    def nconds(self) -> int:
        """
        DSS property name: nconds
        DSS property index: 1

        Number of conductors in this geometry. Default is 3. Triggers memory allocations. Define first!
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @nconds.setter
    def nconds(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def nphases(self) -> int:
        """
        DSS property name: nphases
        DSS property index: 2

        Number of phases. Default =3; All other conductors are considered neutrals and might be reduced out.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @nphases.setter
    def nphases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def cond(self) -> int:
        """
        DSS property name: cond
        DSS property index: 3

        Set this = number of the conductor you wish to define. Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @cond.setter
    def cond(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def wire(self) -> List[str]:
        """
        DSS property name: wire
        DSS property index: 4

        Code from WireData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Overhead Line parameter calculation,
        Unless Tape Shield cable previously assigned to phases, and this wire is a neutral.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 4)

    @wire.setter
    def wire(self, value: List[Union[AnyStr, WireData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(4, value)
            return

        self._set_obj_array(4, value)

    @property
    def wire_obj(self) -> List[WireData]:
        """
        DSS property name: wire
        DSS property index: 4

        Code from WireData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Overhead Line parameter calculation,
        Unless Tape Shield cable previously assigned to phases, and this wire is a neutral.
        """
        return self._get_obj_array(4, WireData)

    @wire_obj.setter
    def wire_obj(self, value: List[WireData]):
        self._set_obj_array(4, value)

    @property
    def x(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: x
        DSS property index: 5

        x coordinate.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 5)

    @x.setter
    def x(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(5, value)

    @property
    def h(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: h
        DSS property index: 6

        Height of conductor.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 6)

    @h.setter
    def h(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def units(self) -> DimensionUnits:
        """
        DSS property name: units
        DSS property index: 7

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 7))

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(7, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 7, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 7

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return self._get_prop_string(7)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 8

        Normal ampacity, amperes for the line. Defaults to first conductor if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 9

        Emergency ampacity, amperes. Defaults to first conductor if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def reduce(self) -> bool:
        """
        DSS property name: reduce
        DSS property index: 10

        {Yes | No} Default = no. Reduce to Nphases (Kron Reduction). Reduce out neutrals.
        """
        return self._lib.Obj_GetInt32(self._ptr, 10) != 0

    @reduce.setter
    def reduce(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 10, value)

    @property
    def spacing(self) -> str:
        """
        DSS property name: spacing
        DSS property index: 11

        Reference to a LineSpacing for use in a line constants calculation.
        Alternative to x, h, and units. MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry.
        Must be used in conjunction with the Wires property.
        """
        return self._get_prop_string(11)

    @spacing.setter
    def spacing(self, value: Union[AnyStr, LineSpacing]):
        if isinstance(value, DSSObj):
            self._set_obj(11, value)
            return

        self._set_string(11, value)

    @property
    def spacing_obj(self) -> LineSpacing:
        """
        DSS property name: spacing
        DSS property index: 11

        Reference to a LineSpacing for use in a line constants calculation.
        Alternative to x, h, and units. MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry.
        Must be used in conjunction with the Wires property.
        """
        return self._get_obj(11, LineSpacing)

    @spacing_obj.setter
    def spacing_obj(self, value: LineSpacing):
        self._set_obj(11, value)

    @property
    def wires(self) -> List[str]:
        """
        DSS property name: wires
        DSS property index: 12

        Array of WireData names for use in a line constants calculation.
        Alternative to individual wire inputs. ALL MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry,
        unless TSData or CNData were previously assigned to phases, and these wires are neutrals.
        Must be used in conjunction with the Spacing property.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 12)

    @wires.setter
    def wires(self, value: List[Union[AnyStr, WireData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(12, value)
            return

        self._set_obj_array(12, value)

    @property
    def wires_obj(self) -> List[WireData]:
        """
        DSS property name: wires
        DSS property index: 12

        Array of WireData names for use in a line constants calculation.
        Alternative to individual wire inputs. ALL MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry,
        unless TSData or CNData were previously assigned to phases, and these wires are neutrals.
        Must be used in conjunction with the Spacing property.
        """
        return self._get_obj_array(12, WireData)

    @wires_obj.setter
    def wires_obj(self, value: List[WireData]):
        self._set_obj_array(12, value)

    @property
    def cncable(self) -> List[str]:
        """
        DSS property name: cncable
        DSS property index: 13

        Code from CNData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Concentric Neutral cable parameter calculation.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 13)

    @cncable.setter
    def cncable(self, value: List[Union[AnyStr, CNData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(13, value)
            return

        self._set_obj_array(13, value)

    @property
    def cncable_obj(self) -> List[CNData]:
        """
        DSS property name: cncable
        DSS property index: 13

        Code from CNData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Concentric Neutral cable parameter calculation.
        """
        return self._get_obj_array(13, CNData)

    @cncable_obj.setter
    def cncable_obj(self, value: List[CNData]):
        self._set_obj_array(13, value)

    @property
    def tscable(self) -> List[str]:
        """
        DSS property name: tscable
        DSS property index: 14

        Code from TSData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Tape Shield cable parameter calculation.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 14)

    @tscable.setter
    def tscable(self, value: List[Union[AnyStr, TSData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(14, value)
            return

        self._set_obj_array(14, value)

    @property
    def tscable_obj(self) -> List[TSData]:
        """
        DSS property name: tscable
        DSS property index: 14

        Code from TSData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Tape Shield cable parameter calculation.
        """
        return self._get_obj_array(14, TSData)

    @tscable_obj.setter
    def tscable_obj(self, value: List[TSData]):
        self._set_obj_array(14, value)

    @property
    def cncables(self) -> List[str]:
        """
        DSS property name: cncables
        DSS property index: 15

        Array of CNData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 15)

    @cncables.setter
    def cncables(self, value: List[Union[AnyStr, CNData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(15, value)
            return

        self._set_obj_array(15, value)

    @property
    def cncables_obj(self) -> List[CNData]:
        """
        DSS property name: cncables
        DSS property index: 15

        Array of CNData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_obj_array(15, CNData)

    @cncables_obj.setter
    def cncables_obj(self, value: List[CNData]):
        self._set_obj_array(15, value)

    @property
    def tscables(self) -> List[str]:
        """
        DSS property name: tscables
        DSS property index: 16

        Array of TSData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 16)

    @tscables.setter
    def tscables(self, value: List[Union[AnyStr, TSData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(16, value)
            return

        self._set_obj_array(16, value)

    @property
    def tscables_obj(self) -> List[TSData]:
        """
        DSS property name: tscables
        DSS property index: 16

        Array of TSData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_obj_array(16, TSData)

    @tscables_obj.setter
    def tscables_obj(self, value: List[TSData]):
        self._set_obj_array(16, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 17

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property. Defaults to first conductor if not specified.
        """
        return self._lib.Obj_GetInt32(self._ptr, 17)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 17, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 18

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.Defaults to first conductor if not specified.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 18)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(18, value)

    @property
    def linetype(self) -> LineType:
        """
        DSS property name: LineType
        DSS property index: 19

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return LineType(self._lib.Obj_GetInt32(self._ptr, 19))

    @linetype.setter
    def linetype(self, value: Union[AnyStr, int, LineType]):
        if not isinstance(value, int):
            self._set_string(19, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 19, value)

    @property
    def linetype_str(self) -> str:
        """
        DSS property name: LineType
        DSS property index: 19

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return self._get_prop_string(19)

    @linetype_str.setter
    def linetype_str(self, value: AnyStr):
        self.linetype = value

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 20

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(20, value)

class XfmrCode(DSSObj):
    _cls_name = 'XfmrCode'
    _cls_idx = 14
    _cls_prop_idx = {
        'phases': 1,
        'windings': 2,
        'wdg': 3,
        'conn': 4,
        'kv': 5,
        'kva': 6,
        'tap': 7,
        'pctr': 8,
        '%r': 8,
        'rneut': 9,
        'xneut': 10,
        'conns': 11,
        'kvs': 12,
        'kvas': 13,
        'taps': 14,
        'xhl': 15,
        'xht': 16,
        'xlt': 17,
        'xscarray': 18,
        'thermal': 19,
        'n': 20,
        'm': 21,
        'flrise': 22,
        'hsrise': 23,
        'pctloadloss': 24,
        '%loadloss': 24,
        'pctnoloadloss': 25,
        '%noloadloss': 25,
        'normhkva': 26,
        'emerghkva': 27,
        'maxtap': 28,
        'mintap': 29,
        'numtaps': 30,
        'pctimag': 31,
        '%imag': 31,
        'ppm_antifloat': 32,
        'pctrs': 33,
        '%rs': 33,
        'x12': 34,
        'x13': 35,
        'x23': 36,
        'rdcohms': 37,
        'seasons': 38,
        'ratings': 39,
        'like': 40,
    }

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of phases this transformer. Default is 3.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def windings(self) -> int:
        """
        DSS property name: windings
        DSS property index: 2

        Number of windings, this transformers. (Also is the number of terminals) Default is 2. This property triggers memory allocation for the Transformer and will cause other properties to revert to default values.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @windings.setter
    def windings(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def wdg(self) -> int:
        """
        DSS property name: wdg
        DSS property index: 3

        Set this = to the number of the winding you wish to define.  Then set the values for this winding.  Repeat for each winding.  Alternatively, use the array collections (buses, kvas, etc.) to define the windings.  Note: reactances are BETWEEN pairs of windings; they are not the property of a single winding.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @wdg.setter
    def wdg(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def conn(self) -> List[Connection]:
        """
        DSS property name: conn
        DSS property index: 4

        Connection of this winding. Default is "wye" with the neutral solidly grounded.
        """
        return [Connection(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 4)]

    @conn.setter
    def conn(self, value: Union[List[Union[int,Connection]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(4, value)
            return    
        self._set_int32_array(4, value)

    @property
    def conn_str(self) -> List[str]:
        """
        DSS property name: conn
        DSS property index: 4

        Connection of this winding. Default is "wye" with the neutral solidly grounded.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 4)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kV(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kV
        DSS property index: 5

        For 2-or 3-phase, enter phase-phase kV rating.  Otherwise, kV rating of the actual winding
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 5)

    @kV.setter
    def kV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(5, value)

    @property
    def kVA(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVA
        DSS property index: 6

        Base kVA rating of the winding. Side effect: forces change of max normal and emerg kva ratings.If 2-winding transformer, forces other winding to same value. When winding 1 is defined, all other windings are defaulted to the same rating and the first two winding resistances are defaulted to the %loadloss value.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 6)

    @kVA.setter
    def kVA(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def tap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: tap
        DSS property index: 7

        Per unit tap that this winding is normally on.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @tap.setter
    def tap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def pctR(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: %R
        DSS property index: 8

        Percent resistance this winding.  (half of total for a 2-winding).
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 8)

    @pctR.setter
    def pctR(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def Rneut(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Rneut
        DSS property index: 9

        Default = -1. Neutral resistance of wye (star)-connected winding in actual ohms.If entered as a negative value, the neutral is assumed to be open, or floating.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 9)

    @Rneut.setter
    def Rneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def Xneut(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Xneut
        DSS property index: 10

        Neutral reactance of wye(star)-connected winding in actual ohms.  May be + or -.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 10)

    @Xneut.setter
    def Xneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def conns(self) -> List[Connection]:
        """
        DSS property name: conns
        DSS property index: 11

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return [Connection(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 11)]

    @conns.setter
    def conns(self, value: Union[List[Union[int,Connection]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(11, value)
            return    
        self._set_int32_array(11, value)

    @property
    def conns_str(self) -> List[str]:
        """
        DSS property name: conns
        DSS property index: 11

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 11)

    @conns_str.setter
    def conns_str(self, value: AnyStr):
        self.conns = value

    @property
    def kVs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVs
        DSS property index: 12

        Use this to specify the kV ratings of all windings at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" 
        ~ conns=(delta, wye)
        ~ kvs=(115, 12.47)

        See kV= property for voltage rules.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 12)

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(12, value)

    @property
    def kVAs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVAs
        DSS property index: 13

        Use this to specify the kVA ratings of all windings at once using an array.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 13)

    @kVAs.setter
    def kVAs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(13, value)

    @property
    def taps(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: taps
        DSS property index: 14

        Use this to specify the normal p.u. tap of all windings at once using an array.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 14)

    @taps.setter
    def taps(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def Xhl(self) -> float:
        """
        DSS property name: Xhl
        DSS property index: 15

        Use this to specify the percent reactance, H-L (winding 1 to winding 2).  Use for 2- or 3-winding transformers. On the kva base of winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @Xhl.setter
    def Xhl(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def Xht(self) -> float:
        """
        DSS property name: Xht
        DSS property index: 16

        Use this to specify the percent reactance, H-T (winding 1 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @Xht.setter
    def Xht(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def Xlt(self) -> float:
        """
        DSS property name: Xlt
        DSS property index: 17

        Use this to specify the percent reactance, L-T (winding 2 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @Xlt.setter
    def Xlt(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def Xscarray(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Xscarray
        DSS property index: 18

        Use this to specify the percent reactance between all pairs of windings as an array. All values are on the kVA base of winding 1.  The order of the values is as follows:

        (x12 13 14... 23 24.. 34 ..)  

        There will be n(n-1)/2 values, where n=number of windings.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 18)

    @Xscarray.setter
    def Xscarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(18, value)

    @property
    def thermal(self) -> float:
        """
        DSS property name: thermal
        DSS property index: 19

        Thermal time constant of the transformer in hours.  Typically about 2.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @thermal.setter
    def thermal(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def n(self) -> float:
        """
        DSS property name: n
        DSS property index: 20

        n Exponent for thermal properties in IEEE C57.  Typically 0.8.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @n.setter
    def n(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def m(self) -> float:
        """
        DSS property name: m
        DSS property index: 21

        m Exponent for thermal properties in IEEE C57.  Typically 0.9 - 1.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @m.setter
    def m(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def flrise(self) -> float:
        """
        DSS property name: flrise
        DSS property index: 22

        Temperature rise, deg C, for full load.  Default is 65.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @flrise.setter
    def flrise(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def hsrise(self) -> float:
        """
        DSS property name: hsrise
        DSS property index: 23

        Hot spot temperature rise, deg C.  Default is 15.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @hsrise.setter
    def hsrise(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def pctloadloss(self) -> float:
        """
        DSS property name: %loadloss
        DSS property index: 24

        Percent load loss at full load. The %R of the High and Low windings (1 and 2) are adjusted to agree at rated kVA loading.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @pctloadloss.setter
    def pctloadloss(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def pctnoloadloss(self) -> float:
        """
        DSS property name: %noloadloss
        DSS property index: 25

        Percent no load losses at rated excitatation voltage. Default is 0. Converts to a resistance in parallel with the magnetizing impedance in each winding.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @pctnoloadloss.setter
    def pctnoloadloss(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def normhkVA(self) -> float:
        """
        DSS property name: normhkVA
        DSS property index: 26

        Normal maximum kVA rating of H winding (winding 1).  Usually 100% - 110% ofmaximum nameplate rating, depending on load shape. Defaults to 110% of kVA rating of Winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @normhkVA.setter
    def normhkVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def emerghkVA(self) -> float:
        """
        DSS property name: emerghkVA
        DSS property index: 27

        Emergency (contingency)  kVA rating of H winding (winding 1).  Usually 140% - 150% ofmaximum nameplate rating, depending on load shape. Defaults to 150% of kVA rating of Winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @emerghkVA.setter
    def emerghkVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def MaxTap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: MaxTap
        DSS property index: 28

        Max per unit tap for the active winding.  Default is 1.10
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 28)

    @MaxTap.setter
    def MaxTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(28, value)

    @property
    def MinTap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: MinTap
        DSS property index: 29

        Min per unit tap for the active winding.  Default is 0.90
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 29)

    @MinTap.setter
    def MinTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(29, value)

    @property
    def NumTaps(self) -> npt.NDArray[np.int32]:
        """
        DSS property name: NumTaps
        DSS property index: 30

        Total number of taps between min and max tap.  Default is 32.
        """
        return self._get_int32_array(self._lib.Obj_GetInt32Array, self._ptr, 30)

    @NumTaps.setter
    def NumTaps(self, value: npt.NDArray[np.int32]):
        self._set_int32_array(30, value)

    @property
    def pctimag(self) -> float:
        """
        DSS property name: %imag
        DSS property index: 31

        Percent magnetizing current. Default=0.0. Magnetizing branch is in parallel with windings in each phase. Also, see "ppm_antifloat".
        """
        return self._lib.Obj_GetFloat64(self._ptr, 31)

    @pctimag.setter
    def pctimag(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 31, value)

    @property
    def ppm_antifloat(self) -> float:
        """
        DSS property name: ppm_antifloat
        DSS property index: 32

        Default=1 ppm.  Parts per million of transformer winding VA rating connected to ground to protect against accidentally floating a winding without a reference. If positive then the effect is adding a very large reactance to ground.  If negative, then a capacitor.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 32)

    @ppm_antifloat.setter
    def ppm_antifloat(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 32, value)

    @property
    def pctRs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: %Rs
        DSS property index: 33

        Use this property to specify all the winding %resistances using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ %Rs=(0.2  0.3)
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 33)

    @pctRs.setter
    def pctRs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(33, value)

    @property
    def X12(self) -> float:
        """
        DSS property name: X12
        DSS property index: 34

        Alternative to XHL for specifying the percent reactance from winding 1 to winding 2.  Use for 2- or 3-winding transformers. Percent on the kVA base of winding 1. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @X12.setter
    def X12(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def X13(self) -> float:
        """
        DSS property name: X13
        DSS property index: 35

        Alternative to XHT for specifying the percent reactance from winding 1 to winding 3.  Use for 3-winding transformers only. Percent on the kVA base of winding 1. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 35)

    @X13.setter
    def X13(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 35, value)

    @property
    def X23(self) -> float:
        """
        DSS property name: X23
        DSS property index: 36

        Alternative to XLT for specifying the percent reactance from winding 2 to winding 3.Use for 3-winding transformers only. Percent on the kVA base of winding 1.  
        """
        return self._lib.Obj_GetFloat64(self._ptr, 36)

    @X23.setter
    def X23(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 36, value)

    @property
    def RdcOhms(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: RdcOhms
        DSS property index: 37

        Winding dc resistance in OHMS. Useful for GIC analysis. From transformer test report. Defaults to 85% of %R property
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 37)

    @RdcOhms.setter
    def RdcOhms(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 38

        Defines the number of ratings to be defined for the transfomer, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 38)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 38, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 39

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in transformers.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 39)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(39, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 40

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(40, value)

class Line(DSSObj):
    _cls_name = 'Line'
    _cls_idx = 15
    _cls_prop_idx = {
        'bus1': 1,
        'bus2': 2,
        'linecode': 3,
        'length': 4,
        'phases': 5,
        'r1': 6,
        'x1': 7,
        'r0': 8,
        'x0': 9,
        'c1': 10,
        'c0': 11,
        'rmatrix': 12,
        'xmatrix': 13,
        'cmatrix': 14,
        'switch': 15,
        'rg': 16,
        'xg': 17,
        'rho': 18,
        'geometry': 19,
        'units': 20,
        'spacing': 21,
        'wires': 22,
        'earthmodel': 23,
        'cncables': 24,
        'tscables': 25,
        'b1': 26,
        'b0': 27,
        'seasons': 28,
        'ratings': 29,
        'linetype': 30,
        'normamps': 31,
        'emergamps': 32,
        'faultrate': 33,
        'pctperm': 34,
        'repair': 35,
        'basefreq': 36,
        'enabled': 37,
        'like': 38,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which first terminal is connected.
        Example:
        bus1=busname   (assumes all terminals connected in normal phase order)
        bus1=busname.3.1.2.0 (specify terminal to node connections explicitly)
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def bus2(self) -> str:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of bus to which 2nd terminal is connected.
        """
        return self._get_prop_string(2)

    @bus2.setter
    def bus2(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def linecode(self) -> str:
        """
        DSS property name: linecode
        DSS property index: 3

        Name of linecode object describing line impedances.
        If you use a line code, you do not need to specify the impedances here. The line code must have been PREVIOUSLY defined. The values specified last will prevail over those specified earlier (left-to-right sequence of properties).  You can subsequently change the number of phases if symmetrical component quantities are specified.If no line code or impedance data are specified, the line object defaults to 336 MCM ACSR on 4 ft spacing.
        """
        return self._get_prop_string(3)

    @linecode.setter
    def linecode(self, value: Union[AnyStr, LineCode]):
        if isinstance(value, DSSObj):
            self._set_obj(3, value)
            return

        self._set_string(3, value)

    @property
    def linecode_obj(self) -> LineCode:
        """
        DSS property name: linecode
        DSS property index: 3

        Name of linecode object describing line impedances.
        If you use a line code, you do not need to specify the impedances here. The line code must have been PREVIOUSLY defined. The values specified last will prevail over those specified earlier (left-to-right sequence of properties).  You can subsequently change the number of phases if symmetrical component quantities are specified.If no line code or impedance data are specified, the line object defaults to 336 MCM ACSR on 4 ft spacing.
        """
        return self._get_obj(3, LineCode)

    @linecode_obj.setter
    def linecode_obj(self, value: LineCode):
        self._set_obj(3, value)

    @property
    def length(self) -> float:
        """
        DSS property name: length
        DSS property index: 4

        Length of line. Default is 1.0. If units do not match the impedance data, specify "units" property. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @length.setter
    def length(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 5

        Number of phases, this line.
        """
        return self._lib.Obj_GetInt32(self._ptr, 5)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def r1(self) -> float:
        """
        DSS property name: r1
        DSS property index: 6

        Positive-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Rmatrix.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @r1.setter
    def r1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def x1(self) -> float:
        """
        DSS property name: x1
        DSS property index: 7

        Positive-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.  See also Xmatrix
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @x1.setter
    def x1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def r0(self) -> float:
        """
        DSS property name: r0
        DSS property index: 8

        Zero-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @r0.setter
    def r0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def x0(self) -> float:
        """
        DSS property name: x0
        DSS property index: 9

        Zero-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @x0.setter
    def x0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def C1(self) -> float:
        """
        DSS property name: C1
        DSS property index: 10

        Positive-sequence capacitance, nf per unit length.  Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Cmatrix and B1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @C1.setter
    def C1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def C0(self) -> float:
        """
        DSS property name: C0
        DSS property index: 11

        Zero-sequence capacitance, nf per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.See also B0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @C0.setter
    def C0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def rmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: rmatrix
        DSS property index: 12

        Resistance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration. Using any of Rmatrix, Xmatrix, Cmatrix forces program to use the matrix values for line impedance definition. For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 12)

    @rmatrix.setter
    def rmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(12, value)

    @property
    def xmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: xmatrix
        DSS property index: 13

        Reactance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration. Using any of Rmatrix, Xmatrix, Cmatrix forces program to use the matrix values for line impedance definition.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 13)

    @xmatrix.setter
    def xmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(13, value)

    @property
    def cmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: cmatrix
        DSS property index: 14

        Nodal Capacitance matrix, lower triangle, nf per unit length.Order of the matrix is the number of phases. May be used to specify the shunt capacitance of any line configuration. Using any of Rmatrix, Xmatrix, Cmatrix forces program to use the matrix values for line impedance definition.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 14)

    @cmatrix.setter
    def cmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def Switch(self) -> bool:
        """
        DSS property name: Switch
        DSS property index: 15

        {y/n | T/F}  Default= no/false.  Designates this line as a switch for graphics and algorithmic purposes. 
        SIDE EFFECT: Sets r1 = 1.0; x1 = 1.0; r0 = 1.0; x0 = 1.0; c1 = 1.1 ; c0 = 1.0;  length = 0.001; You must reset if you want something different.
        """
        return self._lib.Obj_GetInt32(self._ptr, 15) != 0

    @Switch.setter
    def Switch(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def Rg(self) -> float:
        """
        DSS property name: Rg
        DSS property index: 16

        Carson earth return resistance per unit length used to compute impedance values at base frequency. Default is 0.01805 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @Rg.setter
    def Rg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def Xg(self) -> float:
        """
        DSS property name: Xg
        DSS property index: 17

        Carson earth return reactance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments. Default is 0.155081 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @Xg.setter
    def Xg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def rho(self) -> float:
        """
        DSS property name: rho
        DSS property index: 18

        Default=100 meter ohms.  Earth resitivity used to compute earth correction factor. Overrides Line geometry definition if specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @rho.setter
    def rho(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def geometry(self) -> str:
        """
        DSS property name: geometry
        DSS property index: 19

        Geometry code for LineGeometry Object. Supercedes any previous definition of line impedance. Line constants are computed for each frequency change or rho change. CAUTION: may alter number of phases. You cannot subsequently change the number of phases unless you change how the line impedance is defined.
        """
        return self._get_prop_string(19)

    @geometry.setter
    def geometry(self, value: Union[AnyStr, LineGeometry]):
        if isinstance(value, DSSObj):
            self._set_obj(19, value)
            return

        self._set_string(19, value)

    @property
    def geometry_obj(self) -> LineGeometry:
        """
        DSS property name: geometry
        DSS property index: 19

        Geometry code for LineGeometry Object. Supercedes any previous definition of line impedance. Line constants are computed for each frequency change or rho change. CAUTION: may alter number of phases. You cannot subsequently change the number of phases unless you change how the line impedance is defined.
        """
        return self._get_obj(19, LineGeometry)

    @geometry_obj.setter
    def geometry_obj(self, value: LineGeometry):
        self._set_obj(19, value)

    @property
    def units(self) -> DimensionUnits:
        """
        DSS property name: units
        DSS property index: 20

        Length Units = {none | mi|kft|km|m|Ft|in|cm } Default is None - assumes length units match impedance units.
        """
        return DimensionUnits(self._lib.Obj_GetInt32(self._ptr, 20))

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits]):
        if not isinstance(value, int):
            self._set_string(20, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 20, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 20

        Length Units = {none | mi|kft|km|m|Ft|in|cm } Default is None - assumes length units match impedance units.
        """
        return self._get_prop_string(20)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    @property
    def spacing(self) -> str:
        """
        DSS property name: spacing
        DSS property index: 21

        Reference to a LineSpacing for use in a line constants calculation.
        Must be used in conjunction with the Wires property.
        Specify this before the wires property.
        """
        return self._get_prop_string(21)

    @spacing.setter
    def spacing(self, value: Union[AnyStr, LineSpacing]):
        if isinstance(value, DSSObj):
            self._set_obj(21, value)
            return

        self._set_string(21, value)

    @property
    def spacing_obj(self) -> LineSpacing:
        """
        DSS property name: spacing
        DSS property index: 21

        Reference to a LineSpacing for use in a line constants calculation.
        Must be used in conjunction with the Wires property.
        Specify this before the wires property.
        """
        return self._get_obj(21, LineSpacing)

    @spacing_obj.setter
    def spacing_obj(self, value: LineSpacing):
        self._set_obj(21, value)

    @property
    def wires(self) -> List[str]:
        """
        DSS property name: wires
        DSS property index: 22

        Array of WireData names for use in an overhead line constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, and "ncond" wires.
        May also be used to specify bare neutrals with cables, using "ncond-nphase" wires.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 22)

    @wires.setter
    def wires(self, value: List[Union[AnyStr, WireData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(22, value)
            return

        self._set_obj_array(22, value)

    @property
    def wires_obj(self) -> List[WireData]:
        """
        DSS property name: wires
        DSS property index: 22

        Array of WireData names for use in an overhead line constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, and "ncond" wires.
        May also be used to specify bare neutrals with cables, using "ncond-nphase" wires.
        """
        return self._get_obj_array(22, WireData)

    @wires_obj.setter
    def wires_obj(self, value: List[WireData]):
        self._set_obj_array(22, value)

    @property
    def earthmodel(self) -> EarthModel:
        """
        DSS property name: EarthModel
        DSS property index: 23

        One of {Carson | FullCarson | Deri}. Default is the global value established with the Set EarthModel command. See the Options Help on EarthModel option. This is used to override the global value for this line. This option applies only when the "geometry" property is used.
        """
        return EarthModel(self._lib.Obj_GetInt32(self._ptr, 23))

    @earthmodel.setter
    def earthmodel(self, value: Union[AnyStr, int, EarthModel]):
        if not isinstance(value, int):
            self._set_string(23, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 23, value)

    @property
    def earthmodel_str(self) -> str:
        """
        DSS property name: EarthModel
        DSS property index: 23

        One of {Carson | FullCarson | Deri}. Default is the global value established with the Set EarthModel command. See the Options Help on EarthModel option. This is used to override the global value for this line. This option applies only when the "geometry" property is used.
        """
        return self._get_prop_string(23)

    @earthmodel_str.setter
    def earthmodel_str(self, value: AnyStr):
        self.earthmodel = value

    @property
    def cncables(self) -> List[str]:
        """
        DSS property name: cncables
        DSS property index: 24

        Array of CNData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" cncables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 24)

    @cncables.setter
    def cncables(self, value: List[Union[AnyStr, CNData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(24, value)
            return

        self._set_obj_array(24, value)

    @property
    def cncables_obj(self) -> List[CNData]:
        """
        DSS property name: cncables
        DSS property index: 24

        Array of CNData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" cncables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_obj_array(24, CNData)

    @cncables_obj.setter
    def cncables_obj(self, value: List[CNData]):
        self._set_obj_array(24, value)

    @property
    def tscables(self) -> List[str]:
        """
        DSS property name: tscables
        DSS property index: 25

        Array of TSData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" tscables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 25)

    @tscables.setter
    def tscables(self, value: List[Union[AnyStr, TSData]]):
        if value is None or len(value) == 0 or not isinstance(value[0], DSSObj):
            self._set_string_array(25, value)
            return

        self._set_obj_array(25, value)

    @property
    def tscables_obj(self) -> List[TSData]:
        """
        DSS property name: tscables
        DSS property index: 25

        Array of TSData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" tscables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_obj_array(25, TSData)

    @tscables_obj.setter
    def tscables_obj(self, value: List[TSData]):
        self._set_obj_array(25, value)

    @property
    def B1(self) -> float:
        """
        DSS property name: B1
        DSS property index: 26

        Alternate way to specify C1. MicroS per unit length
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @B1.setter
    def B1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def B0(self) -> float:
        """
        DSS property name: B0
        DSS property index: 27

        Alternate way to specify C0. MicroS per unit length
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @B0.setter
    def B0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 28

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 28)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 28, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 29

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 29)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(29, value)

    @property
    def linetype(self) -> LineType:
        """
        DSS property name: LineType
        DSS property index: 30

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return LineType(self._lib.Obj_GetInt32(self._ptr, 30))

    @linetype.setter
    def linetype(self, value: Union[AnyStr, int, LineType]):
        if not isinstance(value, int):
            self._set_string(30, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 30, value)

    @property
    def linetype_str(self) -> str:
        """
        DSS property name: LineType
        DSS property index: 30

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return self._get_prop_string(30)

    @linetype_str.setter
    def linetype_str(self, value: AnyStr):
        self.linetype = value

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 31

        Normal rated current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 31)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 31, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 32

        Maximum or emerg current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 32)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 32, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 33

        Failure rate PER UNIT LENGTH per year. Length must be same units as LENGTH property. Default is 0.1 fault per unit length per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 33)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 33, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 34

        Percent of failures that become permanent. Default is 20.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 35

        Hours to repair. Default is 3 hr.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 35)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 35, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 36

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 36)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 36, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 37

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 37) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 37, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 38

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(38, value)

class Vsource(DSSObj):
    _cls_name = 'Vsource'
    _cls_idx = 16
    _cls_prop_idx = {
        'bus1': 1,
        'basekv': 2,
        'pu': 3,
        'angle': 4,
        'frequency': 5,
        'phases': 6,
        'mvasc3': 7,
        'mvasc1': 8,
        'x1r1': 9,
        'x0r0': 10,
        'isc3': 11,
        'isc1': 12,
        'r1': 13,
        'x1': 14,
        'r0': 15,
        'x0': 16,
        'scantype': 17,
        'sequence': 18,
        'bus2': 19,
        'z1': 20,
        'z0': 21,
        'z2': 22,
        'puz1': 23,
        'puz0': 24,
        'puz2': 25,
        'basemva': 26,
        'yearly': 27,
        'daily': 28,
        'duty': 29,
        'model': 30,
        'puzideal': 31,
        'spectrum': 32,
        'basefreq': 33,
        'enabled': 34,
        'like': 35,
    }

    # Class-specific enumerations
    class VSourceModel(IntEnum):
        """VSource: Model (DSS enumeration for Vsource)"""
        Thevenin = 0 # Thevenin
        Ideal = 1 # Ideal


    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which the main terminal (1) is connected.
        bus1=busname
        bus1=busname.1.2.3

        The VSOURCE object is a two-terminal voltage source (thevenin equivalent). Bus2 defaults to Bus1 with all phases connected to ground (node 0) unless previously specified. This is a Yg connection. If you want something different, define the Bus2 property ezplicitly.
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def basekv(self) -> float:
        """
        DSS property name: basekv
        DSS property index: 2

        Base Source kV, usually phase-phase (L-L) unless you are making a positive-sequence model or 1-phase modelin which case, it will be phase-neutral (L-N) kV.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @basekv.setter
    def basekv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def pu(self) -> float:
        """
        DSS property name: pu
        DSS property index: 3

        Per unit of the base voltage that the source is actually operating at.
        "pu=1.05"
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @pu.setter
    def pu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def angle(self) -> float:
        """
        DSS property name: angle
        DSS property index: 4

        Phase angle in degrees of first phase: e.g.,Angle=10.3
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @angle.setter
    def angle(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def frequency(self) -> float:
        """
        DSS property name: frequency
        DSS property index: 5

        Source frequency.  Defaults to system default base frequency.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @frequency.setter
    def frequency(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 6

        Number of phases.  Defaults to 3.
        """
        return self._lib.Obj_GetInt32(self._ptr, 6)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def MVAsc3(self) -> float:
        """
        DSS property name: MVAsc3
        DSS property index: 7

        MVA Short circuit, 3-phase fault. Default = 2000. Z1 is determined by squaring the base kv and dividing by this value. For single-phase source, this value is not used.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @MVAsc3.setter
    def MVAsc3(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def MVAsc1(self) -> float:
        """
        DSS property name: MVAsc1
        DSS property index: 8

        MVA Short Circuit, 1-phase fault. Default = 2100. The "single-phase impedance", Zs, is determined by squaring the base kV and dividing by this value. Then Z0 is determined by Z0 = 3Zs - 2Z1.  For 1-phase sources, Zs is used directly. Use X0R0 to define X/R ratio for 1-phase source.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @MVAsc1.setter
    def MVAsc1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def x1r1(self) -> float:
        """
        DSS property name: x1r1
        DSS property index: 9

        Positive-sequence  X/R ratio. Default = 4.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @x1r1.setter
    def x1r1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def x0r0(self) -> float:
        """
        DSS property name: x0r0
        DSS property index: 10

        Zero-sequence X/R ratio.Default = 3.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @x0r0.setter
    def x0r0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def Isc3(self) -> float:
        """
        DSS property name: Isc3
        DSS property index: 11

        Alternate method of defining the source impedance. 
        3-phase short circuit current, amps.  Default is 10000.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @Isc3.setter
    def Isc3(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def Isc1(self) -> float:
        """
        DSS property name: Isc1
        DSS property index: 12

        Alternate method of defining the source impedance. 
        single-phase short circuit current, amps.  Default is 10500.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @Isc1.setter
    def Isc1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def R1(self) -> float:
        """
        DSS property name: R1
        DSS property index: 13

        Alternate method of defining the source impedance. 
        Positive-sequence resistance, ohms.  Default is 1.65.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @R1.setter
    def R1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def X1(self) -> float:
        """
        DSS property name: X1
        DSS property index: 14

        Alternate method of defining the source impedance. 
        Positive-sequence reactance, ohms.  Default is 6.6.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @X1.setter
    def X1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def R0(self) -> float:
        """
        DSS property name: R0
        DSS property index: 15

        Alternate method of defining the source impedance. 
        Zero-sequence resistance, ohms.  Default is 1.9.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @R0.setter
    def R0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def X0(self) -> float:
        """
        DSS property name: X0
        DSS property index: 16

        Alternate method of defining the source impedance. 
        Zero-sequence reactance, ohms.  Default is 5.7.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @X0.setter
    def X0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def scantype(self) -> ScanType:
        """
        DSS property name: ScanType
        DSS property index: 17

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return ScanType(self._lib.Obj_GetInt32(self._ptr, 17))

    @scantype.setter
    def scantype(self, value: Union[AnyStr, int, ScanType]):
        if not isinstance(value, int):
            self._set_string(17, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 17, value)

    @property
    def scantype_str(self) -> str:
        """
        DSS property name: ScanType
        DSS property index: 17

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return self._get_prop_string(17)

    @scantype_str.setter
    def scantype_str(self, value: AnyStr):
        self.scantype = value

    @property
    def Sequence(self) -> SequenceType:
        """
        DSS property name: Sequence
        DSS property index: 18

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return SequenceType(self._lib.Obj_GetInt32(self._ptr, 18))

    @Sequence.setter
    def Sequence(self, value: Union[AnyStr, int, SequenceType]):
        if not isinstance(value, int):
            self._set_string(18, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def Sequence_str(self) -> str:
        """
        DSS property name: Sequence
        DSS property index: 18

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return self._get_prop_string(18)

    @Sequence_str.setter
    def Sequence_str(self, value: AnyStr):
        self.Sequence = value

    @property
    def bus2(self) -> str:
        """
        DSS property name: bus2
        DSS property index: 19

        Name of bus to which 2nd terminal is connected.
        bus2=busname
        bus2=busname.1.2.3

        Default is Bus1.0.0.0 (grounded wye connection)
        """
        return self._get_prop_string(19)

    @bus2.setter
    def bus2(self, value: AnyStr):
        self._set_string(19, value)

    @property
    def Z1(self) -> complex:
        """
        DSS property name: Z1
        DSS property index: 20

        Positive-sequence equivalent source impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z1=[1, 2]  ! represents 1 + j2 

        If defined, Z1, Z2, and Z0 are used to define the impedance matrix of the VSOURCE. Z1 MUST BE DEFINED TO USE THIS OPTION FOR DEFINING THE MATRIX.

        Side Effect: Sets Z2 and Z0 to same values unless they were previously defined.
        """
        return self._get_complex(20)

    @Z1.setter
    def Z1(self, value: complex):
        self._set_complex(20, value)

    @property
    def Z0(self) -> complex:
        """
        DSS property name: Z0
        DSS property index: 21

        Zero-sequence equivalent source impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z0=[3, 4]  ! represents 3 + j4 

        Used to define the impedance matrix of the VSOURCE if Z1 is also specified. 

        Note: Z0 defaults to Z1 if it is not specifically defined. 
        """
        return self._get_complex(21)

    @Z0.setter
    def Z0(self, value: complex):
        self._set_complex(21, value)

    @property
    def Z2(self) -> complex:
        """
        DSS property name: Z2
        DSS property index: 22

        Negative-sequence equivalent source impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z2=[1, 2]  ! represents 1 + j2 

        Used to define the impedance matrix of the VSOURCE if Z1 is also specified. 

        Note: Z2 defaults to Z1 if it is not specifically defined. If Z2 is not equal to Z1, the impedance matrix is asymmetrical.
        """
        return self._get_complex(22)

    @Z2.setter
    def Z2(self, value: complex):
        self._set_complex(22, value)

    @property
    def puZ1(self) -> complex:
        """
        DSS property name: puZ1
        DSS property index: 23

        2-element array: e.g., [1  2]. An alternate way to specify Z1. See Z1 property. Per-unit positive-sequence impedance on base of Vsource BasekV and BaseMVA.
        """
        return self._get_complex(23)

    @puZ1.setter
    def puZ1(self, value: complex):
        self._set_complex(23, value)

    @property
    def puZ0(self) -> complex:
        """
        DSS property name: puZ0
        DSS property index: 24

        2-element array: e.g., [1  2]. An alternate way to specify Z0. See Z0 property. Per-unit zero-sequence impedance on base of Vsource BasekV and BaseMVA.
        """
        return self._get_complex(24)

    @puZ0.setter
    def puZ0(self, value: complex):
        self._set_complex(24, value)

    @property
    def puZ2(self) -> complex:
        """
        DSS property name: puZ2
        DSS property index: 25

        2-element array: e.g., [1  2]. An alternate way to specify Z2. See Z2 property. Per-unit negative-sequence impedance on base of Vsource BasekV and BaseMVA.
        """
        return self._get_complex(25)

    @puZ2.setter
    def puZ2(self, value: complex):
        self._set_complex(25, value)

    @property
    def baseMVA(self) -> float:
        """
        DSS property name: baseMVA
        DSS property index: 26

        Default value is 100. Base used to convert values specifiied with puZ1, puZ0, and puZ2 properties to ohms on kV base specified by BasekV property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @baseMVA.setter
    def baseMVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def Yearly(self) -> str:
        """
        DSS property name: Yearly
        DSS property index: 27

        LOADSHAPE object to use for the per-unit voltage for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_prop_string(27)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(27, value)
            return

        self._set_string(27, value)

    @property
    def Yearly_obj(self) -> LoadShape:
        """
        DSS property name: Yearly
        DSS property index: 27

        LOADSHAPE object to use for the per-unit voltage for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_obj(27, LoadShape)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_obj(27, value)

    @property
    def Daily(self) -> str:
        """
        DSS property name: Daily
        DSS property index: 28

        LOADSHAPE object to use for the per-unit voltage for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_prop_string(28)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(28, value)
            return

        self._set_string(28, value)

    @property
    def Daily_obj(self) -> LoadShape:
        """
        DSS property name: Daily
        DSS property index: 28

        LOADSHAPE object to use for the per-unit voltage for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_obj(28, LoadShape)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_obj(28, value)

    @property
    def Duty(self) -> str:
        """
        DSS property name: Duty
        DSS property index: 29

        LOADSHAPE object to use for the per-unit voltage for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_prop_string(29)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(29, value)
            return

        self._set_string(29, value)

    @property
    def Duty_obj(self) -> LoadShape:
        """
        DSS property name: Duty
        DSS property index: 29

        LOADSHAPE object to use for the per-unit voltage for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_obj(29, LoadShape)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_obj(29, value)

    @property
    def Model(self) -> VSourceModel:
        """
        DSS property name: Model
        DSS property index: 30

        {Thevenin* | Ideal}  Specifies whether the Vsource is to be considered a Thevenin short circuit model or a quasi-ideal voltage source. If Thevenin, the Vsource uses the impedances defined for all calculations. If "Ideal", the model uses a small impedance on the diagonal of the impedance matrix for the fundamental base frequency power flow only. Then switches to actual Thevenin model for other frequencies. 
        """
        return VSourceModel(self._lib.Obj_GetInt32(self._ptr, 30))

    @Model.setter
    def Model(self, value: Union[AnyStr, int, VSourceModel]):
        if not isinstance(value, int):
            self._set_string(30, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 30, value)

    @property
    def Model_str(self) -> str:
        """
        DSS property name: Model
        DSS property index: 30

        {Thevenin* | Ideal}  Specifies whether the Vsource is to be considered a Thevenin short circuit model or a quasi-ideal voltage source. If Thevenin, the Vsource uses the impedances defined for all calculations. If "Ideal", the model uses a small impedance on the diagonal of the impedance matrix for the fundamental base frequency power flow only. Then switches to actual Thevenin model for other frequencies. 
        """
        return self._get_prop_string(30)

    @Model_str.setter
    def Model_str(self, value: AnyStr):
        self.Model = value

    @property
    def puZideal(self) -> complex:
        """
        DSS property name: puZideal
        DSS property index: 31

        2-element array: e.g., [1  2]. The pu impedance to use for the quasi-ideal voltage source model. Should be a very small impedances. Default is [1e-6, 0.001]. Per-unit impedance on base of Vsource BasekV and BaseMVA. If too small, solution may not work. Be sure to check the voltage values and powers.
        """
        return self._get_complex(31)

    @puZideal.setter
    def puZideal(self, value: complex):
        self._set_complex(31, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 32

        Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_prop_string(32)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(32, value)
            return

        self._set_string(32, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 32

        Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_obj(32, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(32, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 33

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 33)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 33, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 34

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 34) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 34, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 35

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(35, value)

class Isource(DSSObj):
    _cls_name = 'Isource'
    _cls_idx = 17
    _cls_prop_idx = {
        'bus1': 1,
        'amps': 2,
        'angle': 3,
        'frequency': 4,
        'phases': 5,
        'scantype': 6,
        'sequence': 7,
        'yearly': 8,
        'daily': 9,
        'duty': 10,
        'bus2': 11,
        'spectrum': 12,
        'basefreq': 13,
        'enabled': 14,
        'like': 15,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which source is connected.
        bus1=busname
        bus1=busname.1.2.3
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def amps(self) -> float:
        """
        DSS property name: amps
        DSS property index: 2

        Magnitude of current source, each phase, in Amps.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @amps.setter
    def amps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def angle(self) -> float:
        """
        DSS property name: angle
        DSS property index: 3

        Phase angle in degrees of first phase: e.g.,Angle=10.3.
        Phase shift between phases is assumed 120 degrees when number of phases <= 3
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @angle.setter
    def angle(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def frequency(self) -> float:
        """
        DSS property name: frequency
        DSS property index: 4

        Source frequency.  Defaults to  circuit fundamental frequency.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @frequency.setter
    def frequency(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 5

        Number of phases.  Defaults to 3. For 3 or less, phase shift is 120 degrees.
        """
        return self._lib.Obj_GetInt32(self._ptr, 5)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def scantype(self) -> ScanType:
        """
        DSS property name: scantype
        DSS property index: 6

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return ScanType(self._lib.Obj_GetInt32(self._ptr, 6))

    @scantype.setter
    def scantype(self, value: Union[AnyStr, int, ScanType]):
        if not isinstance(value, int):
            self._set_string(6, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def scantype_str(self) -> str:
        """
        DSS property name: scantype
        DSS property index: 6

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return self._get_prop_string(6)

    @scantype_str.setter
    def scantype_str(self, value: AnyStr):
        self.scantype = value

    @property
    def sequence(self) -> SequenceType:
        """
        DSS property name: sequence
        DSS property index: 7

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return SequenceType(self._lib.Obj_GetInt32(self._ptr, 7))

    @sequence.setter
    def sequence(self, value: Union[AnyStr, int, SequenceType]):
        if not isinstance(value, int):
            self._set_string(7, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 7, value)

    @property
    def sequence_str(self) -> str:
        """
        DSS property name: sequence
        DSS property index: 7

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return self._get_prop_string(7)

    @sequence_str.setter
    def sequence_str(self, value: AnyStr):
        self.sequence = value

    @property
    def Yearly(self) -> str:
        """
        DSS property name: Yearly
        DSS property index: 8

        LOADSHAPE object to use for the per-unit current for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual Amp.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_prop_string(8)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(8, value)
            return

        self._set_string(8, value)

    @property
    def Yearly_obj(self) -> LoadShape:
        """
        DSS property name: Yearly
        DSS property index: 8

        LOADSHAPE object to use for the per-unit current for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual Amp.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_obj(8, LoadShape)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_obj(8, value)

    @property
    def Daily(self) -> str:
        """
        DSS property name: Daily
        DSS property index: 9

        LOADSHAPE object to use for the per-unit current for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_prop_string(9)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(9, value)
            return

        self._set_string(9, value)

    @property
    def Daily_obj(self) -> LoadShape:
        """
        DSS property name: Daily
        DSS property index: 9

        LOADSHAPE object to use for the per-unit current for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_obj(9, LoadShape)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_obj(9, value)

    @property
    def Duty(self) -> str:
        """
        DSS property name: Duty
        DSS property index: 10

        LOADSHAPE object to use for the per-unit current for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_prop_string(10)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(10, value)
            return

        self._set_string(10, value)

    @property
    def Duty_obj(self) -> LoadShape:
        """
        DSS property name: Duty
        DSS property index: 10

        LOADSHAPE object to use for the per-unit current for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_obj(10, LoadShape)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_obj(10, value)

    @property
    def Bus2(self) -> str:
        """
        DSS property name: Bus2
        DSS property index: 11

        Name of bus to which 2nd terminal is connected.
        bus2=busname
        bus2=busname.1.2.3

        Default is Bus1.0.0.0 (grounded-wye connection)
        """
        return self._get_prop_string(11)

    @Bus2.setter
    def Bus2(self, value: AnyStr):
        self._set_string(11, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 12

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_prop_string(12)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(12, value)
            return

        self._set_string(12, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 12

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_obj(12, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(12, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 13

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 14

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 14) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 14, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 15

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(15, value)

class VCCS(DSSObj):
    _cls_name = 'VCCS'
    _cls_idx = 18
    _cls_prop_idx = {
        'bus1': 1,
        'phases': 2,
        'prated': 3,
        'vrated': 4,
        'ppct': 5,
        'bp1': 6,
        'bp2': 7,
        'filter': 8,
        'fsample': 9,
        'rmsmode': 10,
        'imaxpu': 11,
        'vrmstau': 12,
        'irmstau': 13,
        'spectrum': 14,
        'basefreq': 15,
        'enabled': 16,
        'like': 17,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which source is connected.
        bus1=busname
        bus1=busname.1.2.3
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 2

        Number of phases.  Defaults to 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def prated(self) -> float:
        """
        DSS property name: prated
        DSS property index: 3

        Total rated power, in Watts.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @prated.setter
    def prated(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def vrated(self) -> float:
        """
        DSS property name: vrated
        DSS property index: 4

        Rated line-to-line voltage, in Volts
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @vrated.setter
    def vrated(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def ppct(self) -> float:
        """
        DSS property name: ppct
        DSS property index: 5

        Steady-state operating output, in percent of rated.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @ppct.setter
    def ppct(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def bp1(self) -> str:
        """
        DSS property name: bp1
        DSS property index: 6

        XYCurve defining the input piece-wise linear block.
        """
        return self._get_prop_string(6)

    @bp1.setter
    def bp1(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(6, value)
            return

        self._set_string(6, value)

    @property
    def bp1_obj(self) -> XYcurve:
        """
        DSS property name: bp1
        DSS property index: 6

        XYCurve defining the input piece-wise linear block.
        """
        return self._get_obj(6, XYcurve)

    @bp1_obj.setter
    def bp1_obj(self, value: XYcurve):
        self._set_obj(6, value)

    @property
    def bp2(self) -> str:
        """
        DSS property name: bp2
        DSS property index: 7

        XYCurve defining the output piece-wise linear block.
        """
        return self._get_prop_string(7)

    @bp2.setter
    def bp2(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(7, value)
            return

        self._set_string(7, value)

    @property
    def bp2_obj(self) -> XYcurve:
        """
        DSS property name: bp2
        DSS property index: 7

        XYCurve defining the output piece-wise linear block.
        """
        return self._get_obj(7, XYcurve)

    @bp2_obj.setter
    def bp2_obj(self, value: XYcurve):
        self._set_obj(7, value)

    @property
    def filter(self) -> str:
        """
        DSS property name: filter
        DSS property index: 8

        XYCurve defining the digital filter coefficients (x numerator, y denominator).
        """
        return self._get_prop_string(8)

    @filter.setter
    def filter(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(8, value)
            return

        self._set_string(8, value)

    @property
    def filter_obj(self) -> XYcurve:
        """
        DSS property name: filter
        DSS property index: 8

        XYCurve defining the digital filter coefficients (x numerator, y denominator).
        """
        return self._get_obj(8, XYcurve)

    @filter_obj.setter
    def filter_obj(self, value: XYcurve):
        self._set_obj(8, value)

    @property
    def fsample(self) -> float:
        """
        DSS property name: fsample
        DSS property index: 9

        Sample frequency [Hz} for the digital filter.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @fsample.setter
    def fsample(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def rmsmode(self) -> bool:
        """
        DSS property name: rmsmode
        DSS property index: 10

        True if only Hz is used to represent a phase-locked loop (PLL), ignoring the BP1, BP2 and time-domain transformations. Default is no.
        """
        return self._lib.Obj_GetInt32(self._ptr, 10) != 0

    @rmsmode.setter
    def rmsmode(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 10, value)

    @property
    def imaxpu(self) -> float:
        """
        DSS property name: imaxpu
        DSS property index: 11

        Maximum output current in per-unit of rated; defaults to 1.1
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @imaxpu.setter
    def imaxpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def vrmstau(self) -> float:
        """
        DSS property name: vrmstau
        DSS property index: 12

        Time constant in sensing Vrms for the PLL; defaults to 0.0015
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @vrmstau.setter
    def vrmstau(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def irmstau(self) -> float:
        """
        DSS property name: irmstau
        DSS property index: 13

        Time constant in producing Irms from the PLL; defaults to 0.0015
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @irmstau.setter
    def irmstau(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 14

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_prop_string(14)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(14, value)
            return

        self._set_string(14, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 14

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_obj(14, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(14, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 15

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 16

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 16) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 17

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(17, value)

class Load(DSSObj):
    _cls_name = 'Load'
    _cls_idx = 19
    _cls_prop_idx = {
        'phases': 1,
        'bus1': 2,
        'kv': 3,
        'kw': 4,
        'pf': 5,
        'model': 6,
        'yearly': 7,
        'daily': 8,
        'duty': 9,
        'growth': 10,
        'conn': 11,
        'kvar': 12,
        'rneut': 13,
        'xneut': 14,
        'status': 15,
        'cls': 16,
        'class': 16,
        'vminpu': 17,
        'vmaxpu': 18,
        'vminnorm': 19,
        'vminemerg': 20,
        'xfkva': 21,
        'allocationfactor': 22,
        'kva': 23,
        'pctmean': 24,
        '%mean': 24,
        'pctstddev': 25,
        '%stddev': 25,
        'cvrwatts': 26,
        'cvrvars': 27,
        'kwh': 28,
        'kwhdays': 29,
        'cfactor': 30,
        'cvrcurve': 31,
        'numcust': 32,
        'zipv': 33,
        'pctseriesrl': 34,
        '%seriesrl': 34,
        'relweight': 35,
        'vlowpu': 36,
        'puxharm': 37,
        'xrharm': 38,
        'spectrum': 39,
        'basefreq': 40,
        'enabled': 41,
        'like': 42,
    }

    # Class-specific enumerations
    class LoadModel(IntEnum):
        """Load: Model (DSS enumeration for Load)"""
        ConstantPQ = 1 # Constant PQ
        ConstantZ = 2 # Constant Z
        Motor = 3 # Motor (constant P, quadratic Q)
        CVR = 4 # CVR (linear P, quadratic Q)
        ConstantI = 5 # Constant I
        ConstantP_fixedQ = 6 # Constant P, fixed Q
        ConstantP_fixedX = 7 # Constant P, fixed X
        ZIPV = 8 # ZIPV

    class LoadStatus(IntEnum):
        """Load: Status (DSS enumeration for Load)"""
        Variable = 0 # Variable
        Fixed = 1 # Fixed
        Exempt = 2 # Exempt


    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this load.  Load is evenly divided among phases.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the load is connected.  May include specific node specification.
        """
        return self._get_prop_string(2)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def kV(self) -> float:
        """
        DSS property name: kV
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for load. For 2- and 3-phase loads, specify phase-phase kV. Otherwise, specify actual kV across each branch of the load. If wye (star), specify phase-neutral kV. If delta or phase-phase connected, specify phase-phase kV.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kV.setter
    def kV(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def kW(self) -> float:
        """
        DSS property name: kW
        DSS property index: 4

        Total base kW for the load.  Normally, you would enter the maximum kW for the load for the first year and allow it to be adjusted by the load shapes, growth shapes, and global load multiplier.

        Legal ways to define base load:
        kW, PF
        kW, kvar
        kVA, PF
        XFKVA * Allocationfactor, PF
        kWh/(kWhdays*24) * Cfactor, PF
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kW.setter
    def kW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def pf(self) -> float:
        """
        DSS property name: pf
        DSS property index: 5

        Load power factor.  Enter negative for leading powerfactor (when kW and kvar have opposite signs.)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @pf.setter
    def pf(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def model(self) -> LoadModel:
        """
        DSS property name: model
        DSS property index: 6

        Integer code for the model to use for load variation with voltage. Valid values are:

        1:Standard constant P+jQ load. (Default)
        2:Constant impedance load. 
        3:Const P, Quadratic Q (like a motor).
        4:Nominal Linear P, Quadratic Q (feeder mix). Use this with CVRfactor.
        5:Constant Current Magnitude
        6:Const P, Fixed Q
        7:Const P, Fixed Impedance Q
        8:ZIPV (7 values)

        For Types 6 and 7, only the P is modified by load multipliers.
        """
        return LoadModel(self._lib.Obj_GetInt32(self._ptr, 6))

    @model.setter
    def model(self, value: Union[int, LoadModel]):
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def yearly(self) -> str:
        """
        DSS property name: yearly
        DSS property index: 7

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_prop_string(7)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(7, value)
            return

        self._set_string(7, value)

    @property
    def yearly_obj(self) -> LoadShape:
        """
        DSS property name: yearly
        DSS property index: 7

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_obj(7, LoadShape)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_obj(7, value)

    @property
    def daily(self) -> str:
        """
        DSS property name: daily
        DSS property index: 8

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_prop_string(8)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(8, value)
            return

        self._set_string(8, value)

    @property
    def daily_obj(self) -> LoadShape:
        """
        DSS property name: daily
        DSS property index: 8

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_obj(8, LoadShape)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_obj(8, value)

    @property
    def duty(self) -> str:
        """
        DSS property name: duty
        DSS property index: 9

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_prop_string(9)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(9, value)
            return

        self._set_string(9, value)

    @property
    def duty_obj(self) -> LoadShape:
        """
        DSS property name: duty
        DSS property index: 9

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_obj(9, LoadShape)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_obj(9, value)

    @property
    def growth(self) -> str:
        """
        DSS property name: growth
        DSS property index: 10

        Characteristic  to use for growth factors by years.  Must be previously defined as a Growthshape object. Defaults to circuit default growth factor (see Set Growth command).
        """
        return self._get_prop_string(10)

    @growth.setter
    def growth(self, value: Union[AnyStr, GrowthShape]):
        if isinstance(value, DSSObj):
            self._set_obj(10, value)
            return

        self._set_string(10, value)

    @property
    def growth_obj(self) -> GrowthShape:
        """
        DSS property name: growth
        DSS property index: 10

        Characteristic  to use for growth factors by years.  Must be previously defined as a Growthshape object. Defaults to circuit default growth factor (see Set Growth command).
        """
        return self._get_obj(10, GrowthShape)

    @growth_obj.setter
    def growth_obj(self, value: GrowthShape):
        self._set_obj(10, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 11

        ={wye or LN | delta or LL}.  Default is wye.
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 11))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(11, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 11, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 11

        ={wye or LN | delta or LL}.  Default is wye.
        """
        return self._get_prop_string(11)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kvar(self) -> float:
        """
        DSS property name: kvar
        DSS property index: 12

        Specify the base kvar for specifying load as kW & kvar.  Assumes kW has been already defined.  Alternative to specifying the power factor.  Side effect:  the power factor and kVA is altered to agree.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @kvar.setter
    def kvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def Rneut(self) -> float:
        """
        DSS property name: Rneut
        DSS property index: 13

        Default is -1. Neutral resistance of wye (star)-connected load in actual ohms. If entered as a negative value, the neutral can be open, or floating, or it can be connected to node 0 (ground), which is the usual default. If >=0 be sure to explicitly specify the node connection for the neutral, or last, conductor. Otherwise, the neutral impedance will be shorted to ground.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @Rneut.setter
    def Rneut(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def Xneut(self) -> float:
        """
        DSS property name: Xneut
        DSS property index: 14

        Neutral reactance of wye(star)-connected load in actual ohms.  May be + or -.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @Xneut.setter
    def Xneut(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def status(self) -> LoadStatus:
        """
        DSS property name: status
        DSS property index: 15

        ={Variable | Fixed | Exempt}.  Default is variable. If Fixed, no load multipliers apply;  however, growth multipliers do apply.  All multipliers apply to Variable loads.  Exempt loads are not modified by the global load multiplier, such as in load duration curves, etc.  Daily multipliers do apply, so setting this property to Exempt is a good way to represent industrial load that stays the same day-after-day for the period study.
        """
        return LoadStatus(self._lib.Obj_GetInt32(self._ptr, 15))

    @status.setter
    def status(self, value: Union[AnyStr, int, LoadStatus]):
        if not isinstance(value, int):
            self._set_string(15, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def status_str(self) -> str:
        """
        DSS property name: status
        DSS property index: 15

        ={Variable | Fixed | Exempt}.  Default is variable. If Fixed, no load multipliers apply;  however, growth multipliers do apply.  All multipliers apply to Variable loads.  Exempt loads are not modified by the global load multiplier, such as in load duration curves, etc.  Daily multipliers do apply, so setting this property to Exempt is a good way to represent industrial load that stays the same day-after-day for the period study.
        """
        return self._get_prop_string(15)

    @status_str.setter
    def status_str(self, value: AnyStr):
        self.status = value

    @property
    def cls(self) -> int:
        """
        DSS property name: class
        DSS property index: 16

        An arbitrary integer number representing the class of load so that load values may be segregated by load value. Default is 1; not used internally.
        """
        return self._lib.Obj_GetInt32(self._ptr, 16)

    @cls.setter
    def cls(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    @property
    def Vminpu(self) -> float:
        """
        DSS property name: Vminpu
        DSS property index: 17

        Default = 0.95.  Minimum per unit voltage for which the MODEL is assumed to apply. Lower end of normal voltage range.Below this value, the load model reverts to a constant impedance model that matches the model at the transition voltage. See also "Vlowpu" which causes the model to match Model=2 below the transition voltage.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @Vminpu.setter
    def Vminpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def Vmaxpu(self) -> float:
        """
        DSS property name: Vmaxpu
        DSS property index: 18

        Default = 1.05.  Maximum per unit voltage for which the MODEL is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @Vmaxpu.setter
    def Vmaxpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def Vminnorm(self) -> float:
        """
        DSS property name: Vminnorm
        DSS property index: 19

        Minimum per unit voltage for load EEN evaluations, Normal limit.  Default = 0, which defaults to system "vminnorm" property (see Set Command under Executive).  If this property is specified, it ALWAYS overrides the system specification. This allows you to have different criteria for different loads. Set to zero to revert to the default system value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @Vminnorm.setter
    def Vminnorm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def Vminemerg(self) -> float:
        """
        DSS property name: Vminemerg
        DSS property index: 20

        Minimum per unit voltage for load UE evaluations, Emergency limit.  Default = 0, which defaults to system "vminemerg" property (see Set Command under Executive).  If this property is specified, it ALWAYS overrides the system specification. This allows you to have different criteria for different loads. Set to zero to revert to the default system value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @Vminemerg.setter
    def Vminemerg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def xfkVA(self) -> float:
        """
        DSS property name: xfkVA
        DSS property index: 21

        Default = 0.0.  Rated kVA of service transformer for allocating loads based on connected kVA at a bus. Side effect:  kW, PF, and kvar are modified. See help on kVA.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @xfkVA.setter
    def xfkVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def allocationfactor(self) -> float:
        """
        DSS property name: allocationfactor
        DSS property index: 22

        Default = 0.5.  Allocation factor for allocating loads based on connected kVA at a bus. Side effect:  kW, PF, and kvar are modified by multiplying this factor times the XFKVA (if > 0).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @allocationfactor.setter
    def allocationfactor(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def kVA(self) -> float:
        """
        DSS property name: kVA
        DSS property index: 23

        Specify base Load in kVA (and power factor)

        Legal ways to define base load:
        kW, PF
        kW, kvar
        kVA, PF
        XFKVA * Allocationfactor, PF
        kWh/(kWhdays*24) * Cfactor, PF
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @kVA.setter
    def kVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def pctmean(self) -> float:
        """
        DSS property name: %mean
        DSS property index: 24

        Percent mean value for load to use for monte carlo studies if no loadshape is assigned to this load. Default is 50.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @pctmean.setter
    def pctmean(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def pctstddev(self) -> float:
        """
        DSS property name: %stddev
        DSS property index: 25

        Percent Std deviation value for load to use for monte carlo studies if no loadshape is assigned to this load. Default is 10.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @pctstddev.setter
    def pctstddev(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def CVRwatts(self) -> float:
        """
        DSS property name: CVRwatts
        DSS property index: 26

        Percent reduction in active power (watts) per 1% reduction in voltage from 100% rated. Default=1. 
         Typical values range from 0.4 to 0.8. Applies to Model=4 only.
         Intended to represent conservation voltage reduction or voltage optimization measures.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @CVRwatts.setter
    def CVRwatts(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def CVRvars(self) -> float:
        """
        DSS property name: CVRvars
        DSS property index: 27

        Percent reduction in reactive power (vars) per 1% reduction in voltage from 100% rated. Default=2. 
         Typical values range from 2 to 3. Applies to Model=4 only.
         Intended to represent conservation voltage reduction or voltage optimization measures.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @CVRvars.setter
    def CVRvars(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def kwh(self) -> float:
        """
        DSS property name: kwh
        DSS property index: 28

        kWh billed for this period. Default is 0. See help on kVA and Cfactor and kWhDays.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 28)

    @kwh.setter
    def kwh(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 28, value)

    @property
    def kwhdays(self) -> float:
        """
        DSS property name: kwhdays
        DSS property index: 29

        Length of kWh billing period in days (24 hr days). Default is 30. Average demand is computed using this value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 29)

    @kwhdays.setter
    def kwhdays(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 29, value)

    @property
    def Cfactor(self) -> float:
        """
        DSS property name: Cfactor
        DSS property index: 30

        Factor relating average kW to peak kW. Default is 4.0. See kWh and kWhdays. See kVA.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 30)

    @Cfactor.setter
    def Cfactor(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 30, value)

    @property
    def CVRcurve(self) -> str:
        """
        DSS property name: CVRcurve
        DSS property index: 31

        Default is NONE. Curve describing both watt and var factors as a function of time. Refers to a LoadShape object with both Mult and Qmult defined. Define a Loadshape to agree with yearly or daily curve according to the type of analysis being done. If NONE, the CVRwatts and CVRvars factors are used and assumed constant.
        """
        return self._get_prop_string(31)

    @CVRcurve.setter
    def CVRcurve(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(31, value)
            return

        self._set_string(31, value)

    @property
    def CVRcurve_obj(self) -> LoadShape:
        """
        DSS property name: CVRcurve
        DSS property index: 31

        Default is NONE. Curve describing both watt and var factors as a function of time. Refers to a LoadShape object with both Mult and Qmult defined. Define a Loadshape to agree with yearly or daily curve according to the type of analysis being done. If NONE, the CVRwatts and CVRvars factors are used and assumed constant.
        """
        return self._get_obj(31, LoadShape)

    @CVRcurve_obj.setter
    def CVRcurve_obj(self, value: LoadShape):
        self._set_obj(31, value)

    @property
    def NumCust(self) -> int:
        """
        DSS property name: NumCust
        DSS property index: 32

        Number of customers, this load. Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 32)

    @NumCust.setter
    def NumCust(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 32, value)

    @property
    def ZIPV(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: ZIPV
        DSS property index: 33

        Array of 7 coefficients:

         First 3 are ZIP weighting factors for real power (should sum to 1)
         Next 3 are ZIP weighting factors for reactive power (should sum to 1)
         Last 1 is cut-off voltage in p.u. of base kV; load is 0 below this cut-off
         No defaults; all coefficients must be specified if using model=8.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 33)

    @ZIPV.setter
    def ZIPV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(33, value)

    @property
    def pctSeriesRL(self) -> float:
        """
        DSS property name: %SeriesRL
        DSS property index: 34

        Percent of load that is series R-L for Harmonic studies. Default is 50. Remainder is assumed to be parallel R and L. This can have a significant impact on the amount of damping observed in Harmonics solutions.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @pctSeriesRL.setter
    def pctSeriesRL(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def RelWeight(self) -> float:
        """
        DSS property name: RelWeight
        DSS property index: 35

        Relative weighting factor for reliability calcs. Default = 1. Used to designate high priority loads such as hospitals, etc. 

        Is multiplied by number of customers and load kW during reliability calcs.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 35)

    @RelWeight.setter
    def RelWeight(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 35, value)

    @property
    def Vlowpu(self) -> float:
        """
        DSS property name: Vlowpu
        DSS property index: 36

        Default = 0.50.  Per unit voltage at which the model switches to same as constant Z model (model=2). This allows more consistent convergence at very low voltaes due to opening switches or solving for fault situations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 36)

    @Vlowpu.setter
    def Vlowpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 36, value)

    @property
    def puXharm(self) -> float:
        """
        DSS property name: puXharm
        DSS property index: 37

        Special reactance, pu (based on kVA, kV properties), for the series impedance branch in the load model for HARMONICS analysis. Generally used to represent motor load blocked rotor reactance. If not specified (that is, set =0, the default value), the series branch is computed from the percentage of the nominal load at fundamental frequency specified by the %SERIESRL property. 

        Applies to load model in HARMONICS mode only.

        A typical value would be approximately 0.20 pu based on kVA * %SeriesRL / 100.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 37)

    @puXharm.setter
    def puXharm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 37, value)

    @property
    def XRharm(self) -> float:
        """
        DSS property name: XRharm
        DSS property index: 38

        X/R ratio of the special harmonics mode reactance specified by the puXHARM property at fundamental frequency. Default is 6. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 38)

    @XRharm.setter
    def XRharm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 38, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 39

        Name of harmonic current spectrum for this load.  Default is "defaultload", which is defined when the DSS starts.
        """
        return self._get_prop_string(39)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(39, value)
            return

        self._set_string(39, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 39

        Name of harmonic current spectrum for this load.  Default is "defaultload", which is defined when the DSS starts.
        """
        return self._get_obj(39, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(39, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 40

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 40)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 40, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 41

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 41) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 41, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 42

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(42, value)

class Transformer(DSSObj):
    _cls_name = 'Transformer'
    _cls_idx = 20
    _cls_prop_idx = {
        'phases': 1,
        'windings': 2,
        'wdg': 3,
        'bus': 4,
        'conn': 5,
        'kv': 6,
        'kva': 7,
        'tap': 8,
        'pctr': 9,
        '%r': 9,
        'rneut': 10,
        'xneut': 11,
        'buses': 12,
        'conns': 13,
        'kvs': 14,
        'kvas': 15,
        'taps': 16,
        'xhl': 17,
        'xht': 18,
        'xlt': 19,
        'xscarray': 20,
        'thermal': 21,
        'n': 22,
        'm': 23,
        'flrise': 24,
        'hsrise': 25,
        'pctloadloss': 26,
        '%loadloss': 26,
        'pctnoloadloss': 27,
        '%noloadloss': 27,
        'normhkva': 28,
        'emerghkva': 29,
        'sub': 30,
        'maxtap': 31,
        'mintap': 32,
        'numtaps': 33,
        'subname': 34,
        'pctimag': 35,
        '%imag': 35,
        'ppm_antifloat': 36,
        'pctrs': 37,
        '%rs': 37,
        'bank': 38,
        'xfmrcode': 39,
        'xrconst': 40,
        'x12': 41,
        'x13': 42,
        'x23': 43,
        'leadlag': 44,
        'wdgcurrents': 45,
        'core': 46,
        'rdcohms': 47,
        'seasons': 48,
        'ratings': 49,
        'normamps': 50,
        'emergamps': 51,
        'faultrate': 52,
        'pctperm': 53,
        'repair': 54,
        'basefreq': 55,
        'enabled': 56,
        'like': 57,
    }

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of phases this transformer. Default is 3.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def windings(self) -> int:
        """
        DSS property name: windings
        DSS property index: 2

        Number of windings, this transformers. (Also is the number of terminals) Default is 2. This property triggers memory allocation for the Transformer and will cause other properties to revert to default values.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @windings.setter
    def windings(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def wdg(self) -> int:
        """
        DSS property name: wdg
        DSS property index: 3

        Set this = to the number of the winding you wish to define.  Then set the values for this winding.  Repeat for each winding.  Alternatively, use the array collections (buses, kVAs, etc.) to define the windings.  Note: reactances are BETWEEN pairs of windings; they are not the property of a single winding.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @wdg.setter
    def wdg(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def bus(self) -> List[str]:
        """
        DSS property name: bus
        DSS property index: 4

        Bus connection spec for this winding.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 4)

    @bus.setter
    def bus(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 4, value_ptr, value_count)
        self._check_for_error()

    @property
    def conn(self) -> List[Connection]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {wye*, Delta, LN, LL}. Default is "wye" with the neutral solidly grounded. 
        """
        return [Connection(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 5)]

    @conn.setter
    def conn(self, value: Union[List[Union[int,Connection]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(5, value)
            return    
        self._set_int32_array(5, value)

    @property
    def conn_str(self) -> List[str]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {wye*, Delta, LN, LL}. Default is "wye" with the neutral solidly grounded. 
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 5)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kV(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kV
        DSS property index: 6

        For 2-or 3-phase, enter phase-phase kV rating.  Otherwise, kV rating of the actual winding
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 6)

    @kV.setter
    def kV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def kVA(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVA
        DSS property index: 7

        Base kVA rating of the winding. Side effect: forces change of max normal and emerg kVA ratings.If 2-winding transformer, forces other winding to same value. When winding 1 is defined, all other windings are defaulted to the same rating and the first two winding resistances are defaulted to the %loadloss value.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @kVA.setter
    def kVA(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def tap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: tap
        DSS property index: 8

        Per unit tap that this winding is on.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 8)

    @tap.setter
    def tap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def pctR(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: %R
        DSS property index: 9

        Percent resistance this winding.  (half of total for a 2-winding).
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 9)

    @pctR.setter
    def pctR(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def Rneut(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Rneut
        DSS property index: 10

        Default = -1. Neutral resistance of wye (star)-connected winding in actual ohms. If entered as a negative value, the neutral is assumed to be open, or floating. To solidly ground the neutral, connect the neutral conductor to Node 0 in the Bus property spec for this winding. For example: Bus=MyBusName.1.2.3.0, which is generally the default connection.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 10)

    @Rneut.setter
    def Rneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Xneut(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Xneut
        DSS property index: 11

        Neutral reactance of wye(star)-connected winding in actual ohms.  May be + or -.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 11)

    @Xneut.setter
    def Xneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def buses(self) -> List[str]:
        """
        DSS property name: buses
        DSS property index: 12

        Use this to specify all the bus connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus"
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 12)

    @buses.setter
    def buses(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 12, value_ptr, value_count)
        self._check_for_error()

    @property
    def conns(self) -> List[Connection]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return [Connection(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 13)]

    @conns.setter
    def conns(self, value: Union[List[Union[int,Connection]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(13, value)
            return    
        self._set_int32_array(13, value)

    @property
    def conns_str(self) -> List[str]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 13)

    @conns_str.setter
    def conns_str(self, value: AnyStr):
        self.conns = value

    @property
    def kVs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVs
        DSS property index: 14

        Use this to specify the kV ratings of all windings at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" 
        ~ conns=(delta, wye)
        ~ kvs=(115, 12.47)

        See kV= property for voltage rules.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 14)

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def kVAs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVAs
        DSS property index: 15

        Use this to specify the kVA ratings of all windings at once using an array.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 15)

    @kVAs.setter
    def kVAs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(15, value)

    @property
    def taps(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: taps
        DSS property index: 16

        Use this to specify the p.u. tap of all windings at once using an array.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 16)

    @taps.setter
    def taps(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def XHL(self) -> float:
        """
        DSS property name: XHL
        DSS property index: 17

        Use this to specify the percent reactance, H-L (winding 1 to winding 2).  Use for 2- or 3-winding transformers. On the kVA base of winding 1. See also X12.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @XHL.setter
    def XHL(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def XHT(self) -> float:
        """
        DSS property name: XHT
        DSS property index: 18

        Use this to specify the percent reactance, H-T (winding 1 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1. See also X13.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @XHT.setter
    def XHT(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def XLT(self) -> float:
        """
        DSS property name: XLT
        DSS property index: 19

        Use this to specify the percent reactance, L-T (winding 2 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1.  See also X23.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @XLT.setter
    def XLT(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def Xscarray(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Xscarray
        DSS property index: 20

        Use this to specify the percent reactance between all pairs of windings as an array. All values are on the kVA base of winding 1.  The order of the values is as follows:

        (x12 13 14... 23 24.. 34 ..)  

        There will be n(n-1)/2 values, where n=number of windings.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 20)

    @Xscarray.setter
    def Xscarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(20, value)

    @property
    def thermal(self) -> float:
        """
        DSS property name: thermal
        DSS property index: 21

        Thermal time constant of the transformer in hours.  Typically about 2.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @thermal.setter
    def thermal(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def n(self) -> float:
        """
        DSS property name: n
        DSS property index: 22

        n Exponent for thermal properties in IEEE C57.  Typically 0.8.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @n.setter
    def n(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def m(self) -> float:
        """
        DSS property name: m
        DSS property index: 23

        m Exponent for thermal properties in IEEE C57.  Typically 0.9 - 1.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @m.setter
    def m(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def flrise(self) -> float:
        """
        DSS property name: flrise
        DSS property index: 24

        Temperature rise, deg C, for full load.  Default is 65.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @flrise.setter
    def flrise(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def hsrise(self) -> float:
        """
        DSS property name: hsrise
        DSS property index: 25

        Hot spot temperature rise, deg C.  Default is 15.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @hsrise.setter
    def hsrise(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def pctloadloss(self) -> float:
        """
        DSS property name: %loadloss
        DSS property index: 26

        Percent load loss at full load. The %R of the High and Low windings (1 and 2) are adjusted to agree at rated kVA loading.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @pctloadloss.setter
    def pctloadloss(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def pctnoloadloss(self) -> float:
        """
        DSS property name: %noloadloss
        DSS property index: 27

        Percent no load losses at rated excitatation voltage. Default is 0. Converts to a resistance in parallel with the magnetizing impedance in each winding.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @pctnoloadloss.setter
    def pctnoloadloss(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def normhkVA(self) -> float:
        """
        DSS property name: normhkVA
        DSS property index: 28

        Normal maximum kVA rating of H winding (winding 1).  Usually 100% - 110% ofmaximum nameplate rating, depending on load shape. Defaults to 110% of kVA rating of Winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 28)

    @normhkVA.setter
    def normhkVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 28, value)

    @property
    def emerghkVA(self) -> float:
        """
        DSS property name: emerghkVA
        DSS property index: 29

        Emergency (contingency)  kVA rating of H winding (winding 1).  Usually 140% - 150% ofmaximum nameplate rating, depending on load shape. Defaults to 150% of kVA rating of Winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 29)

    @emerghkVA.setter
    def emerghkVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 29, value)

    @property
    def sub(self) -> bool:
        """
        DSS property name: sub
        DSS property index: 30

        ={Yes|No}  Designates whether this transformer is to be considered a substation.Default is No.
        """
        return self._lib.Obj_GetInt32(self._ptr, 30) != 0

    @sub.setter
    def sub(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 30, value)

    @property
    def MaxTap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: MaxTap
        DSS property index: 31

        Max per unit tap for the active winding.  Default is 1.10
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 31)

    @MaxTap.setter
    def MaxTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(31, value)

    @property
    def MinTap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: MinTap
        DSS property index: 32

        Min per unit tap for the active winding.  Default is 0.90
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 32)

    @MinTap.setter
    def MinTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(32, value)

    @property
    def NumTaps(self) -> npt.NDArray[np.int32]:
        """
        DSS property name: NumTaps
        DSS property index: 33

        Total number of taps between min and max tap.  Default is 32 (16 raise and 16 lower taps about the neutral position). The neutral position is not counted.
        """
        return self._get_int32_array(self._lib.Obj_GetInt32Array, self._ptr, 33)

    @NumTaps.setter
    def NumTaps(self, value: npt.NDArray[np.int32]):
        self._set_int32_array(33, value)

    @property
    def subname(self) -> str:
        """
        DSS property name: subname
        DSS property index: 34

        Substation Name. Optional. Default is null. If specified, printed on plots
        """
        return self._get_prop_string(34)

    @subname.setter
    def subname(self, value: AnyStr):
        self._set_string(34, value)

    @property
    def pctimag(self) -> float:
        """
        DSS property name: %imag
        DSS property index: 35

        Percent magnetizing current. Default=0.0. Magnetizing branch is in parallel with windings in each phase. Also, see "ppm_antifloat".
        """
        return self._lib.Obj_GetFloat64(self._ptr, 35)

    @pctimag.setter
    def pctimag(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 35, value)

    @property
    def ppm_antifloat(self) -> float:
        """
        DSS property name: ppm_antifloat
        DSS property index: 36

        Default=1 ppm.  Parts per million of transformer winding VA rating connected to ground to protect against accidentally floating a winding without a reference. If positive then the effect is adding a very large reactance to ground.  If negative, then a capacitor.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 36)

    @ppm_antifloat.setter
    def ppm_antifloat(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 36, value)

    @property
    def pctRs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: %Rs
        DSS property index: 37

        Use this property to specify all the winding %resistances using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ %Rs=(0.2  0.3)
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 37)

    @pctRs.setter
    def pctRs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def bank(self) -> str:
        """
        DSS property name: bank
        DSS property index: 38

        Name of the bank this transformer is part of, for CIM, MultiSpeak, and other interfaces.
        """
        return self._get_prop_string(38)

    @bank.setter
    def bank(self, value: AnyStr):
        self._set_string(38, value)

    @property
    def xfmrcode(self) -> str:
        """
        DSS property name: XfmrCode
        DSS property index: 39

        Name of a library entry for transformer properties. The named XfmrCode must already be defined.
        """
        return self._get_prop_string(39)

    @xfmrcode.setter
    def xfmrcode(self, value: Union[AnyStr, XfmrCode]):
        if isinstance(value, DSSObj):
            self._set_obj(39, value)
            return

        self._set_string(39, value)

    @property
    def xfmrcode_obj(self) -> XfmrCode:
        """
        DSS property name: XfmrCode
        DSS property index: 39

        Name of a library entry for transformer properties. The named XfmrCode must already be defined.
        """
        return self._get_obj(39, XfmrCode)

    @xfmrcode_obj.setter
    def xfmrcode_obj(self, value: XfmrCode):
        self._set_obj(39, value)

    @property
    def XRConst(self) -> bool:
        """
        DSS property name: XRConst
        DSS property index: 40

        ={Yes|No} Default is NO. Signifies whether or not the X/R is assumed contant for harmonic studies.
        """
        return self._lib.Obj_GetInt32(self._ptr, 40) != 0

    @XRConst.setter
    def XRConst(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 40, value)

    @property
    def X12(self) -> float:
        """
        DSS property name: X12
        DSS property index: 41

        Alternative to XHL for specifying the percent reactance from winding 1 to winding 2.  Use for 2- or 3-winding transformers. Percent on the kVA base of winding 1. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 41)

    @X12.setter
    def X12(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 41, value)

    @property
    def X13(self) -> float:
        """
        DSS property name: X13
        DSS property index: 42

        Alternative to XHT for specifying the percent reactance from winding 1 to winding 3.  Use for 3-winding transformers only. Percent on the kVA base of winding 1. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 42)

    @X13.setter
    def X13(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 42, value)

    @property
    def X23(self) -> float:
        """
        DSS property name: X23
        DSS property index: 43

        Alternative to XLT for specifying the percent reactance from winding 2 to winding 3.Use for 3-winding transformers only. Percent on the kVA base of winding 1.  
        """
        return self._lib.Obj_GetFloat64(self._ptr, 43)

    @X23.setter
    def X23(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 43, value)

    @property
    def LeadLag(self) -> PhaseSequence:
        """
        DSS property name: LeadLag
        DSS property index: 44

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return PhaseSequence(self._lib.Obj_GetInt32(self._ptr, 44))

    @LeadLag.setter
    def LeadLag(self, value: Union[AnyStr, int, PhaseSequence]):
        if not isinstance(value, int):
            self._set_string(44, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 44, value)

    @property
    def LeadLag_str(self) -> str:
        """
        DSS property name: LeadLag
        DSS property index: 44

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return self._get_prop_string(44)

    @LeadLag_str.setter
    def LeadLag_str(self, value: AnyStr):
        self.LeadLag = value

    def WdgCurrents(self) -> str:
        """
        DSS property name: WdgCurrents
        DSS property index: 45

        (Read only) Makes winding currents available via return on query (? Transformer.TX.WdgCurrents). Order: Phase 1, Wdg 1, Wdg 2, ..., Phase 2 ...
        """
        # []
        # StringSilentROFunction
        return self._get_prop_string(self._lib.Obj_GetString(self._ptr, 45))

    @property
    def Core(self) -> CoreType:
        """
        DSS property name: Core
        DSS property index: 46

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis
        """
        return CoreType(self._lib.Obj_GetInt32(self._ptr, 46))

    @Core.setter
    def Core(self, value: Union[AnyStr, int, CoreType]):
        if not isinstance(value, int):
            self._set_string(46, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 46, value)

    @property
    def Core_str(self) -> str:
        """
        DSS property name: Core
        DSS property index: 46

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis
        """
        return self._get_prop_string(46)

    @Core_str.setter
    def Core_str(self, value: AnyStr):
        self.Core = value

    @property
    def RdcOhms(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: RdcOhms
        DSS property index: 47

        Winding dc resistance in OHMS. Useful for GIC analysis. From transformer test report. Defaults to 85% of %R property
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 47)

    @RdcOhms.setter
    def RdcOhms(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(47, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 48

        Defines the number of ratings to be defined for the transfomer, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 48)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 48, value)

    @property
    def Ratings(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Ratings
        DSS property index: 49

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in transformers. Is given in kVA
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 49)

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(49, value)

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 50

        Normal rated current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 50)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 50, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 51

        Maximum or emerg current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 51)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 51, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 52

        Failure rate per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 52)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 52, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 53

        Percent of failures that become permanent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 53)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 53, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 54

        Hours to repair.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 54)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 54, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 55

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 55)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 55, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 56

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 56) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 56, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 57

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(57, value)

class Capacitor(DSSObj):
    _cls_name = 'Capacitor'
    _cls_idx = 22
    _cls_prop_idx = {
        'bus1': 1,
        'bus2': 2,
        'phases': 3,
        'kvar': 4,
        'kv': 5,
        'conn': 6,
        'cmatrix': 7,
        'cuf': 8,
        'r': 9,
        'xl': 10,
        'harm': 11,
        'numsteps': 12,
        'states': 13,
        'normamps': 14,
        'emergamps': 15,
        'faultrate': 16,
        'pctperm': 17,
        'repair': 18,
        'basefreq': 19,
        'enabled': 20,
        'like': 21,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of first bus of 2-terminal capacitor. Examples:
        bus1=busname
        bus1=busname.1.2.3

        If only one bus specified, Bus2 will default to this bus, Node 0, and the capacitor will be a Yg shunt bank.
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def bus2(self) -> str:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of 2nd bus. Defaults to all phases connected to first bus, node 0, (Shunt Wye Connection) except when Bus2 explicitly specified. 

        Not necessary to specify for delta (LL) connection.
        """
        return self._get_prop_string(2)

    @bus2.setter
    def bus2(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 3

        Number of phases.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def kvar(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kvar
        DSS property index: 4

        Total kvar, if one step, or ARRAY of kvar ratings for each step.  Evenly divided among phases. See rules for NUMSTEPS.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 4)

    @kvar.setter
    def kvar(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def kv(self) -> float:
        """
        DSS property name: kv
        DSS property index: 5

        For 2, 3-phase, kV phase-phase. Otherwise specify actual can rating.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kv.setter
    def kv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 6))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(6, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN
        """
        return self._get_prop_string(6)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def cmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: cmatrix
        DSS property index: 7

        Nodal cap. matrix, lower triangle, microfarads, of the following form:

        cmatrix="c11 | -c21 c22 | -c31 -c32 c33"

        All steps are assumed the same if this property is used.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @cmatrix.setter
    def cmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def cuf(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: cuf
        DSS property index: 8

        ARRAY of Capacitance, each phase, for each step, microfarads.
        See Rules for NumSteps.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 8)

    @cuf.setter
    def cuf(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def R(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: R
        DSS property index: 9

        ARRAY of series resistance in each phase (line), ohms. Default is 0.0
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 9)

    @R.setter
    def R(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def XL(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: XL
        DSS property index: 10

        ARRAY of series inductive reactance(s) in each phase (line) for filter, ohms at base frequency. Use this OR "h" property to define filter. Default is 0.0.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 10)

    @XL.setter
    def XL(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Harm(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Harm
        DSS property index: 11

        ARRAY of harmonics to which each step is tuned. Zero is interpreted as meaning zero reactance (no filter). Default is zero.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 11)

    @Harm.setter
    def Harm(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def Numsteps(self) -> int:
        """
        DSS property name: Numsteps
        DSS property index: 12

        Number of steps in this capacitor bank. Default = 1. Forces reallocation of the capacitance, reactor, and states array.  Rules: If this property was previously =1, the value in the kvar property is divided equally among the steps. The kvar property does not need to be reset if that is accurate.  If the Cuf or Cmatrix property was used previously, all steps are set to the value of the first step. The states property is set to all steps on. All filter steps are set to the same harmonic. If this property was previously >1, the arrays are reallocated, but no values are altered. You must SUBSEQUENTLY assign all array properties.
        """
        return self._lib.Obj_GetInt32(self._ptr, 12)

    @Numsteps.setter
    def Numsteps(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    @property
    def states(self) -> npt.NDArray[np.int32]:
        """
        DSS property name: states
        DSS property index: 13

        ARRAY of integers {1|0} states representing the state of each step (on|off). Defaults to 1 when reallocated (on). Capcontrol will modify this array as it turns steps on or off.
        """
        return self._get_int32_array(self._lib.Obj_GetInt32Array, self._ptr, 13)

    @states.setter
    def states(self, value: npt.NDArray[np.int32]):
        self._set_int32_array(13, value)

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 14

        Normal rated current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 15

        Maximum or emerg current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 16

        Failure rate per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 17

        Percent of failures that become permanent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 18

        Hours to repair.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 19

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 20

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 20) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 20, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 21

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(21, value)

class Reactor(DSSObj):
    _cls_name = 'Reactor'
    _cls_idx = 23
    _cls_prop_idx = {
        'bus1': 1,
        'bus2': 2,
        'phases': 3,
        'kvar': 4,
        'kv': 5,
        'conn': 6,
        'rmatrix': 7,
        'xmatrix': 8,
        'parallel': 9,
        'r': 10,
        'x': 11,
        'rp': 12,
        'z1': 13,
        'z2': 14,
        'z0': 15,
        'z': 16,
        'rcurve': 17,
        'lcurve': 18,
        'lmh': 19,
        'normamps': 20,
        'emergamps': 21,
        'faultrate': 22,
        'pctperm': 23,
        'repair': 24,
        'basefreq': 25,
        'enabled': 26,
        'like': 27,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of first bus. Examples:
        bus1=busname
        bus1=busname.1.2.3

        Bus2 property will default to this bus, node 0, unless previously specified. Only Bus1 need be specified for a Yg shunt reactor.
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def bus2(self) -> str:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of 2nd bus. Defaults to all phases connected to first bus, node 0, (Shunt Wye Connection) except when Bus2 is specifically defined.

        Not necessary to specify for delta (LL) connection
        """
        return self._get_prop_string(2)

    @bus2.setter
    def bus2(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 3

        Number of phases.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def kvar(self) -> float:
        """
        DSS property name: kvar
        DSS property index: 4

        Total kvar, all phases.  Evenly divided among phases. Only determines X. Specify R separately
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kvar.setter
    def kvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def kv(self) -> float:
        """
        DSS property name: kv
        DSS property index: 5

        For 2, 3-phase, kV phase-phase. Otherwise specify actual coil rating.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kv.setter
    def kv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN. If Delta, then only one terminal.
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 6))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(6, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN. If Delta, then only one terminal.
        """
        return self._get_prop_string(6)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def Rmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Rmatrix
        DSS property index: 7

        Resistance matrix, lower triangle, ohms at base frequency. Order of the matrix is the number of phases. Mutually exclusive to specifying parameters by kvar or X.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @Rmatrix.setter
    def Rmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def Xmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Xmatrix
        DSS property index: 8

        Reactance matrix, lower triangle, ohms at base frequency. Order of the matrix is the number of phases. Mutually exclusive to specifying parameters by kvar or X.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 8)

    @Xmatrix.setter
    def Xmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def Parallel(self) -> bool:
        """
        DSS property name: Parallel
        DSS property index: 9

        {Yes | No}  Default=No. Indicates whether Rmatrix and Xmatrix are to be considered in parallel. Default is series. For other models, specify R and Rp.
        """
        return self._lib.Obj_GetInt32(self._ptr, 9) != 0

    @Parallel.setter
    def Parallel(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 9, value)

    @property
    def R(self) -> float:
        """
        DSS property name: R
        DSS property index: 10

        Resistance (in series with reactance), each phase, ohms. This property applies to REACTOR specified by either kvar or X. See also help on Z.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @R.setter
    def R(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def X(self) -> float:
        """
        DSS property name: X
        DSS property index: 11

        Reactance, each phase, ohms at base frequency. See also help on Z and LmH properties.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @X.setter
    def X(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def Rp(self) -> float:
        """
        DSS property name: Rp
        DSS property index: 12

        Resistance in parallel with R and X (the entire branch). Assumed infinite if not specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @Rp.setter
    def Rp(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def Z1(self) -> complex:
        """
        DSS property name: Z1
        DSS property index: 13

        Positive-sequence impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z1=[1, 2]  ! represents 1 + j2 

        If defined, Z1, Z2, and Z0 are used to define the impedance matrix of the REACTOR. Z1 MUST BE DEFINED TO USE THIS OPTION FOR DEFINING THE MATRIX.

        Side Effect: Sets Z2 and Z0 to same values unless they were previously defined.
        """
        return self._get_complex(13)

    @Z1.setter
    def Z1(self, value: complex):
        self._set_complex(13, value)

    @property
    def Z2(self) -> complex:
        """
        DSS property name: Z2
        DSS property index: 14

        Negative-sequence impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z2=[1, 2]  ! represents 1 + j2 

        Used to define the impedance matrix of the REACTOR if Z1 is also specified. 

        Note: Z2 defaults to Z1 if it is not specifically defined. If Z2 is not equal to Z1, the impedance matrix is asymmetrical.
        """
        return self._get_complex(14)

    @Z2.setter
    def Z2(self, value: complex):
        self._set_complex(14, value)

    @property
    def Z0(self) -> complex:
        """
        DSS property name: Z0
        DSS property index: 15

        Zer0-sequence impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z0=[3, 4]  ! represents 3 + j4 

        Used to define the impedance matrix of the REACTOR if Z1 is also specified. 

        Note: Z0 defaults to Z1 if it is not specifically defined. 
        """
        return self._get_complex(15)

    @Z0.setter
    def Z0(self, value: complex):
        self._set_complex(15, value)

    @property
    def Z(self) -> complex:
        """
        DSS property name: Z
        DSS property index: 16

        Alternative way of defining R and X properties. Enter a 2-element array representing R +jX in ohms. Example:

        Z=[5  10]   ! equivalent to R=5  X=10 
        """
        return self._get_complex(16)

    @Z.setter
    def Z(self, value: complex):
        self._set_complex(16, value)

    @property
    def RCurve(self) -> str:
        """
        DSS property name: RCurve
        DSS property index: 17

        Name of XYCurve object, previously defined, describing per-unit variation of phase resistance, R, vs. frequency. Applies to resistance specified by R or Z property. If actual values are not known, R often increases by approximately the square root of frequency.
        """
        return self._get_prop_string(17)

    @RCurve.setter
    def RCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(17, value)
            return

        self._set_string(17, value)

    @property
    def RCurve_obj(self) -> XYcurve:
        """
        DSS property name: RCurve
        DSS property index: 17

        Name of XYCurve object, previously defined, describing per-unit variation of phase resistance, R, vs. frequency. Applies to resistance specified by R or Z property. If actual values are not known, R often increases by approximately the square root of frequency.
        """
        return self._get_obj(17, XYcurve)

    @RCurve_obj.setter
    def RCurve_obj(self, value: XYcurve):
        self._set_obj(17, value)

    @property
    def LCurve(self) -> str:
        """
        DSS property name: LCurve
        DSS property index: 18

        Name of XYCurve object, previously defined, describing per-unit variation of phase inductance, L=X/w, vs. frequency. Applies to reactance specified by X, LmH, Z, or kvar property.L generally decreases somewhat with frequency above the base frequency, approaching a limit at a few kHz.
        """
        return self._get_prop_string(18)

    @LCurve.setter
    def LCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(18, value)
            return

        self._set_string(18, value)

    @property
    def LCurve_obj(self) -> XYcurve:
        """
        DSS property name: LCurve
        DSS property index: 18

        Name of XYCurve object, previously defined, describing per-unit variation of phase inductance, L=X/w, vs. frequency. Applies to reactance specified by X, LmH, Z, or kvar property.L generally decreases somewhat with frequency above the base frequency, approaching a limit at a few kHz.
        """
        return self._get_obj(18, XYcurve)

    @LCurve_obj.setter
    def LCurve_obj(self, value: XYcurve):
        self._set_obj(18, value)

    @property
    def LmH(self) -> float:
        """
        DSS property name: LmH
        DSS property index: 19

        Inductance, mH. Alternate way to define the reactance, X, property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @LmH.setter
    def LmH(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 20

        Normal rated current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 21

        Maximum or emerg current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 22

        Failure rate per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 23

        Percent of failures that become permanent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 24

        Hours to repair.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 25

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 26

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 26) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 26, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 27

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(27, value)

class CapControl(DSSObj):
    _cls_name = 'CapControl'
    _cls_idx = 24
    _cls_prop_idx = {
        'element': 1,
        'terminal': 2,
        'capacitor': 3,
        'type': 4,
        'ptratio': 5,
        'ctratio': 6,
        'onsetting': 7,
        'offsetting': 8,
        'delay': 9,
        'voltoverride': 10,
        'vmax': 11,
        'vmin': 12,
        'delayoff': 13,
        'deadtime': 14,
        'ctphase': 15,
        'ptphase': 16,
        'vbus': 17,
        'eventlog': 18,
        'usermodel': 19,
        'userdata': 20,
        'pctminkvar': 21,
        'reset': 22,
        'basefreq': 23,
        'enabled': 24,
        'like': 25,
    }

    # Class-specific enumerations
    class CapControlType(IntEnum):
        """CapControl: Type (DSS enumeration for CapControl)"""
        Current = 0 # Current
        Voltage = 1 # Voltage
        kvar = 2 # kvar
        Time = 3 # Time
        PowerFactor = 4 # PowerFactor


    @property
    def element(self) -> str:
        """
        DSS property name: element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, to which the capacitor control's PT and/or CT are connected.There is no default; must be specified.
        """
        return self._get_prop_string(1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def element_obj(self) -> DSSObj:
        """
        DSS property name: element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, to which the capacitor control's PT and/or CT are connected.There is no default; must be specified.
        """
        return self._get_obj(1, None)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def terminal(self) -> int:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the CapControl is connected. 1 or 2, typically.  Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @terminal.setter
    def terminal(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def capacitor(self) -> str:
        """
        DSS property name: capacitor
        DSS property index: 3

        Name of Capacitor element which the CapControl controls. No Default; Must be specified.Do not specify the full object name; "Capacitor" is assumed for the object class.  Example:

        Capacitor=cap1
        """
        return self._get_prop_string(3)

    @capacitor.setter
    def capacitor(self, value: Union[AnyStr, Capacitor]):
        if isinstance(value, DSSObj):
            self._set_obj(3, value)
            return

        self._set_string(3, value)

    @property
    def capacitor_obj(self) -> Capacitor:
        """
        DSS property name: capacitor
        DSS property index: 3

        Name of Capacitor element which the CapControl controls. No Default; Must be specified.Do not specify the full object name; "Capacitor" is assumed for the object class.  Example:

        Capacitor=cap1
        """
        return self._get_obj(3, Capacitor)

    @capacitor_obj.setter
    def capacitor_obj(self, value: Capacitor):
        self._set_obj(3, value)

    @property
    def type(self) -> CapControlType:
        """
        DSS property name: type
        DSS property index: 4

        {Current | voltage | kvar | PF | time } Control type.  Specify the ONsetting and OFFsetting appropriately with the type of control. (See help for ONsetting)
        """
        return CapControlType(self._lib.Obj_GetInt32(self._ptr, 4))

    @type.setter
    def type(self, value: Union[AnyStr, int, CapControlType]):
        if not isinstance(value, int):
            self._set_string(4, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def type_str(self) -> str:
        """
        DSS property name: type
        DSS property index: 4

        {Current | voltage | kvar | PF | time } Control type.  Specify the ONsetting and OFFsetting appropriately with the type of control. (See help for ONsetting)
        """
        return self._get_prop_string(4)

    @type_str.setter
    def type_str(self, value: AnyStr):
        self.type = value

    @property
    def PTratio(self) -> float:
        """
        DSS property name: PTratio
        DSS property index: 5

        Ratio of the PT that converts the monitored voltage to the control voltage. Default is 60.  If the capacitor is Wye, the 1st phase line-to-neutral voltage is monitored.  Else, the line-to-line voltage (1st - 2nd phase) is monitored.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @PTratio.setter
    def PTratio(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def CTratio(self) -> float:
        """
        DSS property name: CTratio
        DSS property index: 6

        Ratio of the CT from line amps to control ampere setting for current and kvar control types. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @CTratio.setter
    def CTratio(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def ONsetting(self) -> float:
        """
        DSS property name: ONsetting
        DSS property index: 7

        Value at which the control arms to switch the capacitor ON (or ratchet up a step).  

        Type of Control:

        Current: Line Amps / CTratio
        Voltage: Line-Neutral (or Line-Line for delta) Volts / PTratio
        kvar:    Total kvar, all phases (3-phase for pos seq model). This is directional. 
        PF:      Power Factor, Total power in monitored terminal. Negative for Leading. 
        Time:    Hrs from Midnight as a floating point number (decimal). 7:30am would be entered as 7.5.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @ONsetting.setter
    def ONsetting(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def OFFsetting(self) -> float:
        """
        DSS property name: OFFsetting
        DSS property index: 8

        Value at which the control arms to switch the capacitor OFF. (See help for ONsetting)For Time control, is OK to have Off time the next day ( < On time)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @OFFsetting.setter
    def OFFsetting(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def Delay(self) -> float:
        """
        DSS property name: Delay
        DSS property index: 9

        Time delay, in seconds, from when the control is armed before it sends out the switching command to turn ON.  The control may reset before the action actually occurs. This is used to determine which capacity control will act first. Default is 15.  You may specify any floating point number to achieve a model of whatever condition is necessary.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @Delay.setter
    def Delay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def VoltOverride(self) -> bool:
        """
        DSS property name: VoltOverride
        DSS property index: 10

        {Yes | No}  Default is No.  Switch to indicate whether VOLTAGE OVERRIDE is to be considered. Vmax and Vmin must be set to reasonable values if this property is Yes.
        """
        return self._lib.Obj_GetInt32(self._ptr, 10) != 0

    @VoltOverride.setter
    def VoltOverride(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 10, value)

    @property
    def Vmax(self) -> float:
        """
        DSS property name: Vmax
        DSS property index: 11

        Maximum voltage, in volts.  If the voltage across the capacitor divided by the PTRATIO is greater than this voltage, the capacitor will switch OFF regardless of other control settings. Default is 126 (goes with a PT ratio of 60 for 12.47 kV system).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @Vmax.setter
    def Vmax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def Vmin(self) -> float:
        """
        DSS property name: Vmin
        DSS property index: 12

        Minimum voltage, in volts.  If the voltage across the capacitor divided by the PTRATIO is less than this voltage, the capacitor will switch ON regardless of other control settings. Default is 115 (goes with a PT ratio of 60 for 12.47 kV system).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @Vmin.setter
    def Vmin(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def DelayOFF(self) -> float:
        """
        DSS property name: DelayOFF
        DSS property index: 13

        Time delay, in seconds, for control to turn OFF when present state is ON. Default is 15.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @DelayOFF.setter
    def DelayOFF(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def DeadTime(self) -> float:
        """
        DSS property name: DeadTime
        DSS property index: 14

        Dead time after capacitor is turned OFF before it can be turned back ON. Default is 300 sec.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @DeadTime.setter
    def DeadTime(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def CTPhase(self) -> Union[MonitoredPhase, int]:
        """
        DSS property name: CTPhase
        DSS property index: 15

        Number of the phase being monitored for CURRENT control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        value = self._lib.Obj_GetInt32(self._ptr, 15)
        if value > 0:
            return value
    
        return MonitoredPhase(value)

    @CTPhase.setter
    def CTPhase(self, value: Union[AnyStr, int, MonitoredPhase]):
        if not isinstance(value, int):
            self._set_string(15, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def CTPhase_str(self) -> str:
        """
        DSS property name: CTPhase
        DSS property index: 15

        Number of the phase being monitored for CURRENT control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        return self._get_prop_string(15)

    @CTPhase_str.setter
    def CTPhase_str(self, value: AnyStr):
        self.CTPhase = value

    @property
    def PTPhase(self) -> Union[MonitoredPhase, int]:
        """
        DSS property name: PTPhase
        DSS property index: 16

        Number of the phase being monitored for VOLTAGE control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        value = self._lib.Obj_GetInt32(self._ptr, 16)
        if value > 0:
            return value
    
        return MonitoredPhase(value)

    @PTPhase.setter
    def PTPhase(self, value: Union[AnyStr, int, MonitoredPhase]):
        if not isinstance(value, int):
            self._set_string(16, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    @property
    def PTPhase_str(self) -> str:
        """
        DSS property name: PTPhase
        DSS property index: 16

        Number of the phase being monitored for VOLTAGE control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        return self._get_prop_string(16)

    @PTPhase_str.setter
    def PTPhase_str(self, value: AnyStr):
        self.PTPhase = value

    @property
    def VBus(self) -> str:
        """
        DSS property name: VBus
        DSS property index: 17

        Name of bus to use for voltage override function. Default is bus at monitored terminal. Sometimes it is useful to monitor a bus in another location to emulate various DMS control algorithms.
        """
        return self._get_prop_string(17)

    @VBus.setter
    def VBus(self, value: AnyStr):
        self._set_string(17, value)

    @property
    def EventLog(self) -> bool:
        """
        DSS property name: EventLog
        DSS property index: 18

        {Yes/True* | No/False} Default is YES for CapControl. Log control actions to Eventlog.
        """
        return self._lib.Obj_GetInt32(self._ptr, 18) != 0

    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def UserModel(self) -> str:
        """
        DSS property name: UserModel
        DSS property index: 19

        Name of DLL containing user-written CapControl model, overriding the default model.  Set to "none" to negate previous setting. 
        """
        return self._get_prop_string(19)

    @UserModel.setter
    def UserModel(self, value: AnyStr):
        self._set_string(19, value)

    @property
    def UserData(self) -> str:
        """
        DSS property name: UserData
        DSS property index: 20

        String (in quotes or parentheses if necessary) that gets passed to the user-written CapControl model Edit function for defining the data required for that model. 
        """
        return self._get_prop_string(20)

    @UserData.setter
    def UserData(self, value: AnyStr):
        self._set_string(20, value)

    @property
    def pctMinkvar(self) -> float:
        """
        DSS property name: pctMinkvar
        DSS property index: 21

        For PF control option, min percent of total bank kvar at which control will close capacitor switch. Default = 50.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @pctMinkvar.setter
    def pctMinkvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    def Reset(self, value: bool):
        """
        DSS property name: Reset
        DSS property index: 22

        {Yes | No} If Yes, forces Reset of this CapControl.
        """
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 23

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 24

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 24) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 24, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 25

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(25, value)

class Fault(DSSObj):
    _cls_name = 'Fault'
    _cls_idx = 25
    _cls_prop_idx = {
        'bus1': 1,
        'bus2': 2,
        'phases': 3,
        'r': 4,
        'pctstddev': 5,
        '%stddev': 5,
        'gmatrix': 6,
        'ontime': 7,
        'temporary': 8,
        'minamps': 9,
        'normamps': 10,
        'emergamps': 11,
        'faultrate': 12,
        'pctperm': 13,
        'repair': 14,
        'basefreq': 15,
        'enabled': 16,
        'like': 17,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of first bus. Examples:

        bus1=busname
        bus1=busname.1.2.3

        Bus2 automatically defaults to busname.0,0,0 unless it was previously defined. 
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def bus2(self) -> str:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of 2nd bus of the 2-terminal Fault object. Defaults to all phases connected to first bus, node 0, if not specified. (Shunt Wye Connection to ground reference)

        That is, the Fault defaults to a ground fault unless otherwise specified.
        """
        return self._get_prop_string(2)

    @bus2.setter
    def bus2(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 3

        Number of Phases. Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def r(self) -> float:
        """
        DSS property name: r
        DSS property index: 4

        Resistance, each phase, ohms. Default is 0.0001. Assumed to be Mean value if gaussian random mode.Max value if uniform mode.  A Fault is actually a series resistance that defaults to a wye connection to ground on the second terminal.  You may reconnect the 2nd terminal to achieve whatever connection.  Use the Gmatrix property to specify an arbitrary conductance matrix.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @r.setter
    def r(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def pctstddev(self) -> float:
        """
        DSS property name: %stddev
        DSS property index: 5

        Percent standard deviation in resistance to assume for Monte Carlo fault (MF) solution mode for GAUSSIAN distribution. Default is 0 (no variation from mean).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @pctstddev.setter
    def pctstddev(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def Gmatrix(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Gmatrix
        DSS property index: 6

        Use this to specify a nodal conductance (G) matrix to represent some arbitrary resistance network. Specify in lower triangle form as usual for DSS matrices.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 6)

    @Gmatrix.setter
    def Gmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def ONtime(self) -> float:
        """
        DSS property name: ONtime
        DSS property index: 7

        Time (sec) at which the fault is established for time varying simulations. Default is 0.0 (on at the beginning of the simulation)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @ONtime.setter
    def ONtime(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def temporary(self) -> bool:
        """
        DSS property name: temporary
        DSS property index: 8

        {Yes | No} Default is No.  Designate whether the fault is temporary.  For Time-varying simulations, the fault will be removed if the current through the fault drops below the MINAMPS criteria.
        """
        return self._lib.Obj_GetInt32(self._ptr, 8) != 0

    @temporary.setter
    def temporary(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 8, value)

    @property
    def MinAmps(self) -> float:
        """
        DSS property name: MinAmps
        DSS property index: 9

        Minimum amps that can sustain a temporary fault. Default is 5.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @MinAmps.setter
    def MinAmps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 10

        Normal rated current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 11

        Maximum or emerg current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 12

        Failure rate per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 13

        Percent of failures that become permanent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 14

        Hours to repair.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 15

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 16

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 16) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 17

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(17, value)

class Generator(DSSObj):
    _cls_name = 'Generator'
    _cls_idx = 26
    _cls_prop_idx = {
        'phases': 1,
        'bus1': 2,
        'kv': 3,
        'kw': 4,
        'pf': 5,
        'kvar': 6,
        'model': 7,
        'vminpu': 8,
        'vmaxpu': 9,
        'yearly': 10,
        'daily': 11,
        'duty': 12,
        'dispmode': 13,
        'dispvalue': 14,
        'conn': 15,
        'status': 16,
        'cls': 17,
        'class': 17,
        'vpu': 18,
        'maxkvar': 19,
        'minkvar': 20,
        'pvfactor': 21,
        'forceon': 22,
        'kva': 23,
        'mva': 24,
        'xd': 25,
        'xdp': 26,
        'xdpp': 27,
        'h': 28,
        'd': 29,
        'usermodel': 30,
        'userdata': 31,
        'shaftmodel': 32,
        'shaftdata': 33,
        'dutystart': 34,
        'debugtrace': 35,
        'balanced': 36,
        'xrdp': 37,
        'usefuel': 38,
        'fuelkwh': 39,
        'pctfuel': 40,
        '%fuel': 40,
        'pctreserve': 41,
        '%reserve': 41,
        'refuel': 42,
        'spectrum': 43,
        'basefreq': 44,
        'enabled': 45,
        'like': 46,
    }

    # Class-specific enumerations
    class GeneratorDispatchMode(IntEnum):
        """Generator: Dispatch Mode (DSS enumeration for Generator)"""
        Default = 0 # Default
        LoadLevel = 1 # LoadLevel
        Price = 2 # Price

    class GeneratorStatus(IntEnum):
        """Generator: Status (DSS enumeration for Generator)"""
        Variable = 0 # Variable
        Fixed = 1 # Fixed


    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this Generator.  Power is evenly divided among phases.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the Generator is connected.  May include specific node specification.
        """
        return self._get_prop_string(2)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def kv(self) -> float:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for Generator. For 2- and 3-phase Generators, specify phase-phase kV. Otherwise, for phases=1 or phases>3, specify actual kV across each branch of the Generator. If wye (star), specify phase-neutral kV. If delta or phase-phase connected, specify phase-phase kV.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kv.setter
    def kv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def kW(self) -> float:
        """
        DSS property name: kW
        DSS property index: 4

        Total base kW for the Generator.  A positive value denotes power coming OUT of the element, 
        which is the opposite of a load. This value is modified depending on the dispatch mode. Unaffected by the global load multiplier and growth curves. If you want there to be more generation, you must add more generators or change this value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kW.setter
    def kW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def pf(self) -> float:
        """
        DSS property name: pf
        DSS property index: 5

        Generator power factor. Default is 0.80. Enter negative for leading powerfactor (when kW and kvar have opposite signs.)
        A positive power factor for a generator signifies that the generator produces vars 
        as is typical for a synchronous generator.  Induction machines would be 
        specified with a negative power factor.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @pf.setter
    def pf(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def kvar(self) -> float:
        """
        DSS property name: kvar
        DSS property index: 6

        Specify the base kvar.  Alternative to specifying the power factor.  Side effect:  the power factor value is altered to agree based on present value of kW.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @kvar.setter
    def kvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def model(self) -> int:
        """
        DSS property name: model
        DSS property index: 7

        Integer code for the model to use for generation variation with voltage. Valid values are:

        1:Generator injects a constant kW at specified power factor.
        2:Generator is modeled as a constant admittance.
        3:Const kW, constant kV.  Somewhat like a conventional transmission power flow P-V generator.
        4:Const kW, Fixed Q (Q never varies)
        5:Const kW, Fixed Q(as a constant reactance)
        6:Compute load injection from User-written Model.(see usage of Xd, Xdp)
        7:Constant kW, kvar, but current-limited below Vminpu. Approximates a simple inverter. See also Balanced.
        """
        return self._lib.Obj_GetInt32(self._ptr, 7)

    @model.setter
    def model(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 7, value)

    @property
    def Vminpu(self) -> float:
        """
        DSS property name: Vminpu
        DSS property index: 8

        Default = 0.90.  Minimum per unit voltage for which the Model is assumed to apply. Below this value, the load model reverts to a constant impedance model. For model 7, the current is limited to the value computed for constant power at Vminpu.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @Vminpu.setter
    def Vminpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def Vmaxpu(self) -> float:
        """
        DSS property name: Vmaxpu
        DSS property index: 9

        Default = 1.10.  Maximum per unit voltage for which the Model is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @Vmaxpu.setter
    def Vmaxpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def yearly(self) -> str:
        """
        DSS property name: yearly
        DSS property index: 10

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, a constant value is assumed (no variation). If the generator is assumed to be ON continuously, specify Status=FIXED, or designate a curve that is 1.0 per unit at all times. Set to NONE to reset to no loadahape. Nominally for 8760 simulations.  If there are fewer points in the designated shape than the number of points in the solution, the curve is repeated.
        """
        return self._get_prop_string(10)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(10, value)
            return

        self._set_string(10, value)

    @property
    def yearly_obj(self) -> LoadShape:
        """
        DSS property name: yearly
        DSS property index: 10

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, a constant value is assumed (no variation). If the generator is assumed to be ON continuously, specify Status=FIXED, or designate a curve that is 1.0 per unit at all times. Set to NONE to reset to no loadahape. Nominally for 8760 simulations.  If there are fewer points in the designated shape than the number of points in the solution, the curve is repeated.
        """
        return self._get_obj(10, LoadShape)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_obj(10, value)

    @property
    def daily(self) -> str:
        """
        DSS property name: daily
        DSS property index: 11

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  If generator is assumed to be ON continuously, specify Status=FIXED, or designate a Loadshape objectthat is 1.0 perunit for all hours. Set to NONE to reset to no loadahape. 
        """
        return self._get_prop_string(11)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(11, value)
            return

        self._set_string(11, value)

    @property
    def daily_obj(self) -> LoadShape:
        """
        DSS property name: daily
        DSS property index: 11

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  If generator is assumed to be ON continuously, specify Status=FIXED, or designate a Loadshape objectthat is 1.0 perunit for all hours. Set to NONE to reset to no loadahape. 
        """
        return self._get_obj(11, LoadShape)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_obj(11, value)

    @property
    def duty(self) -> str:
        """
        DSS property name: duty
        DSS property index: 12

        Load shape to use for duty cycle dispatch simulations such as for wind generation. Must be previously defined as a Loadshape object. Typically would have time intervals less than 1 hr -- perhaps, in seconds. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_prop_string(12)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(12, value)
            return

        self._set_string(12, value)

    @property
    def duty_obj(self) -> LoadShape:
        """
        DSS property name: duty
        DSS property index: 12

        Load shape to use for duty cycle dispatch simulations such as for wind generation. Must be previously defined as a Loadshape object. Typically would have time intervals less than 1 hr -- perhaps, in seconds. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_obj(12, LoadShape)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_obj(12, value)

    @property
    def dispmode(self) -> GeneratorDispatchMode:
        """
        DSS property name: dispmode
        DSS property index: 13

        {Default* | Loadlevel | Price } Default = Default. Dispatch mode. In default mode, gen is either always on or follows dispatch curve as specified. Otherwise, the gen comes on when either the global default load level (Loadshape "default") or the price level exceeds the dispatch value.
        """
        return GeneratorDispatchMode(self._lib.Obj_GetInt32(self._ptr, 13))

    @dispmode.setter
    def dispmode(self, value: Union[AnyStr, int, GeneratorDispatchMode]):
        if not isinstance(value, int):
            self._set_string(13, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 13, value)

    @property
    def dispmode_str(self) -> str:
        """
        DSS property name: dispmode
        DSS property index: 13

        {Default* | Loadlevel | Price } Default = Default. Dispatch mode. In default mode, gen is either always on or follows dispatch curve as specified. Otherwise, the gen comes on when either the global default load level (Loadshape "default") or the price level exceeds the dispatch value.
        """
        return self._get_prop_string(13)

    @dispmode_str.setter
    def dispmode_str(self, value: AnyStr):
        self.dispmode = value

    @property
    def dispvalue(self) -> float:
        """
        DSS property name: dispvalue
        DSS property index: 14

        Dispatch value. 
        If = 0.0 (default) then Generator follow dispatch curves, if any. 
        If > 0  then Generator is ON only when either the price signal (in Price dispatch mode) exceeds this value or the active circuit load multiplier * "default" loadshape value * the default yearly growth factor exceeds this value.  Then the generator follows dispatch curves (duty, daily, or yearly), if any (see also Status).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @dispvalue.setter
    def dispvalue(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 15

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 15))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(15, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 15

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return self._get_prop_string(15)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def status(self) -> GeneratorStatus:
        """
        DSS property name: status
        DSS property index: 16

        ={Fixed | Variable*}.  If Fixed, then dispatch multipliers do not apply. The generator is alway at full power when it is ON.  Default is Variable  (follows curves).
        """
        return GeneratorStatus(self._lib.Obj_GetInt32(self._ptr, 16))

    @status.setter
    def status(self, value: Union[AnyStr, int, GeneratorStatus]):
        if not isinstance(value, int):
            self._set_string(16, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    @property
    def status_str(self) -> str:
        """
        DSS property name: status
        DSS property index: 16

        ={Fixed | Variable*}.  If Fixed, then dispatch multipliers do not apply. The generator is alway at full power when it is ON.  Default is Variable  (follows curves).
        """
        return self._get_prop_string(16)

    @status_str.setter
    def status_str(self, value: AnyStr):
        self.status = value

    @property
    def cls(self) -> int:
        """
        DSS property name: class
        DSS property index: 17

        An arbitrary integer number representing the class of Generator so that Generator values may be segregated by class.
        """
        return self._lib.Obj_GetInt32(self._ptr, 17)

    @cls.setter
    def cls(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 17, value)

    @property
    def Vpu(self) -> float:
        """
        DSS property name: Vpu
        DSS property index: 18

        Per Unit voltage set point for Model = 3  (typical power flow model).  Default is 1.0. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @Vpu.setter
    def Vpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def maxkvar(self) -> float:
        """
        DSS property name: maxkvar
        DSS property index: 19

        Maximum kvar limit for Model = 3.  Defaults to twice the specified load kvar.  Always reset this if you change PF or kvar properties.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @maxkvar.setter
    def maxkvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def minkvar(self) -> float:
        """
        DSS property name: minkvar
        DSS property index: 20

        Minimum kvar limit for Model = 3. Enter a negative number if generator can absorb vars. Defaults to negative of Maxkvar.  Always reset this if you change PF or kvar properties.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @minkvar.setter
    def minkvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def pvfactor(self) -> float:
        """
        DSS property name: pvfactor
        DSS property index: 21

        Deceleration factor for P-V generator model (Model=3).  Default is 0.1. If the circuit converges easily, you may want to use a higher number such as 1.0. Use a lower number if solution diverges. Use Debugtrace=yes to create a file that will trace the convergence of a generator model.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @pvfactor.setter
    def pvfactor(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def forceon(self) -> bool:
        """
        DSS property name: forceon
        DSS property index: 22

        {Yes | No}  Forces generator ON despite requirements of other dispatch modes. Stays ON until this property is set to NO, or an internal algorithm cancels the forced ON state.
        """
        return self._lib.Obj_GetInt32(self._ptr, 22) != 0

    @forceon.setter
    def forceon(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    @property
    def kVA(self) -> float:
        """
        DSS property name: kVA
        DSS property index: 23

        kVA rating of electrical machine. Defaults to 1.2* kW if not specified. Applied to machine or inverter definition for Dynamics mode solutions. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @kVA.setter
    def kVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def MVA(self) -> float:
        """
        DSS property name: MVA
        DSS property index: 24

        MVA rating of electrical machine.  Alternative to using kVA=.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @MVA.setter
    def MVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def Xd(self) -> float:
        """
        DSS property name: Xd
        DSS property index: 25

        Per unit synchronous reactance of machine. Presently used only for Thevinen impedance for power flow calcs of user models (model=6). Typically use a value 0.4 to 1.0. Default is 1.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @Xd.setter
    def Xd(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def Xdp(self) -> float:
        """
        DSS property name: Xdp
        DSS property index: 26

        Per unit transient reactance of the machine.  Used for Dynamics mode and Fault studies.  Default is 0.27.For user models, this value is used for the Thevinen/Norton impedance for Dynamics Mode.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @Xdp.setter
    def Xdp(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def Xdpp(self) -> float:
        """
        DSS property name: Xdpp
        DSS property index: 27

        Per unit subtransient reactance of the machine.  Used for Harmonics. Default is 0.20.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @Xdpp.setter
    def Xdpp(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def H(self) -> float:
        """
        DSS property name: H
        DSS property index: 28

        Per unit mass constant of the machine.  MW-sec/MVA.  Default is 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 28)

    @H.setter
    def H(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 28, value)

    @property
    def D(self) -> float:
        """
        DSS property name: D
        DSS property index: 29

        Damping constant.  Usual range is 0 to 4. Default is 1.0.  Adjust to get damping
        """
        return self._lib.Obj_GetFloat64(self._ptr, 29)

    @D.setter
    def D(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 29, value)

    @property
    def UserModel(self) -> str:
        """
        DSS property name: UserModel
        DSS property index: 30

        Name of DLL containing user-written model, which computes the terminal currents for Dynamics studies, overriding the default model.  Set to "none" to negate previous setting.
        """
        return self._get_prop_string(30)

    @UserModel.setter
    def UserModel(self, value: AnyStr):
        self._set_string(30, value)

    @property
    def UserData(self) -> str:
        """
        DSS property name: UserData
        DSS property index: 31

        String (in quotes or parentheses) that gets passed to user-written model for defining the data required for that model.
        """
        return self._get_prop_string(31)

    @UserData.setter
    def UserData(self, value: AnyStr):
        self._set_string(31, value)

    @property
    def ShaftModel(self) -> str:
        """
        DSS property name: ShaftModel
        DSS property index: 32

        Name of user-written DLL containing a Shaft model, which models the prime mover and determines the power on the shaft for Dynamics studies. Models additional mass elements other than the single-mass model in the DSS default model. Set to "none" to negate previous setting.
        """
        return self._get_prop_string(32)

    @ShaftModel.setter
    def ShaftModel(self, value: AnyStr):
        self._set_string(32, value)

    @property
    def ShaftData(self) -> str:
        """
        DSS property name: ShaftData
        DSS property index: 33

        String (in quotes or parentheses) that gets passed to user-written shaft dynamic model for defining the data for that model.
        """
        return self._get_prop_string(33)

    @ShaftData.setter
    def ShaftData(self, value: AnyStr):
        self._set_string(33, value)

    @property
    def DutyStart(self) -> float:
        """
        DSS property name: DutyStart
        DSS property index: 34

        Starting time offset [hours] into the duty cycle shape for this generator, defaults to 0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @DutyStart.setter
    def DutyStart(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def debugtrace(self) -> bool:
        """
        DSS property name: debugtrace
        DSS property index: 35

        {Yes | No }  Default is no.  Turn this on to capture the progress of the generator model for each iteration.  Creates a separate file for each generator named "GEN_name.CSV".
        """
        return self._lib.Obj_GetInt32(self._ptr, 35) != 0

    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 35, value)

    @property
    def Balanced(self) -> bool:
        """
        DSS property name: Balanced
        DSS property index: 36

        {Yes | No*} Default is No.  For Model=7, force balanced current only for 3-phase generators. Force zero- and negative-sequence to zero.
        """
        return self._lib.Obj_GetInt32(self._ptr, 36) != 0

    @Balanced.setter
    def Balanced(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 36, value)

    @property
    def XRdp(self) -> float:
        """
        DSS property name: XRdp
        DSS property index: 37

        Default is 20. X/R ratio for Xdp property for FaultStudy and Dynamic modes.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 37)

    @XRdp.setter
    def XRdp(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 37, value)

    @property
    def UseFuel(self) -> bool:
        """
        DSS property name: UseFuel
        DSS property index: 38

        {Yes | *No}. Activates the use of fuel for the operation of the generator. When the fuel level reaches the reserve level, the generator stops until it gets refueled. By default, the generator is connected to a continuous fuel supply, Use this mode to mimic dependency on fuel level for different generation technologies.
        """
        return self._lib.Obj_GetInt32(self._ptr, 38) != 0

    @UseFuel.setter
    def UseFuel(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 38, value)

    @property
    def FuelkWh(self) -> float:
        """
        DSS property name: FuelkWh
        DSS property index: 39

        {*0}Is the nominal level of fuel for the generator (kWh). It only applies if UseFuel = Yes/True
        """
        return self._lib.Obj_GetFloat64(self._ptr, 39)

    @FuelkWh.setter
    def FuelkWh(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 39, value)

    @property
    def pctFuel(self) -> float:
        """
        DSS property name: %Fuel
        DSS property index: 40

        It is a number between 0 and 100 representing the current amount of fuel avaiable in percentage of FuelkWh. It only applies if UseFuel = Yes/True
        """
        return self._lib.Obj_GetFloat64(self._ptr, 40)

    @pctFuel.setter
    def pctFuel(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 40, value)

    @property
    def pctReserve(self) -> float:
        """
        DSS property name: %Reserve
        DSS property index: 41

        It is a number between 0 and 100 representing the reserve level in percentage of FuelkWh. It only applies if UseFuel = Yes/True
        """
        return self._lib.Obj_GetFloat64(self._ptr, 41)

    @pctReserve.setter
    def pctReserve(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 41, value)

    def Refuel(self, value: bool):
        """
        DSS property name: Refuel
        DSS property index: 42

        It is a boolean value (Yes/True, No/False) that can be used to manually refuel the generator when needed. It only applies if UseFuel = Yes/True
        """
        self._lib.Obj_SetInt32(self._ptr, 42, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 43

        Name of harmonic voltage or current spectrum for this generator. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_prop_string(43)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(43, value)
            return

        self._set_string(43, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 43

        Name of harmonic voltage or current spectrum for this generator. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_obj(43, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(43, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 44

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 44)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 44, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 45

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 45) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 45, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 46

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(46, value)

class GenDispatcher(DSSObj):
    _cls_name = 'GenDispatcher'
    _cls_idx = 27
    _cls_prop_idx = {
        'element': 1,
        'terminal': 2,
        'kwlimit': 3,
        'kwband': 4,
        'kvarlimit': 5,
        'genlist': 6,
        'weights': 7,
        'basefreq': 8,
        'enabled': 9,
        'like': 10,
    }

    @property
    def Element(self) -> str:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_prop_string(1)

    @Element.setter
    def Element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def Element_obj(self) -> DSSObj:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_obj(1, None)

    @Element_obj.setter
    def Element_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def Terminal(self) -> int:
        """
        DSS property name: Terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the GenDispatcher control is connected. 1 or 2, typically.  Default is 1. Make sure you have the direction on the power matching the sign of kWLimit.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @Terminal.setter
    def Terminal(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def kWLimit(self) -> float:
        """
        DSS property name: kWLimit
        DSS property index: 3

        kW Limit for the monitored element. The generators are dispatched to hold the power in band.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kWLimit.setter
    def kWLimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def kWBand(self) -> float:
        """
        DSS property name: kWBand
        DSS property index: 4

        Bandwidth (kW) of the dead band around the target limit.No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kWBand.setter
    def kWBand(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def kvarlimit(self) -> float:
        """
        DSS property name: kvarlimit
        DSS property index: 5

        Max kvar to be delivered through the element.  Uses same dead band as kW.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kvarlimit.setter
    def kvarlimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def GenList(self) -> List[str]:
        """
        DSS property name: GenList
        DSS property index: 6

        Array list of generators to be dispatched.  If not specified, all generators in the circuit are assumed dispatchable.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 6)

    @GenList.setter
    def GenList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 6, value_ptr, value_count)
        self._check_for_error()

    @property
    def Weights(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Weights
        DSS property index: 7

        GenDispatcher.Weights
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @Weights.setter
    def Weights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 8

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 9

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 9) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 9, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 10

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(10, value)

class Storage(DSSObj):
    _cls_name = 'Storage'
    _cls_idx = 28
    _cls_prop_idx = {
        'phases': 1,
        'bus1': 2,
        'kv': 3,
        'conn': 4,
        'kw': 5,
        'kvar': 6,
        'pf': 7,
        'kva': 8,
        'pctcutin': 9,
        '%cutin': 9,
        'pctcutout': 10,
        '%cutout': 10,
        'effcurve': 11,
        'varfollowinverter': 12,
        'kvarmax': 13,
        'kvarmaxabs': 14,
        'wattpriority': 15,
        'pfpriority': 16,
        'pctpminnovars': 17,
        '%pminnovars': 17,
        'pctpminkvarmax': 18,
        '%pminkvarmax': 18,
        'kwrated': 19,
        'pctkwrated': 20,
        '%kwrated': 20,
        'kwhrated': 21,
        'kwhstored': 22,
        'pctstored': 23,
        '%stored': 23,
        'pctreserve': 24,
        '%reserve': 24,
        'state': 25,
        'pctdischarge': 26,
        '%discharge': 26,
        'pctcharge': 27,
        '%charge': 27,
        'pcteffcharge': 28,
        '%effcharge': 28,
        'pcteffdischarge': 29,
        '%effdischarge': 29,
        'pctidlingkw': 30,
        '%idlingkw': 30,
        'pctr': 31,
        '%r': 31,
        'pctx': 32,
        '%x': 32,
        'model': 33,
        'vminpu': 34,
        'vmaxpu': 35,
        'balanced': 36,
        'limitcurrent': 37,
        'yearly': 38,
        'daily': 39,
        'duty': 40,
        'dispmode': 41,
        'dischargetrigger': 42,
        'chargetrigger': 43,
        'timechargetrig': 44,
        'cls': 45,
        'class': 45,
        'dynadll': 46,
        'dynadata': 47,
        'usermodel': 48,
        'userdata': 49,
        'debugtrace': 50,
        'spectrum': 51,
        'basefreq': 52,
        'enabled': 53,
        'like': 54,
    }

    # Class-specific enumerations
    class StorageState(IntEnum):
        """Storage: State (DSS enumeration for Storage)"""
        Charging = -1 # Charging
        Idling = 0 # Idling
        Discharging = 1 # Discharging

    class StorageDispatchMode(IntEnum):
        """Storage: Dispatch Mode (DSS enumeration for Storage)"""
        Default = 0 # Default
        LoadLevel = 1 # LoadLevel
        Price = 2 # Price
        External = 3 # External
        Follow = 4 # Follow


    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this Storage element.  Power is evenly divided among phases.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the Storage element is connected.  May include specific node specification.
        """
        return self._get_prop_string(2)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def kv(self) -> float:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for Storage element. For 2- and 3-phase Storage elements, specify phase-phase kV. Otherwise, specify actual kV across each branch of the Storage element. 

        If wye (star), specify phase-neutral kV. 

        If delta or phase-phase connected, specify phase-phase kV.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kv.setter
    def kv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 4

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 4))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(4, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 4

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return self._get_prop_string(4)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kW(self) -> float:
        """
        DSS property name: kW
        DSS property index: 5

        Get/set the requested kW value. Final kW is subjected to the inverter ratings. A positive value denotes power coming OUT of the element, which is the opposite of a Load element. A negative value indicates the Storage element is in Charging state. This value is modified internally depending on the dispatch mode.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kW.setter
    def kW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def kvar(self) -> float:
        """
        DSS property name: kvar
        DSS property index: 6

        Get/set the requested kvar value. Final kvar is subjected to the inverter ratings. Sets inverter to operate in constant kvar mode.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @kvar.setter
    def kvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def pf(self) -> float:
        """
        DSS property name: pf
        DSS property index: 7

        Get/set the requested PF value. Final PF is subjected to the inverter ratings. Sets inverter to operate in constant PF mode. Nominally, the power factor for discharging (acting as a generator). Default is 1.0. 

        Enter negative for leading power factor (when kW and kvar have opposite signs.)

        A positive power factor signifies kw and kvar at the same direction.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @pf.setter
    def pf(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def kVA(self) -> float:
        """
        DSS property name: kVA
        DSS property index: 8

        Indicates the inverter nameplate capability (in kVA). Used as the base for Dynamics mode and Harmonics mode values.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @kVA.setter
    def kVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def pctCutin(self) -> float:
        """
        DSS property name: %Cutin
        DSS property index: 9

        Cut-in power as a percentage of inverter kVA rating. It is the minimum DC power necessary to turn the inverter ON when it is OFF. Must be greater than or equal to %CutOut. Defaults to 2 for PVSystems and 0 for Storage elements which means that the inverter state will be always ON for this element.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @pctCutin.setter
    def pctCutin(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def pctCutout(self) -> float:
        """
        DSS property name: %Cutout
        DSS property index: 10

        Cut-out power as a percentage of inverter kVA rating. It is the minimum DC power necessary to keep the inverter ON. Must be less than or equal to %CutIn. Defaults to 0, which means that, once ON, the inverter state will be always ON for this element.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @pctCutout.setter
    def pctCutout(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def EffCurve(self) -> str:
        """
        DSS property name: EffCurve
        DSS property index: 11

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Power at the AC side of the inverter is discounted by the multiplier obtained from this curve.
        """
        return self._get_prop_string(11)

    @EffCurve.setter
    def EffCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(11, value)
            return

        self._set_string(11, value)

    @property
    def EffCurve_obj(self) -> XYcurve:
        """
        DSS property name: EffCurve
        DSS property index: 11

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Power at the AC side of the inverter is discounted by the multiplier obtained from this curve.
        """
        return self._get_obj(11, XYcurve)

    @EffCurve_obj.setter
    def EffCurve_obj(self, value: XYcurve):
        self._set_obj(11, value)

    @property
    def VarFollowInverter(self) -> bool:
        """
        DSS property name: VarFollowInverter
        DSS property index: 12

        Boolean variable (Yes|No) or (True|False). Defaults to False, which indicates that the reactive power generation/absorption does not respect the inverter status.When set to True, the reactive power generation/absorption will cease when the inverter status is off, due to DC kW dropping below %CutOut.  The reactive power generation/absorption will begin again when the DC kW is above %CutIn.  When set to False, the Storage will generate/absorb reactive power regardless of the status of the inverter.
        """
        return self._lib.Obj_GetInt32(self._ptr, 12) != 0

    @VarFollowInverter.setter
    def VarFollowInverter(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    @property
    def kvarMax(self) -> float:
        """
        DSS property name: kvarMax
        DSS property index: 13

        Indicates the maximum reactive power GENERATION (un-signed numerical variable in kvar) for the inverter. Defaults to kVA rating of the inverter.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @kvarMax.setter
    def kvarMax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def kvarMaxAbs(self) -> float:
        """
        DSS property name: kvarMaxAbs
        DSS property index: 14

        Indicates the maximum reactive power ABSORPTION (un-signed numerical variable in kvar) for the inverter. Defaults to kvarMax.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @kvarMaxAbs.setter
    def kvarMaxAbs(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def WattPriority(self) -> bool:
        """
        DSS property name: WattPriority
        DSS property index: 15

        {Yes/No*/True/False} Set inverter to watt priority instead of the default var priority.
        """
        return self._lib.Obj_GetInt32(self._ptr, 15) != 0

    @WattPriority.setter
    def WattPriority(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def PFPriority(self) -> bool:
        """
        DSS property name: PFPriority
        DSS property index: 16

        If set to true, priority is given to power factor and WattPriority is neglected. It works only if operating in either constant PF or constant kvar modes. Defaults to False.
        """
        return self._lib.Obj_GetInt32(self._ptr, 16) != 0

    @PFPriority.setter
    def PFPriority(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    @property
    def pctPminNoVars(self) -> float:
        """
        DSS property name: %PminNoVars
        DSS property index: 17

        Minimum active power as percentage of kWrated under which there is no vars production/absorption. Defaults to 0 (disabled).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @pctPminNoVars.setter
    def pctPminNoVars(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def pctPminkvarMax(self) -> float:
        """
        DSS property name: %PminkvarMax
        DSS property index: 18

        Minimum active power as percentage of kWrated that allows the inverter to produce/absorb reactive power up to its maximum reactive power, which can be either kvarMax or kvarMaxAbs, depending on the current operation quadrant. Defaults to 0 (disabled).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @pctPminkvarMax.setter
    def pctPminkvarMax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def kWrated(self) -> float:
        """
        DSS property name: kWrated
        DSS property index: 19

        kW rating of power output. Base for Loadshapes when DispMode=Follow. Sets kVA property if it has not been specified yet. Defaults to 25.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @kWrated.setter
    def kWrated(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def pctkWrated(self) -> float:
        """
        DSS property name: %kWrated
        DSS property index: 20

        Upper limit on active power as a percentage of kWrated. Defaults to 100 (disabled).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @pctkWrated.setter
    def pctkWrated(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def kWhrated(self) -> float:
        """
        DSS property name: kWhrated
        DSS property index: 21

        Rated Storage capacity in kWh. Default is 50.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @kWhrated.setter
    def kWhrated(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def kWhstored(self) -> float:
        """
        DSS property name: kWhstored
        DSS property index: 22

        Present amount of energy stored, kWh. Default is same as kWhrated.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @kWhstored.setter
    def kWhstored(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def pctstored(self) -> float:
        """
        DSS property name: %stored
        DSS property index: 23

        Present amount of energy stored, % of rated kWh. Default is 100.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @pctstored.setter
    def pctstored(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def pctreserve(self) -> float:
        """
        DSS property name: %reserve
        DSS property index: 24

        Percentage of rated kWh Storage capacity to be held in reserve for normal operation. Default = 20. 
        This is treated as the minimum energy discharge level unless there is an emergency. For emergency operation set this property lower. Cannot be less than zero.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @pctreserve.setter
    def pctreserve(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def State(self) -> StorageState:
        """
        DSS property name: State
        DSS property index: 25

        {IDLING | CHARGING | DISCHARGING}  Get/Set present operational state. In DISCHARGING mode, the Storage element acts as a generator and the kW property is positive. The element continues discharging at the scheduled output power level until the Storage reaches the reserve value. Then the state reverts to IDLING. In the CHARGING state, the Storage element behaves like a Load and the kW property is negative. The element continues to charge until the max Storage kWh is reached and then switches to IDLING state. In IDLING state, the element draws the idling losses plus the associated inverter losses.
        """
        return StorageState(self._lib.Obj_GetInt32(self._ptr, 25))

    @State.setter
    def State(self, value: Union[AnyStr, int, StorageState]):
        if not isinstance(value, int):
            self._set_string(25, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 25, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 25

        {IDLING | CHARGING | DISCHARGING}  Get/Set present operational state. In DISCHARGING mode, the Storage element acts as a generator and the kW property is positive. The element continues discharging at the scheduled output power level until the Storage reaches the reserve value. Then the state reverts to IDLING. In the CHARGING state, the Storage element behaves like a Load and the kW property is negative. The element continues to charge until the max Storage kWh is reached and then switches to IDLING state. In IDLING state, the element draws the idling losses plus the associated inverter losses.
        """
        return self._get_prop_string(25)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def pctDischarge(self) -> float:
        """
        DSS property name: %Discharge
        DSS property index: 26

        Discharge rate (output power) in percentage of rated kW. Default = 100.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @pctDischarge.setter
    def pctDischarge(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def pctCharge(self) -> float:
        """
        DSS property name: %Charge
        DSS property index: 27

        Charging rate (input power) in percentage of rated kW. Default = 100.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @pctCharge.setter
    def pctCharge(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def pctEffCharge(self) -> float:
        """
        DSS property name: %EffCharge
        DSS property index: 28

        Percentage efficiency for CHARGING the Storage element. Default = 90.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 28)

    @pctEffCharge.setter
    def pctEffCharge(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 28, value)

    @property
    def pctEffDischarge(self) -> float:
        """
        DSS property name: %EffDischarge
        DSS property index: 29

        Percentage efficiency for DISCHARGING the Storage element. Default = 90.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 29)

    @pctEffDischarge.setter
    def pctEffDischarge(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 29, value)

    @property
    def pctIdlingkW(self) -> float:
        """
        DSS property name: %IdlingkW
        DSS property index: 30

        Percentage of rated kW consumed by idling losses. Default = 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 30)

    @pctIdlingkW.setter
    def pctIdlingkW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 30, value)

    @property
    def pctR(self) -> float:
        """
        DSS property name: %R
        DSS property index: 31

        Equivalent percentage internal resistance, ohms. Default is 0. Placed in series with internal voltage source for harmonics and dynamics modes. Use a combination of %IdlingkW, %EffCharge and %EffDischarge to account for losses in power flow modes.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 31)

    @pctR.setter
    def pctR(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 31, value)

    @property
    def pctX(self) -> float:
        """
        DSS property name: %X
        DSS property index: 32

        Equivalent percentage internal reactance, ohms. Default is 50%. Placed in series with internal voltage source for harmonics and dynamics modes. (Limits fault current to 2 pu.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 32)

    @pctX.setter
    def pctX(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 32, value)

    @property
    def model(self) -> int:
        """
        DSS property name: model
        DSS property index: 33

        Integer code (default=1) for the model to be used for power output variation with voltage. Valid values are:

        1:Storage element injects/absorbs a CONSTANT power.
        2:Storage element is modeled as a CONSTANT IMPEDANCE.
        3:Compute load injection from User-written Model.
        """
        return self._lib.Obj_GetInt32(self._ptr, 33)

    @model.setter
    def model(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 33, value)

    @property
    def Vminpu(self) -> float:
        """
        DSS property name: Vminpu
        DSS property index: 34

        Default = 0.90.  Minimum per unit voltage for which the Model is assumed to apply. Below this value, the load model reverts to a constant impedance model.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @Vminpu.setter
    def Vminpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def Vmaxpu(self) -> float:
        """
        DSS property name: Vmaxpu
        DSS property index: 35

        Default = 1.10.  Maximum per unit voltage for which the Model is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 35)

    @Vmaxpu.setter
    def Vmaxpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 35, value)

    @property
    def Balanced(self) -> bool:
        """
        DSS property name: Balanced
        DSS property index: 36

        {Yes | No*} Default is No. Force balanced current only for 3-phase Storage. Forces zero- and negative-sequence to zero. 
        """
        return self._lib.Obj_GetInt32(self._ptr, 36) != 0

    @Balanced.setter
    def Balanced(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 36, value)

    @property
    def LimitCurrent(self) -> bool:
        """
        DSS property name: LimitCurrent
        DSS property index: 37

        Limits current magnitude to Vminpu value for both 1-phase and 3-phase Storage similar to Generator Model 7. For 3-phase, limits the positive-sequence current but not the negative-sequence.
        """
        return self._lib.Obj_GetInt32(self._ptr, 37) != 0

    @LimitCurrent.setter
    def LimitCurrent(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 37, value)

    @property
    def yearly(self) -> str:
        """
        DSS property name: yearly
        DSS property index: 38

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_prop_string(38)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(38, value)
            return

        self._set_string(38, value)

    @property
    def yearly_obj(self) -> LoadShape:
        """
        DSS property name: yearly
        DSS property index: 38

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_obj(38, LoadShape)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_obj(38, value)

    @property
    def daily(self) -> str:
        """
        DSS property name: daily
        DSS property index: 39

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_prop_string(39)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(39, value)
            return

        self._set_string(39, value)

    @property
    def daily_obj(self) -> LoadShape:
        """
        DSS property name: daily
        DSS property index: 39

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_obj(39, LoadShape)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_obj(39, value)

    @property
    def duty(self) -> str:
        """
        DSS property name: duty
        DSS property index: 40

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. 

        Typically would have time intervals of 1-5 seconds. 

        Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_prop_string(40)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(40, value)
            return

        self._set_string(40, value)

    @property
    def duty_obj(self) -> LoadShape:
        """
        DSS property name: duty
        DSS property index: 40

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. 

        Typically would have time intervals of 1-5 seconds. 

        Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_obj(40, LoadShape)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_obj(40, value)

    @property
    def DispMode(self) -> StorageDispatchMode:
        """
        DSS property name: DispMode
        DSS property index: 41

        {DEFAULT | FOLLOW | EXTERNAL | LOADLEVEL | PRICE } Default = "DEFAULT". Dispatch mode. 

        In DEFAULT mode, Storage element state is triggered to discharge or charge at the specified rate by the loadshape curve corresponding to the solution mode. 

        In FOLLOW mode the kW output of the Storage element follows the active loadshape multiplier until Storage is either exhausted or full. The element discharges for positive values and charges for negative values.  The loadshape is based on rated kW. 

        In EXTERNAL mode, Storage element state is controlled by an external Storagecontroller2. This mode is automatically set if this Storage element is included in the element list of a StorageController element. 

        For the other two dispatch modes, the Storage element state is controlled by either the global default Loadlevel value or the price level. 
        """
        return StorageDispatchMode(self._lib.Obj_GetInt32(self._ptr, 41))

    @DispMode.setter
    def DispMode(self, value: Union[AnyStr, int, StorageDispatchMode]):
        if not isinstance(value, int):
            self._set_string(41, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 41, value)

    @property
    def DispMode_str(self) -> str:
        """
        DSS property name: DispMode
        DSS property index: 41

        {DEFAULT | FOLLOW | EXTERNAL | LOADLEVEL | PRICE } Default = "DEFAULT". Dispatch mode. 

        In DEFAULT mode, Storage element state is triggered to discharge or charge at the specified rate by the loadshape curve corresponding to the solution mode. 

        In FOLLOW mode the kW output of the Storage element follows the active loadshape multiplier until Storage is either exhausted or full. The element discharges for positive values and charges for negative values.  The loadshape is based on rated kW. 

        In EXTERNAL mode, Storage element state is controlled by an external Storagecontroller2. This mode is automatically set if this Storage element is included in the element list of a StorageController element. 

        For the other two dispatch modes, the Storage element state is controlled by either the global default Loadlevel value or the price level. 
        """
        return self._get_prop_string(41)

    @DispMode_str.setter
    def DispMode_str(self, value: AnyStr):
        self.DispMode = value

    @property
    def DischargeTrigger(self) -> float:
        """
        DSS property name: DischargeTrigger
        DSS property index: 42

        Dispatch trigger value for discharging the Storage. 
        If = 0.0 the Storage element state is changed by the State command or by a StorageController2 object. 
        If <> 0  the Storage element state is set to DISCHARGING when this trigger level is EXCEEDED by either the specified Loadshape curve value or the price signal or global Loadlevel value, depending on dispatch mode. See State property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 42)

    @DischargeTrigger.setter
    def DischargeTrigger(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 42, value)

    @property
    def ChargeTrigger(self) -> float:
        """
        DSS property name: ChargeTrigger
        DSS property index: 43

        Dispatch trigger value for charging the Storage. 

        If = 0.0 the Storage element state is changed by the State command or StorageController2 object.  

        If <> 0  the Storage element state is set to CHARGING when this trigger level is GREATER than either the specified Loadshape curve value or the price signal or global Loadlevel value, depending on dispatch mode. See State property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 43)

    @ChargeTrigger.setter
    def ChargeTrigger(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 43, value)

    @property
    def TimeChargeTrig(self) -> float:
        """
        DSS property name: TimeChargeTrig
        DSS property index: 44

        Time of day in fractional hours (0230 = 2.5) at which Storage element will automatically go into charge state. Default is 2.0.  Enter a negative time value to disable this feature.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 44)

    @TimeChargeTrig.setter
    def TimeChargeTrig(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 44, value)

    @property
    def cls(self) -> int:
        """
        DSS property name: class
        DSS property index: 45

        An arbitrary integer number representing the class of Storage element so that Storage values may be segregated by class.
        """
        return self._lib.Obj_GetInt32(self._ptr, 45)

    @cls.setter
    def cls(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 45, value)

    @property
    def DynaDLL(self) -> str:
        """
        DSS property name: DynaDLL
        DSS property index: 46

        Name of DLL containing user-written dynamics model, which computes the terminal currents for Dynamics-mode simulations, overriding the default model.  Set to "none" to negate previous setting. This DLL has a simpler interface than the UserModel DLL and is only used for Dynamics mode.
        """
        return self._get_prop_string(46)

    @DynaDLL.setter
    def DynaDLL(self, value: AnyStr):
        self._set_string(46, value)

    @property
    def DynaData(self) -> str:
        """
        DSS property name: DynaData
        DSS property index: 47

        String (in quotes or parentheses if necessary) that gets passed to the user-written dynamics model Edit function for defining the data required for that model.
        """
        return self._get_prop_string(47)

    @DynaData.setter
    def DynaData(self, value: AnyStr):
        self._set_string(47, value)

    @property
    def UserModel(self) -> str:
        """
        DSS property name: UserModel
        DSS property index: 48

        Name of DLL containing user-written model, which computes the terminal currents for both power flow and dynamics, overriding the default model.  Set to "none" to negate previous setting.
        """
        return self._get_prop_string(48)

    @UserModel.setter
    def UserModel(self, value: AnyStr):
        self._set_string(48, value)

    @property
    def UserData(self) -> str:
        """
        DSS property name: UserData
        DSS property index: 49

        String (in quotes or parentheses) that gets passed to user-written model for defining the data required for that model.
        """
        return self._get_prop_string(49)

    @UserData.setter
    def UserData(self, value: AnyStr):
        self._set_string(49, value)

    @property
    def debugtrace(self) -> bool:
        """
        DSS property name: debugtrace
        DSS property index: 50

        {Yes | No }  Default is no.  Turn this on to capture the progress of the Storage model for each iteration.  Creates a separate file for each Storage element named "Storage_name.CSV".
        """
        return self._lib.Obj_GetInt32(self._ptr, 50) != 0

    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 50, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 51

        Name of harmonic voltage or current spectrum for this Storage element. Current injection is assumed for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_prop_string(51)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(51, value)
            return

        self._set_string(51, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 51

        Name of harmonic voltage or current spectrum for this Storage element. Current injection is assumed for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_obj(51, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(51, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 52

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 52)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 52, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 53

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 53) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 53, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 54

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(54, value)

class StorageController(DSSObj):
    _cls_name = 'StorageController'
    _cls_idx = 29
    _cls_prop_idx = {
        'element': 1,
        'terminal': 2,
        'monphase': 3,
        'kwtarget': 4,
        'kwtargetlow': 5,
        'pctkwband': 6,
        '%kwband': 6,
        'kwband': 7,
        'pctkwbandlow': 8,
        '%kwbandlow': 8,
        'kwbandlow': 9,
        'elementlist': 10,
        'weights': 11,
        'modedischarge': 12,
        'modecharge': 13,
        'timedischargetrigger': 14,
        'timechargetrigger': 15,
        'pctratekw': 16,
        '%ratekw': 16,
        'pctratecharge': 17,
        '%ratecharge': 17,
        'pctreserve': 18,
        '%reserve': 18,
        'kwhtotal': 19,
        'kwtotal': 20,
        'kwhactual': 21,
        'kwactual': 22,
        'kwneed': 23,
        'yearly': 24,
        'daily': 25,
        'duty': 26,
        'eventlog': 27,
        'inhibittime': 28,
        'tup': 29,
        'tflat': 30,
        'tdn': 31,
        'kwthreshold': 32,
        'dispfactor': 33,
        'resetlevel': 34,
        'seasons': 35,
        'seasontargets': 36,
        'seasontargetslow': 37,
        'basefreq': 38,
        'enabled': 39,
        'like': 40,
    }

    # Class-specific enumerations
    class StorageControllerDischargemode(IntEnum):
        """StorageController: Discharge mode (DSS enumeration for StorageController)"""
        Peakshave = 5 # Peakshave
        Follow = 1 # Follow
        Support = 3 # Support
        Loadshape = 2 # Loadshape
        Time = 4 # Time
        Schedule = 6 # Schedule
        I_Peakshave = 8 # I-Peakshave

    class StorageControllerChargemode(IntEnum):
        """StorageController: Charge mode (DSS enumeration for StorageController)"""
        Loadshape = 2 # Loadshape
        Time = 4 # Time
        PeakshaveLow = 7 # PeakshaveLow
        I_PeakshaveLow = 9 # I-PeakshaveLow


    @property
    def Element(self) -> str:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; Must be specified.
        """
        return self._get_prop_string(1)

    @Element.setter
    def Element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def Element_obj(self) -> DSSObj:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; Must be specified.
        """
        return self._get_obj(1, None)

    @Element_obj.setter
    def Element_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def Terminal(self) -> int:
        """
        DSS property name: Terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the StorageController2 control is connected. 1 or 2, typically.  Default is 1. Make sure to select the proper direction on the power for the respective dispatch mode.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @Terminal.setter
    def Terminal(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def MonPhase(self) -> Union[MonitoredPhase, int]:
        """
        DSS property name: MonPhase
        DSS property index: 3

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=MAX. Must be less than the number of phases. Used in PeakShave, Follow, Support and I-PeakShave discharging modes and in PeakShaveLow, I-PeakShaveLow charging modes. For modes based on active power measurements, the value used by the control is the monitored one multiplied by the number of phases of the monitored element.
        """
        value = self._lib.Obj_GetInt32(self._ptr, 3)
        if value > 0:
            return value
    
        return MonitoredPhase(value)

    @MonPhase.setter
    def MonPhase(self, value: Union[AnyStr, int, MonitoredPhase]):
        if not isinstance(value, int):
            self._set_string(3, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def MonPhase_str(self) -> str:
        """
        DSS property name: MonPhase
        DSS property index: 3

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=MAX. Must be less than the number of phases. Used in PeakShave, Follow, Support and I-PeakShave discharging modes and in PeakShaveLow, I-PeakShaveLow charging modes. For modes based on active power measurements, the value used by the control is the monitored one multiplied by the number of phases of the monitored element.
        """
        return self._get_prop_string(3)

    @MonPhase_str.setter
    def MonPhase_str(self, value: AnyStr):
        self.MonPhase = value

    @property
    def kWTarget(self) -> float:
        """
        DSS property name: kWTarget
        DSS property index: 4

        kW/kamps target for Discharging. The Storage element fleet is dispatched to try to hold the power/current in band at least until the Storage is depleted. The selection of power or current depends on the Discharge mode (PeakShave->kW, I-PeakShave->kamps).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kWTarget.setter
    def kWTarget(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def kWTargetLow(self) -> float:
        """
        DSS property name: kWTargetLow
        DSS property index: 5

        kW/kamps target for Charging. The Storage element fleet is dispatched to try to hold the power/current in band at least until the Storage is fully charged. The selection of power or current depends on the charge mode (PeakShavelow->kW, I-PeakShavelow->kamps).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kWTargetLow.setter
    def kWTargetLow(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def pctkWBand(self) -> float:
        """
        DSS property name: %kWBand
        DSS property index: 6

        Bandwidth (% of Target kW/kamps) of the dead band around the kW/kamps target value. Default is 2% (+/-1%).No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @pctkWBand.setter
    def pctkWBand(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def kWBand(self) -> float:
        """
        DSS property name: kWBand
        DSS property index: 7

        Alternative way of specifying the bandwidth. (kW/kamps) of the dead band around the kW/kamps target value. Default is 2% of kWTarget (+/-1%).No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @kWBand.setter
    def kWBand(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def pctkWBandLow(self) -> float:
        """
        DSS property name: %kWBandLow
        DSS property index: 8

        Bandwidth (% of kWTargetLow) of the dead band around the kW/kamps low target value. Default is 2% (+/-1%).No charging is attempted if the power in the monitored terminal stays within this band.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @pctkWBandLow.setter
    def pctkWBandLow(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def kWBandLow(self) -> float:
        """
        DSS property name: kWBandLow
        DSS property index: 9

        Alternative way of specifying the bandwidth. (kW/kamps) of the dead band around the kW/kamps low target value. Default is 2% of kWTargetLow (+/-1%).No charging is attempted if the power in the monitored terminal stays within this band.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @kWBandLow.setter
    def kWBandLow(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def ElementList(self) -> List[str]:
        """
        DSS property name: ElementList
        DSS property index: 10

        Array list of Storage elements to be controlled.  If not specified, all Storage elements in the circuit not presently dispatched by another controller are assumed dispatched by this controller.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 10)

    @ElementList.setter
    def ElementList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 10, value_ptr, value_count)
        self._check_for_error()

    @property
    def Weights(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Weights
        DSS property index: 11

        Array of proportional weights corresponding to each Storage element in the ElementList. The needed kW or kvar to get back to center band is dispatched to each Storage element according to these weights. Default is to set all weights to 1.0.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 11)

    @Weights.setter
    def Weights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def ModeDischarge(self) -> StorageControllerDischargemode:
        """
        DSS property name: ModeDischarge
        DSS property index: 12

        {PeakShave* | Follow | Support | Loadshape | Time | Schedule | I-PeakShave} Mode of operation for the DISCHARGE FUNCTION of this controller. 

        In PeakShave mode (Default), the control attempts to discharge Storage to keep power in the monitored element below the kWTarget. 

        In Follow mode, the control is triggered by time and resets the kWTarget value to the present monitored element power. It then attempts to discharge Storage to keep power in the monitored element below the new kWTarget. See TimeDischargeTrigger.

        In Support mode, the control operates oppositely of PeakShave mode: Storage is discharged to keep kW power output up near the target. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is discharged when the loadshape value is positive. 

        In Time mode, the Storage discharge is turned on at the specified %RatekW at the specified discharge trigger time in fractional hours.

        In Schedule mode, the Tup, TFlat, and Tdn properties specify the up ramp duration, flat duration, and down ramp duration for the schedule. The schedule start time is set by TimeDischargeTrigger and the rate of discharge for the flat part is determined by %RatekW.

        In I-PeakShave mode, the control attempts to discharge Storage to keep current in the monitored element below the target given in k-amps (thousands of amps), when this control mode is active, the property kWTarget will be expressed in k-amps. 
        """
        return StorageControllerDischargemode(self._lib.Obj_GetInt32(self._ptr, 12))

    @ModeDischarge.setter
    def ModeDischarge(self, value: Union[AnyStr, int, StorageControllerDischargemode]):
        if not isinstance(value, int):
            self._set_string(12, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    @property
    def ModeDischarge_str(self) -> str:
        """
        DSS property name: ModeDischarge
        DSS property index: 12

        {PeakShave* | Follow | Support | Loadshape | Time | Schedule | I-PeakShave} Mode of operation for the DISCHARGE FUNCTION of this controller. 

        In PeakShave mode (Default), the control attempts to discharge Storage to keep power in the monitored element below the kWTarget. 

        In Follow mode, the control is triggered by time and resets the kWTarget value to the present monitored element power. It then attempts to discharge Storage to keep power in the monitored element below the new kWTarget. See TimeDischargeTrigger.

        In Support mode, the control operates oppositely of PeakShave mode: Storage is discharged to keep kW power output up near the target. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is discharged when the loadshape value is positive. 

        In Time mode, the Storage discharge is turned on at the specified %RatekW at the specified discharge trigger time in fractional hours.

        In Schedule mode, the Tup, TFlat, and Tdn properties specify the up ramp duration, flat duration, and down ramp duration for the schedule. The schedule start time is set by TimeDischargeTrigger and the rate of discharge for the flat part is determined by %RatekW.

        In I-PeakShave mode, the control attempts to discharge Storage to keep current in the monitored element below the target given in k-amps (thousands of amps), when this control mode is active, the property kWTarget will be expressed in k-amps. 
        """
        return self._get_prop_string(12)

    @ModeDischarge_str.setter
    def ModeDischarge_str(self, value: AnyStr):
        self.ModeDischarge = value

    @property
    def ModeCharge(self) -> StorageControllerChargemode:
        """
        DSS property name: ModeCharge
        DSS property index: 13

        {Loadshape | Time* | PeakShaveLow | I-PeakShaveLow} Mode of operation for the CHARGE FUNCTION of this controller. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is charged when the loadshape value is negative. 

        In Time mode, the Storage charging FUNCTION is triggered at the specified %RateCharge at the specified charge trigger time in fractional hours.

        In PeakShaveLow mode, the charging operation will charge the Storage fleet when the power at amonitored element is below a specified KW target (kWTarget_low). The Storage will charge as much power as necessary to keep the power within the deadband around kWTarget_low.

        In I-PeakShaveLow mode, the charging operation will charge the Storage fleet when the current (Amps) at amonitored element is below a specified amps target (kWTarget_low). The Storage will charge as much power as necessary to keep the amps within the deadband around kWTarget_low. When this control mode is active, the property kWTarget_low will be expressed in k-amps and all the other parameters will be adjusted to match the amps (current) control criteria.
        """
        return StorageControllerChargemode(self._lib.Obj_GetInt32(self._ptr, 13))

    @ModeCharge.setter
    def ModeCharge(self, value: Union[AnyStr, int, StorageControllerChargemode]):
        if not isinstance(value, int):
            self._set_string(13, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 13, value)

    @property
    def ModeCharge_str(self) -> str:
        """
        DSS property name: ModeCharge
        DSS property index: 13

        {Loadshape | Time* | PeakShaveLow | I-PeakShaveLow} Mode of operation for the CHARGE FUNCTION of this controller. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is charged when the loadshape value is negative. 

        In Time mode, the Storage charging FUNCTION is triggered at the specified %RateCharge at the specified charge trigger time in fractional hours.

        In PeakShaveLow mode, the charging operation will charge the Storage fleet when the power at amonitored element is below a specified KW target (kWTarget_low). The Storage will charge as much power as necessary to keep the power within the deadband around kWTarget_low.

        In I-PeakShaveLow mode, the charging operation will charge the Storage fleet when the current (Amps) at amonitored element is below a specified amps target (kWTarget_low). The Storage will charge as much power as necessary to keep the amps within the deadband around kWTarget_low. When this control mode is active, the property kWTarget_low will be expressed in k-amps and all the other parameters will be adjusted to match the amps (current) control criteria.
        """
        return self._get_prop_string(13)

    @ModeCharge_str.setter
    def ModeCharge_str(self, value: AnyStr):
        self.ModeCharge = value

    @property
    def TimeDischargeTrigger(self) -> float:
        """
        DSS property name: TimeDischargeTrigger
        DSS property index: 14

        Default time of day (hr) for initiating Discharging of the fleet. During Follow or Time mode discharging is triggered at a fixed time each day at this hour. If Follow mode, Storage will be discharged to attempt to hold the load at or below the power level at the time of triggering. In Time mode, the discharge is based on the %RatekW property value. Set this to a negative value to ignore. Default is 12.0 for Follow mode; otherwise it is -1 (ignored). 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @TimeDischargeTrigger.setter
    def TimeDischargeTrigger(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def TimeChargeTrigger(self) -> float:
        """
        DSS property name: TimeChargeTrigger
        DSS property index: 15

        Default time of day (hr) for initiating charging in Time control mode. Set this to a negative value to ignore. Default is 2.0.  (0200).When this value is >0 the Storage fleet is set to charging at this time regardless of other control criteria to make sure Storage is topped off for the next discharge cycle.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @TimeChargeTrigger.setter
    def TimeChargeTrigger(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def pctRatekW(self) -> float:
        """
        DSS property name: %RatekW
        DSS property index: 16

        Sets the kW discharge rate in % of rated capacity for each element of the fleet. Applies to TIME control mode, SCHEDULE mode, or anytime discharging is triggered by time.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @pctRatekW.setter
    def pctRatekW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def pctRateCharge(self) -> float:
        """
        DSS property name: %RateCharge
        DSS property index: 17

        Sets the kW charging rate in % of rated capacity for each element of the fleet. Applies to TIME control mode and anytime charging mode is entered due to a time trigger.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @pctRateCharge.setter
    def pctRateCharge(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def pctReserve(self) -> float:
        """
        DSS property name: %Reserve
        DSS property index: 18

        Use this property to change the % reserve for each Storage element under control of this controller. This might be used, for example, to allow deeper discharges of Storage or in case of emergency operation to use the remainder of the Storage element.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @pctReserve.setter
    def pctReserve(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def kWhTotal(self) -> float:
        """
        DSS property name: kWhTotal
        DSS property index: 19

        (Read only). Total rated kWh energy Storage capacity of Storage elements controlled by this controller.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @kWhTotal.setter
    def kWhTotal(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def kWTotal(self) -> float:
        """
        DSS property name: kWTotal
        DSS property index: 20

        (Read only). Total rated kW power capacity of Storage elements controlled by this controller.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @kWTotal.setter
    def kWTotal(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def kWhActual(self) -> float:
        """
        DSS property name: kWhActual
        DSS property index: 21

        (Read only). Actual kWh stored of all controlled Storage elements. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @kWhActual.setter
    def kWhActual(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def kWActual(self) -> float:
        """
        DSS property name: kWActual
        DSS property index: 22

        (Read only). Actual kW output of all controlled Storage elements. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @kWActual.setter
    def kWActual(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def kWneed(self) -> float:
        """
        DSS property name: kWneed
        DSS property index: 23

        (Read only). KW needed to meet target.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @kWneed.setter
    def kWneed(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def Yearly(self) -> str:
        """
        DSS property name: Yearly
        DSS property index: 24

        Dispatch loadshape object, If any, for Yearly solution Mode.
        """
        return self._get_prop_string(24)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(24, value)
            return

        self._set_string(24, value)

    @property
    def Yearly_obj(self) -> LoadShape:
        """
        DSS property name: Yearly
        DSS property index: 24

        Dispatch loadshape object, If any, for Yearly solution Mode.
        """
        return self._get_obj(24, LoadShape)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_obj(24, value)

    @property
    def Daily(self) -> str:
        """
        DSS property name: Daily
        DSS property index: 25

        Dispatch loadshape object, If any, for Daily solution mode.
        """
        return self._get_prop_string(25)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(25, value)
            return

        self._set_string(25, value)

    @property
    def Daily_obj(self) -> LoadShape:
        """
        DSS property name: Daily
        DSS property index: 25

        Dispatch loadshape object, If any, for Daily solution mode.
        """
        return self._get_obj(25, LoadShape)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_obj(25, value)

    @property
    def Duty(self) -> str:
        """
        DSS property name: Duty
        DSS property index: 26

        Dispatch loadshape object, If any, for Dutycycle solution mode.
        """
        return self._get_prop_string(26)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(26, value)
            return

        self._set_string(26, value)

    @property
    def Duty_obj(self) -> LoadShape:
        """
        DSS property name: Duty
        DSS property index: 26

        Dispatch loadshape object, If any, for Dutycycle solution mode.
        """
        return self._get_obj(26, LoadShape)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_obj(26, value)

    @property
    def EventLog(self) -> bool:
        """
        DSS property name: EventLog
        DSS property index: 27

        {Yes/True | No/False} Default is No. Log control actions to Eventlog.
        """
        return self._lib.Obj_GetInt32(self._ptr, 27) != 0

    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 27, value)

    @property
    def InhibitTime(self) -> int:
        """
        DSS property name: InhibitTime
        DSS property index: 28

        Hours (integer) to inhibit Discharging after going into Charge mode. Default is 5.
        """
        return self._lib.Obj_GetInt32(self._ptr, 28)

    @InhibitTime.setter
    def InhibitTime(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 28, value)

    @property
    def Tup(self) -> float:
        """
        DSS property name: Tup
        DSS property index: 29

        Duration, hrs, of upramp part for SCHEDULE mode. Default is 0.25.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 29)

    @Tup.setter
    def Tup(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 29, value)

    @property
    def TFlat(self) -> float:
        """
        DSS property name: TFlat
        DSS property index: 30

        Duration, hrs, of flat part for SCHEDULE mode. Default is 2.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 30)

    @TFlat.setter
    def TFlat(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 30, value)

    @property
    def Tdn(self) -> float:
        """
        DSS property name: Tdn
        DSS property index: 31

        Duration, hrs, of downramp part for SCHEDULE mode. Default is 0.25.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 31)

    @Tdn.setter
    def Tdn(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 31, value)

    @property
    def kWThreshold(self) -> float:
        """
        DSS property name: kWThreshold
        DSS property index: 32

        Threshold, kW, for Follow mode. kW has to be above this value for the Storage element to be dispatched on. Defaults to 75% of the kWTarget value. Must reset this property after setting kWTarget if you want a different value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 32)

    @kWThreshold.setter
    def kWThreshold(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 32, value)

    @property
    def DispFactor(self) -> float:
        """
        DSS property name: DispFactor
        DSS property index: 33

        Defaults to 1 (disabled). Set to any value between 0 and 1 to enable this parameter.

        Use this parameter to reduce the amount of power requested by the controller in each control iteration. It can be useful when maximum control iterations are exceeded due to numerical instability such as fleet being set to charging and idling in subsequent control iterations (check the Eventlog). 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 33)

    @DispFactor.setter
    def DispFactor(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 33, value)

    @property
    def ResetLevel(self) -> float:
        """
        DSS property name: ResetLevel
        DSS property index: 34

        The level of charge required for allowing the storage to discharge again after reaching the reserve storage level. After reaching this level, the storage control  will not allow the storage device to discharge, forcing the storage to charge. Once the storage reaches thislevel, the storage will be able to discharge again. This value is a number between 0.2 and 1
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @ResetLevel.setter
    def ResetLevel(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def Seasons(self) -> int:
        """
        DSS property name: Seasons
        DSS property index: 35

        With this property the user can specify the number of targets to be used by the controller using the list given at "SeasonTargets"/"SeasonTargetsLow", which can be used to dynamically adjust the storage controller during a QSTS simulation. The default value is 1. This property needs to be defined before defining SeasonTargets/SeasonTargetsLow.
        """
        return self._lib.Obj_GetInt32(self._ptr, 35)

    @Seasons.setter
    def Seasons(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 35, value)

    @property
    def SeasonTargets(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: SeasonTargets
        DSS property index: 36

        An array of doubles specifying the targets to be used during a QSTS simulation. These targets will take effect only if SeasonRating=true. The number of targets cannot exceed the number of seasons defined at the SeasonSignal.The difference between the targets defined at SeasonTargets and SeasonTargetsLow is that SeasonTargets applies to discharging modes, while SeasonTargetsLow applies to charging modes.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 36)

    @SeasonTargets.setter
    def SeasonTargets(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(36, value)

    @property
    def SeasonTargetsLow(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: SeasonTargetsLow
        DSS property index: 37

        An array of doubles specifying the targets to be used during a QSTS simulation. These targets will take effect only if SeasonRating=true. The number of targets cannot exceed the number of seasons defined at the SeasonSignal.The difference between the targets defined at SeasonTargets and SeasonTargetsLow is that SeasonTargets applies to discharging modes, while SeasonTargetsLow applies to charging modes.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 37)

    @SeasonTargetsLow.setter
    def SeasonTargetsLow(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 38

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 38)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 38, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 39

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 39) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 39, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 40

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(40, value)

class Relay(DSSObj):
    _cls_name = 'Relay'
    _cls_idx = 30
    _cls_prop_idx = {
        'monitoredobj': 1,
        'monitoredterm': 2,
        'switchedobj': 3,
        'switchedterm': 4,
        'type': 5,
        'phasecurve': 6,
        'groundcurve': 7,
        'phasetrip': 8,
        'groundtrip': 9,
        'tdphase': 10,
        'tdground': 11,
        'phaseinst': 12,
        'groundinst': 13,
        'reset': 14,
        'shots': 15,
        'recloseintervals': 16,
        'delay': 17,
        'overvoltcurve': 18,
        'undervoltcurve': 19,
        'kvbase': 20,
        'pctpickup47': 21,
        '47%pickup': 21,
        'baseamps46': 22,
        '46baseamps': 22,
        'pctpickup46': 23,
        '46%pickup': 23,
        'isqt46': 24,
        '46isqt': 24,
        'variable': 25,
        'overtrip': 26,
        'undertrip': 27,
        'breakertime': 28,
        'action': 29,
        'z1mag': 30,
        'z1ang': 31,
        'z0mag': 32,
        'z0ang': 33,
        'mphase': 34,
        'mground': 35,
        'eventlog': 36,
        'debugtrace': 37,
        'distreverse': 38,
        'normal': 39,
        'state': 40,
        'doc_tiltanglelow': 41,
        'doc_tiltanglehigh': 42,
        'doc_tripsettinglow': 43,
        'doc_tripsettinghigh': 44,
        'doc_tripsettingmag': 45,
        'doc_delayinner': 46,
        'doc_phasecurveinner': 47,
        'doc_phasetripinner': 48,
        'doc_tdphaseinner': 49,
        'basefreq': 50,
        'enabled': 51,
        'like': 52,
    }

    # Class-specific enumerations
    class RelayType(IntEnum):
        """Relay: Type (DSS enumeration for Relay)"""
        Current = 0 # Current
        Voltage = 1 # Voltage
        ReversePower = 3 # ReversePower
        relay46 = 4 # 46
        relay47 = 5 # 47
        Generic = 6 # Generic
        Distance = 7 # Distance
        TD21 = 8 # TD21
        DOC = 9 # DOC

    class RelayAction(IntEnum):
        """Relay: Action (DSS enumeration for Relay)"""
        close = 2 # close
        open = 1 # open
        trip = 1 # trip

    class RelayState(IntEnum):
        """Relay: State (DSS enumeration for Relay)"""
        closed = 2 # closed
        open = 1 # open
        trip = 1 # trip


    @property
    def MonitoredObj(self) -> str:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the relay's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_prop_string(1)

    @MonitoredObj.setter
    def MonitoredObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def MonitoredObj_obj(self) -> DSSObj:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the relay's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_obj(1, None)

    @MonitoredObj_obj.setter
    def MonitoredObj_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def MonitoredTerm(self) -> int:
        """
        DSS property name: MonitoredTerm
        DSS property index: 2

        Number of the terminal of the circuit element to which the Relay is connected. 1 or 2, typically.  Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @MonitoredTerm.setter
    def MonitoredTerm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def SwitchedObj(self) -> str:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Relay controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_prop_string(3)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(3, value)
            return

        self._set_string(3, value)

    @property
    def SwitchedObj_obj(self) -> DSSObj:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Relay controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_obj(3, None)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_obj(3, value)

    @property
    def SwitchedTerm(self) -> int:
        """
        DSS property name: SwitchedTerm
        DSS property index: 4

        Number of the terminal of the controlled element in which the switch is controlled by the Relay. 1 or 2, typically.  Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 4)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def type(self) -> RelayType:
        """
        DSS property name: type
        DSS property index: 5

        One of a legal relay type:
          Current
          Voltage
          Reversepower
          46 (neg seq current)
          47 (neg seq voltage)
          Generic (generic over/under relay)
          Distance
          TD21
          DOC (directional overcurrent)

        Default is overcurrent relay (Current) Specify the curve and pickup settings appropriate for each type. Generic relays monitor PC Element Control variables and trip on out of over/under range in definite time.
        """
        return RelayType(self._lib.Obj_GetInt32(self._ptr, 5))

    @type.setter
    def type(self, value: Union[AnyStr, int, RelayType]):
        if not isinstance(value, int):
            self._set_string(5, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def type_str(self) -> str:
        """
        DSS property name: type
        DSS property index: 5

        One of a legal relay type:
          Current
          Voltage
          Reversepower
          46 (neg seq current)
          47 (neg seq voltage)
          Generic (generic over/under relay)
          Distance
          TD21
          DOC (directional overcurrent)

        Default is overcurrent relay (Current) Specify the curve and pickup settings appropriate for each type. Generic relays monitor PC Element Control variables and trip on out of over/under range in definite time.
        """
        return self._get_prop_string(5)

    @type_str.setter
    def type_str(self, value: AnyStr):
        self.type = value

    @property
    def Phasecurve(self) -> str:
        """
        DSS property name: Phasecurve
        DSS property index: 6

        Name of the TCC Curve object that determines the phase trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). For overcurrent relay, multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_prop_string(6)

    @Phasecurve.setter
    def Phasecurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(6, value)
            return

        self._set_string(6, value)

    @property
    def Phasecurve_obj(self) -> TCC_Curve:
        """
        DSS property name: Phasecurve
        DSS property index: 6

        Name of the TCC Curve object that determines the phase trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). For overcurrent relay, multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_obj(6, TCC_Curve)

    @Phasecurve_obj.setter
    def Phasecurve_obj(self, value: TCC_Curve):
        self._set_obj(6, value)

    @property
    def Groundcurve(self) -> str:
        """
        DSS property name: Groundcurve
        DSS property index: 7

        Name of the TCC Curve object that determines the ground trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).For overcurrent relay, multiplying the current values in the curve by the "groundtrip" valuw gives the actual current.
        """
        return self._get_prop_string(7)

    @Groundcurve.setter
    def Groundcurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(7, value)
            return

        self._set_string(7, value)

    @property
    def Groundcurve_obj(self) -> TCC_Curve:
        """
        DSS property name: Groundcurve
        DSS property index: 7

        Name of the TCC Curve object that determines the ground trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).For overcurrent relay, multiplying the current values in the curve by the "groundtrip" valuw gives the actual current.
        """
        return self._get_obj(7, TCC_Curve)

    @Groundcurve_obj.setter
    def Groundcurve_obj(self, value: TCC_Curve):
        self._set_obj(7, value)

    @property
    def PhaseTrip(self) -> float:
        """
        DSS property name: PhaseTrip
        DSS property index: 8

        Multiplier or actual phase amps for the phase TCC curve.  Defaults to 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @PhaseTrip.setter
    def PhaseTrip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def GroundTrip(self) -> float:
        """
        DSS property name: GroundTrip
        DSS property index: 9

        Multiplier or actual ground amps (3I0) for the ground TCC curve.  Defaults to 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @GroundTrip.setter
    def GroundTrip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def TDPhase(self) -> float:
        """
        DSS property name: TDPhase
        DSS property index: 10

        Time dial for Phase trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @TDPhase.setter
    def TDPhase(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def TDGround(self) -> float:
        """
        DSS property name: TDGround
        DSS property index: 11

        Time dial for Ground trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @TDGround.setter
    def TDGround(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def PhaseInst(self) -> float:
        """
        DSS property name: PhaseInst
        DSS property index: 12

        Actual  amps (Current relay) or kW (reverse power relay) for instantaneous phase trip which is assumed to happen in 0.01 sec + Delay Time. Default is 0.0, which signifies no inst trip. Use this value for specifying the Reverse Power threshold (kW) for reverse power relays.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @PhaseInst.setter
    def PhaseInst(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def GroundInst(self) -> float:
        """
        DSS property name: GroundInst
        DSS property index: 13

        Actual  amps for instantaneous ground trip which is assumed to happen in 0.01 sec + Delay Time.Default is 0.0, which signifies no inst trip.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @GroundInst.setter
    def GroundInst(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def Reset(self) -> float:
        """
        DSS property name: Reset
        DSS property index: 14

        Reset time in sec for relay.  Default is 15. If this much time passes between the last pickup event, and the relay has not locked out, the operation counter resets.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @Reset.setter
    def Reset(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def Shots(self) -> int:
        """
        DSS property name: Shots
        DSS property index: 15

        Number of shots to lockout.  Default is 4. This is one more than the number of reclose intervals.
        """
        return self._lib.Obj_GetInt32(self._ptr, 15)

    @Shots.setter
    def Shots(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def RecloseIntervals(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: RecloseIntervals
        DSS property index: 16

        Array of reclose intervals. If none, specify "NONE". Default for overcurrent relay is (0.5, 2.0, 2.0) seconds. Default for a voltage relay is (5.0). In a voltage relay, this is  seconds after restoration of voltage that the reclose occurs. Reverse power relay is one shot to lockout, so this is ignored.  A locked out relay must be closed manually (set action=close).
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 16)

    @RecloseIntervals.setter
    def RecloseIntervals(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def Delay(self) -> float:
        """
        DSS property name: Delay
        DSS property index: 17

        Trip time delay (sec) for DEFINITE TIME relays. Default is 0.0 for current and voltage relays.  If >0 then this value is used instead of curves.  Used by Generic, RevPower, 46 and 47 relays. Defaults to 0.1 s for these relays.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @Delay.setter
    def Delay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def Overvoltcurve(self) -> str:
        """
        DSS property name: Overvoltcurve
        DSS property index: 18

        TCC Curve object to use for overvoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_prop_string(18)

    @Overvoltcurve.setter
    def Overvoltcurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(18, value)
            return

        self._set_string(18, value)

    @property
    def Overvoltcurve_obj(self) -> TCC_Curve:
        """
        DSS property name: Overvoltcurve
        DSS property index: 18

        TCC Curve object to use for overvoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_obj(18, TCC_Curve)

    @Overvoltcurve_obj.setter
    def Overvoltcurve_obj(self, value: TCC_Curve):
        self._set_obj(18, value)

    @property
    def Undervoltcurve(self) -> str:
        """
        DSS property name: Undervoltcurve
        DSS property index: 19

        TCC Curve object to use for undervoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_prop_string(19)

    @Undervoltcurve.setter
    def Undervoltcurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(19, value)
            return

        self._set_string(19, value)

    @property
    def Undervoltcurve_obj(self) -> TCC_Curve:
        """
        DSS property name: Undervoltcurve
        DSS property index: 19

        TCC Curve object to use for undervoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_obj(19, TCC_Curve)

    @Undervoltcurve_obj.setter
    def Undervoltcurve_obj(self, value: TCC_Curve):
        self._set_obj(19, value)

    @property
    def kvbase(self) -> float:
        """
        DSS property name: kvbase
        DSS property index: 20

        Voltage base (kV) for the relay. Specify line-line for 3 phase devices); line-neutral for 1-phase devices.  Relay assumes the number of phases of the monitored element.  Default is 0.0, which results in assuming the voltage values in the "TCC" curve are specified in actual line-to-neutral volts.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @kvbase.setter
    def kvbase(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def pctPickup47(self) -> float:
        """
        DSS property name: 47%Pickup
        DSS property index: 21

        Percent voltage pickup for 47 relay (Neg seq voltage). Default is 2. Specify also base voltage (kvbase) and delay time value.   
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @pctPickup47.setter
    def pctPickup47(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def BaseAmps46(self) -> float:
        """
        DSS property name: 46BaseAmps
        DSS property index: 22

        Base current, Amps, for 46 relay (neg seq current).  Used for establishing pickup and per unit I-squared-t.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @BaseAmps46.setter
    def BaseAmps46(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def pctPickup46(self) -> float:
        """
        DSS property name: 46%Pickup
        DSS property index: 23

        Percent pickup current for 46 relay (neg seq current).  Default is 20.0.   When current exceeds this value * BaseAmps, I-squared-t calc starts.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @pctPickup46.setter
    def pctPickup46(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def isqt46(self) -> float:
        """
        DSS property name: 46isqt
        DSS property index: 24

        Negative Sequence I-squared-t trip value for 46 relay (neg seq current).  Default is 1 (trips in 1 sec for 1 per unit neg seq current).  Should be 1 to 99.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @isqt46.setter
    def isqt46(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def Variable(self) -> str:
        """
        DSS property name: Variable
        DSS property index: 25

        Name of variable in PC Elements being monitored.  Only applies to Generic relay.
        """
        return self._get_prop_string(25)

    @Variable.setter
    def Variable(self, value: AnyStr):
        self._set_string(25, value)

    @property
    def overtrip(self) -> float:
        """
        DSS property name: overtrip
        DSS property index: 26

        Trip setting (high value) for Generic relay variable.  Relay trips in definite time if value of variable exceeds this value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @overtrip.setter
    def overtrip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def undertrip(self) -> float:
        """
        DSS property name: undertrip
        DSS property index: 27

        Trip setting (low value) for Generic relay variable.  Relay trips in definite time if value of variable is less than this value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @undertrip.setter
    def undertrip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def Breakertime(self) -> float:
        """
        DSS property name: Breakertime
        DSS property index: 28

        Fixed delay time (sec) added to relay time. Default is 0.0. Designed to represent breaker time or some other delay after a trip decision is made.Use Delay property for setting a fixed trip time delay.Added to trip time of current and voltage relays. Could use in combination with inst trip value to obtain a definite time overcurrent relay.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 28)

    @Breakertime.setter
    def Breakertime(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 28, value)

    @property
    def action(self) -> RelayAction:
        """
        DSS property name: action
        DSS property index: 29

        DEPRECATED. See "State" property
        """
        return RelayAction(self._lib.Obj_GetInt32(self._ptr, 29))

    @action.setter
    def action(self, value: Union[AnyStr, int, RelayAction]):
        if not isinstance(value, int):
            self._set_string(29, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 29, value)

    @property
    def action_str(self) -> str:
        """
        DSS property name: action
        DSS property index: 29

        DEPRECATED. See "State" property
        """
        return self._get_prop_string(29)

    @action_str.setter
    def action_str(self, value: AnyStr):
        self.action = value

    @property
    def Z1mag(self) -> float:
        """
        DSS property name: Z1mag
        DSS property index: 30

        Positive sequence reach impedance in primary ohms for Distance and TD21 functions. Default=0.7
        """
        return self._lib.Obj_GetFloat64(self._ptr, 30)

    @Z1mag.setter
    def Z1mag(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 30, value)

    @property
    def Z1ang(self) -> float:
        """
        DSS property name: Z1ang
        DSS property index: 31

        Positive sequence reach impedance angle in degrees for Distance and TD21 functions. Default=64.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 31)

    @Z1ang.setter
    def Z1ang(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 31, value)

    @property
    def Z0mag(self) -> float:
        """
        DSS property name: Z0mag
        DSS property index: 32

        Zero sequence reach impedance in primary ohms for Distance and TD21 functions. Default=2.1
        """
        return self._lib.Obj_GetFloat64(self._ptr, 32)

    @Z0mag.setter
    def Z0mag(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 32, value)

    @property
    def Z0ang(self) -> float:
        """
        DSS property name: Z0ang
        DSS property index: 33

        Zero sequence reach impedance angle in degrees for Distance and TD21 functions. Default=68.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 33)

    @Z0ang.setter
    def Z0ang(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 33, value)

    @property
    def Mphase(self) -> float:
        """
        DSS property name: Mphase
        DSS property index: 34

        Phase reach multiplier in per-unit for Distance and TD21 functions. Default=0.7
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @Mphase.setter
    def Mphase(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def Mground(self) -> float:
        """
        DSS property name: Mground
        DSS property index: 35

        Ground reach multiplier in per-unit for Distance and TD21 functions. Default=0.7
        """
        return self._lib.Obj_GetFloat64(self._ptr, 35)

    @Mground.setter
    def Mground(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 35, value)

    @property
    def EventLog(self) -> bool:
        """
        DSS property name: EventLog
        DSS property index: 36

        {Yes/True* | No/False} Default is Yes for Relay. Write trips, reclose and reset events to EventLog.
        """
        return self._lib.Obj_GetInt32(self._ptr, 36) != 0

    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 36, value)

    @property
    def DebugTrace(self) -> bool:
        """
        DSS property name: DebugTrace
        DSS property index: 37

        {Yes/True* | No/False} Default is No for Relay. Write extra details to Eventlog.
        """
        return self._lib.Obj_GetInt32(self._ptr, 37) != 0

    @DebugTrace.setter
    def DebugTrace(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 37, value)

    @property
    def DistReverse(self) -> bool:
        """
        DSS property name: DistReverse
        DSS property index: 38

        {Yes/True* | No/False} Default is No; reverse direction for distance and td21 types.
        """
        return self._lib.Obj_GetInt32(self._ptr, 38) != 0

    @DistReverse.setter
    def DistReverse(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 38, value)

    @property
    def Normal(self) -> RelayState:
        """
        DSS property name: Normal
        DSS property index: 39

        {Open | Closed} Normal state of the relay. The relay reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return RelayState(self._lib.Obj_GetInt32(self._ptr, 39))

    @Normal.setter
    def Normal(self, value: Union[AnyStr, int, RelayState]):
        if not isinstance(value, int):
            self._set_string(39, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 39, value)

    @property
    def Normal_str(self) -> str:
        """
        DSS property name: Normal
        DSS property index: 39

        {Open | Closed} Normal state of the relay. The relay reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return self._get_prop_string(39)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> RelayState:
        """
        DSS property name: State
        DSS property index: 40

        {Open | Closed} Actual state of the relay. Upon setting, immediately forces state of the relay, overriding the Relay control. Simulates manual control on relay. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the relay to reset to its first operation.
        """
        return RelayState(self._lib.Obj_GetInt32(self._ptr, 40))

    @State.setter
    def State(self, value: Union[AnyStr, int, RelayState]):
        if not isinstance(value, int):
            self._set_string(40, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 40, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 40

        {Open | Closed} Actual state of the relay. Upon setting, immediately forces state of the relay, overriding the Relay control. Simulates manual control on relay. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the relay to reset to its first operation.
        """
        return self._get_prop_string(40)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def DOC_TiltAngleLow(self) -> float:
        """
        DSS property name: DOC_TiltAngleLow
        DSS property index: 41

        Tilt angle for lower current magnitudes. Default is 90.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 41)

    @DOC_TiltAngleLow.setter
    def DOC_TiltAngleLow(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 41, value)

    @property
    def DOC_TiltAngleHigh(self) -> float:
        """
        DSS property name: DOC_TiltAngleHigh
        DSS property index: 42

        Tilt angle for higher current magnitudes. Default is 90.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 42)

    @DOC_TiltAngleHigh.setter
    def DOC_TiltAngleHigh(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 42, value)

    @property
    def DOC_TripSettingLow(self) -> float:
        """
        DSS property name: DOC_TripSettingLow
        DSS property index: 43

        Trip setting for lower current magnitude.  Default is 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 43)

    @DOC_TripSettingLow.setter
    def DOC_TripSettingLow(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 43, value)

    @property
    def DOC_TripSettingHigh(self) -> float:
        """
        DSS property name: DOC_TripSettingHigh
        DSS property index: 44

        Trip setting for higher current magnitude.  Default is -1 (deactivated). To activate, set a positive value. Must be greater than "DOC_TripSettingLow".
        """
        return self._lib.Obj_GetFloat64(self._ptr, 44)

    @DOC_TripSettingHigh.setter
    def DOC_TripSettingHigh(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 44, value)

    @property
    def DOC_TripSettingMag(self) -> float:
        """
        DSS property name: DOC_TripSettingMag
        DSS property index: 45

        Trip setting for current magnitude (define a circle for the relay characteristics). Default is -1 (deactivated). To activate, set a positive value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 45)

    @DOC_TripSettingMag.setter
    def DOC_TripSettingMag(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 45, value)

    @property
    def DOC_DelayInner(self) -> float:
        """
        DSS property name: DOC_DelayInner
        DSS property index: 46

        Trip time delay (sec) for operation in inner zone for DOC relay, defined when "DOC_TripSettingMag" or "DOC_TripSettingHigh" are activate. Default is -1.0 (deactivated), meaning that the relay characteristic is insensitive in the inner zone (no trip). Set to 0 for instantaneous trip and >0 for a definite time delay. If "DOC_PhaseCurveInner" is specified, time delay from curve is utilized instead.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 46)

    @DOC_DelayInner.setter
    def DOC_DelayInner(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 46, value)

    @property
    def DOC_PhaseCurveInner(self) -> float:
        """
        DSS property name: DOC_PhaseCurveInner
        DSS property index: 47

        Name of the TCC Curve object that determines the phase trip for operation in inner zone for DOC relay. Must have been previously defined as a TCC_Curve object. Default is none (ignored). Multiplying the current values in the curve by the "DOC_PhaseTripInner" value gives the actual current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 47)

    @DOC_PhaseCurveInner.setter
    def DOC_PhaseCurveInner(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 47, value)

    @property
    def DOC_PhaseTripInner(self) -> float:
        """
        DSS property name: DOC_PhaseTripInner
        DSS property index: 48

        Multiplier for the "DOC_PhaseCurveInner" TCC curve.  Defaults to 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 48)

    @DOC_PhaseTripInner.setter
    def DOC_PhaseTripInner(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 48, value)

    @property
    def DOC_TDPhaseInner(self) -> str:
        """
        DSS property name: DOC_TDPhaseInner
        DSS property index: 49

        Time dial for "DOC_PhaseCurveInner" TCC curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._get_prop_string(49)

    @DOC_TDPhaseInner.setter
    def DOC_TDPhaseInner(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(49, value)
            return

        self._set_string(49, value)

    @property
    def DOC_TDPhaseInner_obj(self) -> TCC_Curve:
        """
        DSS property name: DOC_TDPhaseInner
        DSS property index: 49

        Time dial for "DOC_PhaseCurveInner" TCC curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._get_obj(49, TCC_Curve)

    @DOC_TDPhaseInner_obj.setter
    def DOC_TDPhaseInner_obj(self, value: TCC_Curve):
        self._set_obj(49, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 50

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 50)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 50, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 51

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 51) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 51, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 52

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(52, value)

class Recloser(DSSObj):
    _cls_name = 'Recloser'
    _cls_idx = 31
    _cls_prop_idx = {
        'monitoredobj': 1,
        'monitoredterm': 2,
        'switchedobj': 3,
        'switchedterm': 4,
        'numfast': 5,
        'phasefast': 6,
        'phasedelayed': 7,
        'groundfast': 8,
        'grounddelayed': 9,
        'phasetrip': 10,
        'groundtrip': 11,
        'phaseinst': 12,
        'groundinst': 13,
        'reset': 14,
        'shots': 15,
        'recloseintervals': 16,
        'delay': 17,
        'action': 18,
        'tdphfast': 19,
        'tdgrfast': 20,
        'tdphdelayed': 21,
        'tdgrdelayed': 22,
        'normal': 23,
        'state': 24,
        'basefreq': 25,
        'enabled': 26,
        'like': 27,
    }

    # Class-specific enumerations
    class RecloserAction(IntEnum):
        """Recloser: Action (DSS enumeration for Recloser)"""
        close = 2 # close
        open = 1 # open
        trip = 1 # trip

    class RecloserState(IntEnum):
        """Recloser: State (DSS enumeration for Recloser)"""
        closed = 2 # closed
        open = 1 # open
        trip = 1 # trip


    @property
    def MonitoredObj(self) -> str:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Recloser's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_prop_string(1)

    @MonitoredObj.setter
    def MonitoredObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def MonitoredObj_obj(self) -> DSSObj:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Recloser's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_obj(1, None)

    @MonitoredObj_obj.setter
    def MonitoredObj_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def MonitoredTerm(self) -> int:
        """
        DSS property name: MonitoredTerm
        DSS property index: 2

        Number of the terminal of the circuit element to which the Recloser is connected. 1 or 2, typically.  Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @MonitoredTerm.setter
    def MonitoredTerm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def SwitchedObj(self) -> str:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Recloser controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_prop_string(3)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(3, value)
            return

        self._set_string(3, value)

    @property
    def SwitchedObj_obj(self) -> DSSObj:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Recloser controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_obj(3, None)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_obj(3, value)

    @property
    def SwitchedTerm(self) -> int:
        """
        DSS property name: SwitchedTerm
        DSS property index: 4

        Number of the terminal of the controlled element in which the switch is controlled by the Recloser. 1 or 2, typically.  Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 4)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def NumFast(self) -> int:
        """
        DSS property name: NumFast
        DSS property index: 5

        Number of Fast (fuse saving) operations.  Default is 1. (See "Shots")
        """
        return self._lib.Obj_GetInt32(self._ptr, 5)

    @NumFast.setter
    def NumFast(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def PhaseFast(self) -> str:
        """
        DSS property name: PhaseFast
        DSS property index: 6

        Name of the TCC Curve object that determines the Phase Fast trip.  Must have been previously defined as a TCC_Curve object. Default is "A". Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_prop_string(6)

    @PhaseFast.setter
    def PhaseFast(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(6, value)
            return

        self._set_string(6, value)

    @property
    def PhaseFast_obj(self) -> TCC_Curve:
        """
        DSS property name: PhaseFast
        DSS property index: 6

        Name of the TCC Curve object that determines the Phase Fast trip.  Must have been previously defined as a TCC_Curve object. Default is "A". Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_obj(6, TCC_Curve)

    @PhaseFast_obj.setter
    def PhaseFast_obj(self, value: TCC_Curve):
        self._set_obj(6, value)

    @property
    def PhaseDelayed(self) -> str:
        """
        DSS property name: PhaseDelayed
        DSS property index: 7

        Name of the TCC Curve object that determines the Phase Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is "D".Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_prop_string(7)

    @PhaseDelayed.setter
    def PhaseDelayed(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(7, value)
            return

        self._set_string(7, value)

    @property
    def PhaseDelayed_obj(self) -> TCC_Curve:
        """
        DSS property name: PhaseDelayed
        DSS property index: 7

        Name of the TCC Curve object that determines the Phase Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is "D".Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_obj(7, TCC_Curve)

    @PhaseDelayed_obj.setter
    def PhaseDelayed_obj(self, value: TCC_Curve):
        self._set_obj(7, value)

    @property
    def GroundFast(self) -> str:
        """
        DSS property name: GroundFast
        DSS property index: 8

        Name of the TCC Curve object that determines the Ground Fast trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_prop_string(8)

    @GroundFast.setter
    def GroundFast(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(8, value)
            return

        self._set_string(8, value)

    @property
    def GroundFast_obj(self) -> TCC_Curve:
        """
        DSS property name: GroundFast
        DSS property index: 8

        Name of the TCC Curve object that determines the Ground Fast trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_obj(8, TCC_Curve)

    @GroundFast_obj.setter
    def GroundFast_obj(self, value: TCC_Curve):
        self._set_obj(8, value)

    @property
    def GroundDelayed(self) -> str:
        """
        DSS property name: GroundDelayed
        DSS property index: 9

        Name of the TCC Curve object that determines the Ground Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_prop_string(9)

    @GroundDelayed.setter
    def GroundDelayed(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(9, value)
            return

        self._set_string(9, value)

    @property
    def GroundDelayed_obj(self) -> TCC_Curve:
        """
        DSS property name: GroundDelayed
        DSS property index: 9

        Name of the TCC Curve object that determines the Ground Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_obj(9, TCC_Curve)

    @GroundDelayed_obj.setter
    def GroundDelayed_obj(self, value: TCC_Curve):
        self._set_obj(9, value)

    @property
    def PhaseTrip(self) -> float:
        """
        DSS property name: PhaseTrip
        DSS property index: 10

        Multiplier or actual phase amps for the phase TCC curve.  Defaults to 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @PhaseTrip.setter
    def PhaseTrip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def GroundTrip(self) -> float:
        """
        DSS property name: GroundTrip
        DSS property index: 11

        Multiplier or actual ground amps (3I0) for the ground TCC curve.  Defaults to 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @GroundTrip.setter
    def GroundTrip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def PhaseInst(self) -> float:
        """
        DSS property name: PhaseInst
        DSS property index: 12

        Actual amps for instantaneous phase trip which is assumed to happen in 0.01 sec + Delay Time. Default is 0.0, which signifies no inst trip. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @PhaseInst.setter
    def PhaseInst(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def GroundInst(self) -> float:
        """
        DSS property name: GroundInst
        DSS property index: 13

        Actual amps for instantaneous ground trip which is assumed to happen in 0.01 sec + Delay Time.Default is 0.0, which signifies no inst trip.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @GroundInst.setter
    def GroundInst(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def Reset(self) -> float:
        """
        DSS property name: Reset
        DSS property index: 14

        Reset time in sec for Recloser.  Default is 15. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @Reset.setter
    def Reset(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def Shots(self) -> int:
        """
        DSS property name: Shots
        DSS property index: 15

        Total Number of fast and delayed shots to lockout.  Default is 4. This is one more than the number of reclose intervals.
        """
        return self._lib.Obj_GetInt32(self._ptr, 15)

    @Shots.setter
    def Shots(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def RecloseIntervals(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: RecloseIntervals
        DSS property index: 16

        Array of reclose intervals.  Default for Recloser is (0.5, 2.0, 2.0) seconds. A locked out Recloser must be closed manually (action=close).
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 16)

    @RecloseIntervals.setter
    def RecloseIntervals(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def Delay(self) -> float:
        """
        DSS property name: Delay
        DSS property index: 17

        Fixed delay time (sec) added to Recloser trip time. Default is 0.0. Used to represent breaker time or any other delay.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @Delay.setter
    def Delay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def Action(self) -> RecloserAction:
        """
        DSS property name: Action
        DSS property index: 18

        DEPRECATED. See "State" property
        """
        return RecloserAction(self._lib.Obj_GetInt32(self._ptr, 18))

    @Action.setter
    def Action(self, value: Union[AnyStr, int, RecloserAction]):
        if not isinstance(value, int):
            self._set_string(18, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def Action_str(self) -> str:
        """
        DSS property name: Action
        DSS property index: 18

        DEPRECATED. See "State" property
        """
        return self._get_prop_string(18)

    @Action_str.setter
    def Action_str(self, value: AnyStr):
        self.Action = value

    @property
    def TDPhFast(self) -> float:
        """
        DSS property name: TDPhFast
        DSS property index: 19

        Time dial for Phase Fast trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @TDPhFast.setter
    def TDPhFast(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def TDGrFast(self) -> float:
        """
        DSS property name: TDGrFast
        DSS property index: 20

        Time dial for Ground Fast trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @TDGrFast.setter
    def TDGrFast(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def TDPhDelayed(self) -> float:
        """
        DSS property name: TDPhDelayed
        DSS property index: 21

        Time dial for Phase Delayed trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @TDPhDelayed.setter
    def TDPhDelayed(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def TDGrDelayed(self) -> float:
        """
        DSS property name: TDGrDelayed
        DSS property index: 22

        Time dial for Ground Delayed trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @TDGrDelayed.setter
    def TDGrDelayed(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def Normal(self) -> RecloserState:
        """
        DSS property name: Normal
        DSS property index: 23

        {Open | Closed} Normal state of the recloser. The recloser reverts to this state for reset, change of mode, etc. Defaults to "State" if not specificallt declared.
        """
        return RecloserState(self._lib.Obj_GetInt32(self._ptr, 23))

    @Normal.setter
    def Normal(self, value: Union[AnyStr, int, RecloserState]):
        if not isinstance(value, int):
            self._set_string(23, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 23, value)

    @property
    def Normal_str(self) -> str:
        """
        DSS property name: Normal
        DSS property index: 23

        {Open | Closed} Normal state of the recloser. The recloser reverts to this state for reset, change of mode, etc. Defaults to "State" if not specificallt declared.
        """
        return self._get_prop_string(23)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> RecloserState:
        """
        DSS property name: State
        DSS property index: 24

        {Open | Closed} Actual state of the recloser. Upon setting, immediately forces state of the recloser, overriding the Recloser control. Simulates manual control on recloser. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the recloser to reset to its first operation.
        """
        return RecloserState(self._lib.Obj_GetInt32(self._ptr, 24))

    @State.setter
    def State(self, value: Union[AnyStr, int, RecloserState]):
        if not isinstance(value, int):
            self._set_string(24, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 24, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 24

        {Open | Closed} Actual state of the recloser. Upon setting, immediately forces state of the recloser, overriding the Recloser control. Simulates manual control on recloser. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the recloser to reset to its first operation.
        """
        return self._get_prop_string(24)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 25

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 26

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 26) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 26, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 27

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(27, value)

class Fuse(DSSObj):
    _cls_name = 'Fuse'
    _cls_idx = 32
    _cls_prop_idx = {
        'monitoredobj': 1,
        'monitoredterm': 2,
        'switchedobj': 3,
        'switchedterm': 4,
        'fusecurve': 5,
        'ratedcurrent': 6,
        'delay': 7,
        'action': 8,
        'normal': 9,
        'state': 10,
        'basefreq': 11,
        'enabled': 12,
        'like': 13,
    }

    # Class-specific enumerations
    class FuseAction(IntEnum):
        """Fuse: Action (DSS enumeration for Fuse)"""
        close = 2 # close
        open = 1 # open

    class FuseState(IntEnum):
        """Fuse: State (DSS enumeration for Fuse)"""
        closed = 2 # closed
        open = 1 # open


    @property
    def MonitoredObj(self) -> str:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Fuse is connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_prop_string(1)

    @MonitoredObj.setter
    def MonitoredObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def MonitoredObj_obj(self) -> DSSObj:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Fuse is connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_obj(1, None)

    @MonitoredObj_obj.setter
    def MonitoredObj_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def MonitoredTerm(self) -> int:
        """
        DSS property name: MonitoredTerm
        DSS property index: 2

        Number of the terminal of the circuit element to which the Fuse is connected. 1 or 2, typically.  Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @MonitoredTerm.setter
    def MonitoredTerm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def SwitchedObj(self) -> str:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Fuse controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_prop_string(3)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(3, value)
            return

        self._set_string(3, value)

    @property
    def SwitchedObj_obj(self) -> DSSObj:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Fuse controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_obj(3, None)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_obj(3, value)

    @property
    def SwitchedTerm(self) -> int:
        """
        DSS property name: SwitchedTerm
        DSS property index: 4

        Number of the terminal of the controlled element in which the switch is controlled by the Fuse. 1 or 2, typically.  Default is 1.  Assumes all phases of the element have a fuse of this type.
        """
        return self._lib.Obj_GetInt32(self._ptr, 4)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def FuseCurve(self) -> str:
        """
        DSS property name: FuseCurve
        DSS property index: 5

        Name of the TCC Curve object that determines the fuse blowing.  Must have been previously defined as a TCC_Curve object. Default is "Tlink". Multiplying the current values in the curve by the "RatedCurrent" value gives the actual current.
        """
        return self._get_prop_string(5)

    @FuseCurve.setter
    def FuseCurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_obj(5, value)
            return

        self._set_string(5, value)

    @property
    def FuseCurve_obj(self) -> TCC_Curve:
        """
        DSS property name: FuseCurve
        DSS property index: 5

        Name of the TCC Curve object that determines the fuse blowing.  Must have been previously defined as a TCC_Curve object. Default is "Tlink". Multiplying the current values in the curve by the "RatedCurrent" value gives the actual current.
        """
        return self._get_obj(5, TCC_Curve)

    @FuseCurve_obj.setter
    def FuseCurve_obj(self, value: TCC_Curve):
        self._set_obj(5, value)

    @property
    def RatedCurrent(self) -> float:
        """
        DSS property name: RatedCurrent
        DSS property index: 6

        Multiplier or actual phase amps for the phase TCC curve.  Defaults to 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @RatedCurrent.setter
    def RatedCurrent(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def Delay(self) -> float:
        """
        DSS property name: Delay
        DSS property index: 7

        Fixed delay time (sec) added to Fuse blowing time determined from the TCC curve. Default is 0.0. Used to represent fuse clearing time or any other delay.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @Delay.setter
    def Delay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    def Action(self, value: Union[str, bytes, int, FuseAction]):
        """
        DSS property name: Action
        DSS property index: 8

        DEPRECATED. See "State" property.
        """
        if isinstance(value, int):
            self._lib.Obj_SetInt32(self._ptr, 8, value)
            return
    
        self._set_string(8, value)

    @property
    def Normal(self) -> List[FuseState]:
        """
        DSS property name: Normal
        DSS property index: 9

        ARRAY of strings {Open | Closed} representing the Normal state of the fuse in each phase of the controlled element. The fuse reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return [FuseState(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 9)]

    @Normal.setter
    def Normal(self, value: Union[List[Union[int,FuseState]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(9, value)
            return    
        self._set_int32_array(9, value)

    @property
    def Normal_str(self) -> List[str]:
        """
        DSS property name: Normal
        DSS property index: 9

        ARRAY of strings {Open | Closed} representing the Normal state of the fuse in each phase of the controlled element. The fuse reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 9)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> List[FuseState]:
        """
        DSS property name: State
        DSS property index: 10

        ARRAY of strings {Open | Closed} representing the Actual state of the fuse in each phase of the controlled element. Upon setting, immediately forces state of fuse(s). Simulates manual control on Fuse. Defaults to Closed for all phases.
        """
        return [FuseState(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 10)]

    @State.setter
    def State(self, value: Union[List[Union[int,FuseState]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(10, value)
            return    
        self._set_int32_array(10, value)

    @property
    def State_str(self) -> List[str]:
        """
        DSS property name: State
        DSS property index: 10

        ARRAY of strings {Open | Closed} representing the Actual state of the fuse in each phase of the controlled element. Upon setting, immediately forces state of fuse(s). Simulates manual control on Fuse. Defaults to Closed for all phases.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 10)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 11

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 12

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 12) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 13

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(13, value)

class SwtControl(DSSObj):
    _cls_name = 'SwtControl'
    _cls_idx = 33
    _cls_prop_idx = {
        'switchedobj': 1,
        'switchedterm': 2,
        'action': 3,
        'lock': 4,
        'delay': 5,
        'normal': 6,
        'state': 7,
        'reset': 8,
        'basefreq': 9,
        'enabled': 10,
        'like': 11,
    }

    # Class-specific enumerations
    class SwtControlAction(IntEnum):
        """SwtControl: Action (DSS enumeration for SwtControl)"""
        close = 2 # close
        open = 1 # open

    class SwtControlState(IntEnum):
        """SwtControl: State (DSS enumeration for SwtControl)"""
        closed = 2 # closed
        open = 1 # open


    @property
    def SwitchedObj(self) -> str:
        """
        DSS property name: SwitchedObj
        DSS property index: 1

        Name of circuit element switch that the SwtControl operates. Specify the full object class and name.
        """
        return self._get_prop_string(1)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def SwitchedObj_obj(self) -> DSSObj:
        """
        DSS property name: SwitchedObj
        DSS property index: 1

        Name of circuit element switch that the SwtControl operates. Specify the full object class and name.
        """
        return self._get_obj(1, None)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def SwitchedTerm(self) -> int:
        """
        DSS property name: SwitchedTerm
        DSS property index: 2

        Terminal number of the controlled element switch. 1 or 2, typically.  Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def Action(self) -> SwtControlAction:
        """
        DSS property name: Action
        DSS property index: 3

        {Open | Close}  After specified delay time, and if not locked, causes the controlled switch to open or close. 
        """
        return SwtControlAction(self._lib.Obj_GetInt32(self._ptr, 3))

    @Action.setter
    def Action(self, value: Union[AnyStr, int, SwtControlAction]):
        if not isinstance(value, int):
            self._set_string(3, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def Action_str(self) -> str:
        """
        DSS property name: Action
        DSS property index: 3

        {Open | Close}  After specified delay time, and if not locked, causes the controlled switch to open or close. 
        """
        return self._get_prop_string(3)

    @Action_str.setter
    def Action_str(self, value: AnyStr):
        self.Action = value

    @property
    def Lock(self) -> bool:
        """
        DSS property name: Lock
        DSS property index: 4

        {Yes | No} Delayed action. Sends CTRL_LOCK or CTRL_UNLOCK message to control queue. After delay time, controlled switch is locked in its present open / close state or unlocked. Switch will not respond to either manual (Action) or automatic (COM interface) control or internal OpenDSS Reset when locked.
        """
        return self._lib.Obj_GetInt32(self._ptr, 4) != 0

    @Lock.setter
    def Lock(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def Delay(self) -> float:
        """
        DSS property name: Delay
        DSS property index: 5

        Operating time delay (sec) of the switch. Defaults to 120.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @Delay.setter
    def Delay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def Normal(self) -> SwtControlState:
        """
        DSS property name: Normal
        DSS property index: 6

        {Open | Closed] Normal state of the switch. If not Locked, the switch reverts to this state for reset, change of mode, etc. Defaults to first Action or State specified if not specifically declared.
        """
        return SwtControlState(self._lib.Obj_GetInt32(self._ptr, 6))

    @Normal.setter
    def Normal(self, value: Union[AnyStr, int, SwtControlState]):
        if not isinstance(value, int):
            self._set_string(6, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def Normal_str(self) -> str:
        """
        DSS property name: Normal
        DSS property index: 6

        {Open | Closed] Normal state of the switch. If not Locked, the switch reverts to this state for reset, change of mode, etc. Defaults to first Action or State specified if not specifically declared.
        """
        return self._get_prop_string(6)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> SwtControlState:
        """
        DSS property name: State
        DSS property index: 7

        {Open | Closed] Present state of the switch. Upon setting, immediately forces state of switch.
        """
        return SwtControlState(self._lib.Obj_GetInt32(self._ptr, 7))

    @State.setter
    def State(self, value: Union[AnyStr, int, SwtControlState]):
        if not isinstance(value, int):
            self._set_string(7, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 7, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 7

        {Open | Closed] Present state of the switch. Upon setting, immediately forces state of switch.
        """
        return self._get_prop_string(7)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    def Reset(self, value: bool):
        """
        DSS property name: Reset
        DSS property index: 8

        {Yes | No} If Yes, forces Reset of switch to Normal state and removes Lock independently of any internal reset command for mode change, etc.
        """
        self._lib.Obj_SetInt32(self._ptr, 8, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 9

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 10

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 10) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 10, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 11

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(11, value)

class PVSystem(DSSObj):
    _cls_name = 'PVSystem'
    _cls_idx = 34
    _cls_prop_idx = {
        'phases': 1,
        'bus1': 2,
        'kv': 3,
        'irradiance': 4,
        'pmpp': 5,
        'pctpmpp': 6,
        '%pmpp': 6,
        'temperature': 7,
        'pf': 8,
        'conn': 9,
        'kvar': 10,
        'kva': 11,
        'pctcutin': 12,
        '%cutin': 12,
        'pctcutout': 13,
        '%cutout': 13,
        'effcurve': 14,
        'ptcurve': 15,
        'p-tcurve': 15,
        'pctr': 16,
        '%r': 16,
        'pctx': 17,
        '%x': 17,
        'model': 18,
        'vminpu': 19,
        'vmaxpu': 20,
        'balanced': 21,
        'limitcurrent': 22,
        'yearly': 23,
        'daily': 24,
        'duty': 25,
        'tyearly': 26,
        'tdaily': 27,
        'tduty': 28,
        'cls': 29,
        'class': 29,
        'usermodel': 30,
        'userdata': 31,
        'debugtrace': 32,
        'varfollowinverter': 33,
        'dutystart': 34,
        'wattpriority': 35,
        'pfpriority': 36,
        'pctpminnovars': 37,
        '%pminnovars': 37,
        'pctpminkvarmax': 38,
        '%pminkvarmax': 38,
        'kvarmax': 39,
        'kvarmaxabs': 40,
        'spectrum': 41,
        'basefreq': 42,
        'enabled': 43,
        'like': 44,
    }

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this PVSystem element.  Power is evenly divided among phases.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the PVSystem element is connected.  May include specific node specification.
        """
        return self._get_prop_string(2)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def kv(self) -> float:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for PVSystem element. For 2- and 3-phase PVSystem elements, specify phase-phase kV. Otherwise, specify actual kV across each branch of the PVSystem element. If 1-phase wye (star or LN), specify phase-neutral kV. If 1-phase delta or phase-phase connected, specify phase-phase kV.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kv.setter
    def kv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def irradiance(self) -> float:
        """
        DSS property name: irradiance
        DSS property index: 4

        Get/set the present irradiance value in kW/sq-m. Used as base value for shape multipliers. Generally entered as peak value for the time period of interest and the yearly, daily, and duty load shape objects are defined as per unit multipliers (just like Loads/Generators).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @irradiance.setter
    def irradiance(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def Pmpp(self) -> float:
        """
        DSS property name: Pmpp
        DSS property index: 5

        Get/set the rated max power of the PV array for 1.0 kW/sq-m irradiance and a user-selected array temperature. The P-TCurve should be defined relative to the selected array temperature.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @Pmpp.setter
    def Pmpp(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def pctPmpp(self) -> float:
        """
        DSS property name: %Pmpp
        DSS property index: 6

        Upper limit on active power as a percentage of Pmpp.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @pctPmpp.setter
    def pctPmpp(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def Temperature(self) -> float:
        """
        DSS property name: Temperature
        DSS property index: 7

        Get/set the present Temperature. Used as fixed value corresponding to PTCurve property. A multiplier is obtained from the Pmpp-Temp curve and applied to the nominal Pmpp from the irradiance to determine the net array output.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @Temperature.setter
    def Temperature(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def pf(self) -> float:
        """
        DSS property name: pf
        DSS property index: 8

        Nominally, the power factor for the output power. Default is 1.0. Setting this property will cause the inverter to operate in constant power factor mode.Enter negative when kW and kvar have opposite signs.
        A positive power factor signifies that the PVSystem element produces vars 
        as is typical for a generator.  
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @pf.setter
    def pf(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 9

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 9))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(9, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 9, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 9

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return self._get_prop_string(9)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kvar(self) -> float:
        """
        DSS property name: kvar
        DSS property index: 10

        Get/set the present kvar value.  Setting this property forces the inverter to operate in constant kvar mode.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @kvar.setter
    def kvar(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def kVA(self) -> float:
        """
        DSS property name: kVA
        DSS property index: 11

        kVA rating of inverter. Used as the base for Dynamics mode and Harmonics mode values.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @kVA.setter
    def kVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def pctCutin(self) -> float:
        """
        DSS property name: %Cutin
        DSS property index: 12

        % cut-in power -- % of kVA rating of inverter. When the inverter is OFF, the power from the array must be greater than this for the inverter to turn on.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @pctCutin.setter
    def pctCutin(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def pctCutout(self) -> float:
        """
        DSS property name: %Cutout
        DSS property index: 13

        % cut-out power -- % of kVA rating of inverter. When the inverter is ON, the inverter turns OFF when the power from the array drops below this value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @pctCutout.setter
    def pctCutout(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def EffCurve(self) -> str:
        """
        DSS property name: EffCurve
        DSS property index: 14

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Inverter output power is discounted by the multiplier obtained from this curve.
        """
        return self._get_prop_string(14)

    @EffCurve.setter
    def EffCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(14, value)
            return

        self._set_string(14, value)

    @property
    def EffCurve_obj(self) -> XYcurve:
        """
        DSS property name: EffCurve
        DSS property index: 14

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Inverter output power is discounted by the multiplier obtained from this curve.
        """
        return self._get_obj(14, XYcurve)

    @EffCurve_obj.setter
    def EffCurve_obj(self, value: XYcurve):
        self._set_obj(14, value)

    @property
    def PTCurve(self) -> str:
        """
        DSS property name: P-TCurve
        DSS property index: 15

        An XYCurve object, previously defined, that describes the PV array PER UNIT Pmpp vs Temperature curve. Temperature units must agree with the Temperature property and the Temperature shapes used for simulations. The Pmpp values are specified in per unit of the Pmpp value for 1 kW/sq-m irradiance. The value for the temperature at which Pmpp is defined should be 1.0. The net array power is determined by the irradiance * Pmpp * f(Temperature)
        """
        return self._get_prop_string(15)

    @PTCurve.setter
    def PTCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(15, value)
            return

        self._set_string(15, value)

    @property
    def PTCurve_obj(self) -> XYcurve:
        """
        DSS property name: P-TCurve
        DSS property index: 15

        An XYCurve object, previously defined, that describes the PV array PER UNIT Pmpp vs Temperature curve. Temperature units must agree with the Temperature property and the Temperature shapes used for simulations. The Pmpp values are specified in per unit of the Pmpp value for 1 kW/sq-m irradiance. The value for the temperature at which Pmpp is defined should be 1.0. The net array power is determined by the irradiance * Pmpp * f(Temperature)
        """
        return self._get_obj(15, XYcurve)

    @PTCurve_obj.setter
    def PTCurve_obj(self, value: XYcurve):
        self._set_obj(15, value)

    @property
    def pctR(self) -> float:
        """
        DSS property name: %R
        DSS property index: 16

        Equivalent percent internal resistance, ohms. Default is 50%. Placed in series with internal voltage source for harmonics and dynamics modes. (Limits fault current to about 2 pu if not current limited -- see LimitCurrent) 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @pctR.setter
    def pctR(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def pctX(self) -> float:
        """
        DSS property name: %X
        DSS property index: 17

        Equivalent percent internal reactance, ohms. Default is 0%. Placed in series with internal voltage source for harmonics and dynamics modes. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @pctX.setter
    def pctX(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def model(self) -> int:
        """
        DSS property name: model
        DSS property index: 18

        Integer code (default=1) for the model to use for power output variation with voltage. Valid values are:

        1:PVSystem element injects a CONSTANT kW at specified power factor.
        2:PVSystem element is modeled as a CONSTANT ADMITTANCE.
        3:Compute load injection from User-written Model.
        """
        return self._lib.Obj_GetInt32(self._ptr, 18)

    @model.setter
    def model(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def Vminpu(self) -> float:
        """
        DSS property name: Vminpu
        DSS property index: 19

        Default = 0.90.  Minimum per unit voltage for which the Model is assumed to apply. Below this value, the load model reverts to a constant impedance model except for Dynamics model. In Dynamics mode, the current magnitude is limited to the value the power flow would compute for this voltage.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @Vminpu.setter
    def Vminpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def Vmaxpu(self) -> float:
        """
        DSS property name: Vmaxpu
        DSS property index: 20

        Default = 1.10.  Maximum per unit voltage for which the Model is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @Vmaxpu.setter
    def Vmaxpu(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def Balanced(self) -> bool:
        """
        DSS property name: Balanced
        DSS property index: 21

        {Yes | No*} Default is No.  Force balanced current only for 3-phase PVSystems. Forces zero- and negative-sequence to zero. 
        """
        return self._lib.Obj_GetInt32(self._ptr, 21) != 0

    @Balanced.setter
    def Balanced(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 21, value)

    @property
    def LimitCurrent(self) -> bool:
        """
        DSS property name: LimitCurrent
        DSS property index: 22

        Limits current magnitude to Vminpu value for both 1-phase and 3-phase PVSystems similar to Generator Model 7. For 3-phase, limits the positive-sequence current but not the negative-sequence.
        """
        return self._lib.Obj_GetInt32(self._ptr, 22) != 0

    @LimitCurrent.setter
    def LimitCurrent(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    @property
    def yearly(self) -> str:
        """
        DSS property name: yearly
        DSS property index: 23

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_prop_string(23)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(23, value)
            return

        self._set_string(23, value)

    @property
    def yearly_obj(self) -> LoadShape:
        """
        DSS property name: yearly
        DSS property index: 23

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_obj(23, LoadShape)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_obj(23, value)

    @property
    def daily(self) -> str:
        """
        DSS property name: daily
        DSS property index: 24

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_prop_string(24)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(24, value)
            return

        self._set_string(24, value)

    @property
    def daily_obj(self) -> LoadShape:
        """
        DSS property name: daily
        DSS property index: 24

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_obj(24, LoadShape)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_obj(24, value)

    @property
    def duty(self) -> str:
        """
        DSS property name: duty
        DSS property index: 25

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_prop_string(25)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(25, value)
            return

        self._set_string(25, value)

    @property
    def duty_obj(self) -> LoadShape:
        """
        DSS property name: duty
        DSS property index: 25

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_obj(25, LoadShape)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_obj(25, value)

    @property
    def Tyearly(self) -> str:
        """
        DSS property name: Tyearly
        DSS property index: 26

        Temperature shape to use for yearly simulations.  Must be previously defined as a TShape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_prop_string(26)

    @Tyearly.setter
    def Tyearly(self, value: Union[AnyStr, TShape]):
        if isinstance(value, DSSObj):
            self._set_obj(26, value)
            return

        self._set_string(26, value)

    @property
    def Tyearly_obj(self) -> TShape:
        """
        DSS property name: Tyearly
        DSS property index: 26

        Temperature shape to use for yearly simulations.  Must be previously defined as a TShape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_obj(26, TShape)

    @Tyearly_obj.setter
    def Tyearly_obj(self, value: TShape):
        self._set_obj(26, value)

    @property
    def Tdaily(self) -> str:
        """
        DSS property name: Tdaily
        DSS property index: 27

        Temperature shape to use for daily simulations.  Must be previously defined as a TShape object of 24 hrs, typically.  The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_prop_string(27)

    @Tdaily.setter
    def Tdaily(self, value: Union[AnyStr, TShape]):
        if isinstance(value, DSSObj):
            self._set_obj(27, value)
            return

        self._set_string(27, value)

    @property
    def Tdaily_obj(self) -> TShape:
        """
        DSS property name: Tdaily
        DSS property index: 27

        Temperature shape to use for daily simulations.  Must be previously defined as a TShape object of 24 hrs, typically.  The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_obj(27, TShape)

    @Tdaily_obj.setter
    def Tdaily_obj(self, value: TShape):
        self._set_obj(27, value)

    @property
    def Tduty(self) -> str:
        """
        DSS property name: Tduty
        DSS property index: 28

        Temperature shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a TShape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat. The PVSystem model uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_prop_string(28)

    @Tduty.setter
    def Tduty(self, value: Union[AnyStr, TShape]):
        if isinstance(value, DSSObj):
            self._set_obj(28, value)
            return

        self._set_string(28, value)

    @property
    def Tduty_obj(self) -> TShape:
        """
        DSS property name: Tduty
        DSS property index: 28

        Temperature shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a TShape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat. The PVSystem model uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_obj(28, TShape)

    @Tduty_obj.setter
    def Tduty_obj(self, value: TShape):
        self._set_obj(28, value)

    @property
    def cls(self) -> int:
        """
        DSS property name: class
        DSS property index: 29

        An arbitrary integer number representing the class of PVSystem element so that PVSystem values may be segregated by class.
        """
        return self._lib.Obj_GetInt32(self._ptr, 29)

    @cls.setter
    def cls(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 29, value)

    @property
    def UserModel(self) -> str:
        """
        DSS property name: UserModel
        DSS property index: 30

        Name of DLL containing user-written model, which computes the terminal currents for Dynamics studies, overriding the default model.  Set to "none" to negate previous setting.
        """
        return self._get_prop_string(30)

    @UserModel.setter
    def UserModel(self, value: AnyStr):
        self._set_string(30, value)

    @property
    def UserData(self) -> str:
        """
        DSS property name: UserData
        DSS property index: 31

        String (in quotes or parentheses) that gets passed to user-written model for defining the data required for that model.
        """
        return self._get_prop_string(31)

    @UserData.setter
    def UserData(self, value: AnyStr):
        self._set_string(31, value)

    @property
    def debugtrace(self) -> bool:
        """
        DSS property name: debugtrace
        DSS property index: 32

        {Yes | No }  Default is no.  Turn this on to capture the progress of the PVSystem model for each iteration.  Creates a separate file for each PVSystem element named "PVSystem_name.CSV".
        """
        return self._lib.Obj_GetInt32(self._ptr, 32) != 0

    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 32, value)

    @property
    def VarFollowInverter(self) -> bool:
        """
        DSS property name: VarFollowInverter
        DSS property index: 33

        Boolean variable (Yes|No) or (True|False). Defaults to False which indicates that the reactive power generation/absorption does not respect the inverter status.When set to True, the PVSystem reactive power generation/absorption will cease when the inverter status is off, due to panel kW dropping below %Cutout.  The reactive power generation/absorption will begin again when the panel kW is above %Cutin.  When set to False, the PVSystem will generate/absorb reactive power regardless of the status of the inverter.
        """
        return self._lib.Obj_GetInt32(self._ptr, 33) != 0

    @VarFollowInverter.setter
    def VarFollowInverter(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 33, value)

    @property
    def DutyStart(self) -> float:
        """
        DSS property name: DutyStart
        DSS property index: 34

        Starting time offset [hours] into the duty cycle shape for this PVSystem, defaults to 0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 34)

    @DutyStart.setter
    def DutyStart(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 34, value)

    @property
    def WattPriority(self) -> bool:
        """
        DSS property name: WattPriority
        DSS property index: 35

        {Yes/No*/True/False} Set inverter to watt priority instead of the default var priority
        """
        return self._lib.Obj_GetInt32(self._ptr, 35) != 0

    @WattPriority.setter
    def WattPriority(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 35, value)

    @property
    def PFPriority(self) -> bool:
        """
        DSS property name: PFPriority
        DSS property index: 36

        {Yes/No*/True/False} Set inverter to operate with PF priority when in constant PF mode. If "Yes", value assigned to "WattPriority" is neglected. If controlled by an InvControl with either Volt-Var or DRC or both functions activated, PF priority is neglected and "WattPriority" is considered. Default = No.
        """
        return self._lib.Obj_GetInt32(self._ptr, 36) != 0

    @PFPriority.setter
    def PFPriority(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 36, value)

    @property
    def pctPminNoVars(self) -> float:
        """
        DSS property name: %PminNoVars
        DSS property index: 37

        Minimum active power as percentage of Pmpp under which there is no vars production/absorption.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 37)

    @pctPminNoVars.setter
    def pctPminNoVars(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 37, value)

    @property
    def pctPminkvarMax(self) -> float:
        """
        DSS property name: %PminkvarMax
        DSS property index: 38

        Minimum active power as percentage of Pmpp that allows the inverter to produce/absorb reactive power up to its kvarMax or kvarMaxAbs.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 38)

    @pctPminkvarMax.setter
    def pctPminkvarMax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 38, value)

    @property
    def kvarMax(self) -> float:
        """
        DSS property name: kvarMax
        DSS property index: 39

        Indicates the maximum reactive power GENERATION (un-signed numerical variable in kvar) for the inverter (as an un-signed value). Defaults to kVA rating of the inverter.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 39)

    @kvarMax.setter
    def kvarMax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 39, value)

    @property
    def kvarMaxAbs(self) -> float:
        """
        DSS property name: kvarMaxAbs
        DSS property index: 40

        Indicates the maximum reactive power ABSORPTION (un-signed numerical variable in kvar) for the inverter (as an un-signed value). Defaults to kVA rating of the inverter.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 40)

    @kvarMaxAbs.setter
    def kvarMaxAbs(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 40, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 41

        Name of harmonic voltage or current spectrum for this PVSystem element. A harmonic voltage source is assumed for the inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_prop_string(41)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(41, value)
            return

        self._set_string(41, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 41

        Name of harmonic voltage or current spectrum for this PVSystem element. A harmonic voltage source is assumed for the inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_obj(41, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(41, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 42

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 42)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 42, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 43

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 43) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 43, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 44

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(44, value)

class UPFC(DSSObj):
    _cls_name = 'UPFC'
    _cls_idx = 35
    _cls_prop_idx = {
        'bus1': 1,
        'bus2': 2,
        'refkv': 3,
        'pf': 4,
        'frequency': 5,
        'phases': 6,
        'xs': 7,
        'tol1': 8,
        'mode': 9,
        'vpqmax': 10,
        'losscurve': 11,
        'vhlimit': 12,
        'vllimit': 13,
        'climit': 14,
        'refkv2': 15,
        'kvarlimit': 16,
        'spectrum': 17,
        'basefreq': 18,
        'enabled': 19,
        'like': 20,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which the input terminal (1) is connected.
        bus1=busname.1.3
        bus1=busname.1.2.3
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def bus2(self) -> str:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of bus to which the output terminal (2) is connected.
        bus2=busname.1.2
        bus2=busname.1.2.3
        """
        return self._get_prop_string(2)

    @bus2.setter
    def bus2(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def refkv(self) -> float:
        """
        DSS property name: refkv
        DSS property index: 3

        Base Voltage expected at the output of the UPFC

        "refkv=0.24"
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @refkv.setter
    def refkv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def pf(self) -> float:
        """
        DSS property name: pf
        DSS property index: 4

        Power factor target at the input terminal.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @pf.setter
    def pf(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def frequency(self) -> float:
        """
        DSS property name: frequency
        DSS property index: 5

        UPFC working frequency.  Defaults to system default base frequency.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @frequency.setter
    def frequency(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 6

        Number of phases.  Defaults to 1 phase (2 terminals, 1 conductor per terminal).
        """
        return self._lib.Obj_GetInt32(self._ptr, 6)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def Xs(self) -> float:
        """
        DSS property name: Xs
        DSS property index: 7

        Reactance of the series transformer of the UPFC, ohms (default=0.7540 ... 2 mH)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @Xs.setter
    def Xs(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def Tol1(self) -> float:
        """
        DSS property name: Tol1
        DSS property index: 8

        Tolerance in pu for the series PI controller
        Tol1=0.02 is the format used to define 2% tolerance (Default=2%)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @Tol1.setter
    def Tol1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def Mode(self) -> int:
        """
        DSS property name: Mode
        DSS property index: 9

        Integer used to define the control mode of the UPFC: 

        0 = Off, 
        1 = Voltage regulator, 
        2 = Phase angle regulator, 
        3 = Dual mode
        4 = It is a control mode where the user can set two different set points to create a secure GAP, these references must be defined in the parameters RefkV and RefkV2. The only restriction when setting these values is that RefkV must be higher than RefkV2. 
        5 = In this mode the user can define the same GAP using two set points as in control mode 4. The only difference between mode 5 and mode 4 is that in mode 5, the UPFC controller performs dual control actions just as in control mode 3
        """
        return self._lib.Obj_GetInt32(self._ptr, 9)

    @Mode.setter
    def Mode(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 9, value)

    @property
    def VpqMax(self) -> float:
        """
        DSS property name: VpqMax
        DSS property index: 10

        Maximum voltage (in volts) delivered by the series voltage source (Default = 24 V)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @VpqMax.setter
    def VpqMax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def LossCurve(self) -> str:
        """
        DSS property name: LossCurve
        DSS property index: 11

        Name of the XYCurve for describing the losses behavior as a function of the voltage at the input of the UPFC
        """
        return self._get_prop_string(11)

    @LossCurve.setter
    def LossCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(11, value)
            return

        self._set_string(11, value)

    @property
    def LossCurve_obj(self) -> XYcurve:
        """
        DSS property name: LossCurve
        DSS property index: 11

        Name of the XYCurve for describing the losses behavior as a function of the voltage at the input of the UPFC
        """
        return self._get_obj(11, XYcurve)

    @LossCurve_obj.setter
    def LossCurve_obj(self, value: XYcurve):
        self._set_obj(11, value)

    @property
    def VHLimit(self) -> float:
        """
        DSS property name: VHLimit
        DSS property index: 12

        High limit for the voltage at the input of the UPFC, if the voltage is above this value the UPFC turns off. This value is specified in Volts (default 300 V)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @VHLimit.setter
    def VHLimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def VLLimit(self) -> float:
        """
        DSS property name: VLLimit
        DSS property index: 13

        low limit for the voltage at the input of the UPFC, if voltage is below this value the UPFC turns off. This value is specified in Volts (default 125 V)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @VLLimit.setter
    def VLLimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def CLimit(self) -> float:
        """
        DSS property name: CLimit
        DSS property index: 14

        Current Limit for the UPFC, if the current passing through the UPFC is higher than this value the UPFC turns off. This value is specified in Amps (Default 265 A)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @CLimit.setter
    def CLimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def refkv2(self) -> float:
        """
        DSS property name: refkv2
        DSS property index: 15

        Base Voltage expected at the output of the UPFC for control modes 4 and 5.

        This reference must be lower than refkv, see control modes 4 and 5 for details
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @refkv2.setter
    def refkv2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def kvarLimit(self) -> float:
        """
        DSS property name: kvarLimit
        DSS property index: 16

        Maximum amount of reactive power (kvar) that can be absorved by the UPFC (Default = 5)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @kvarLimit.setter
    def kvarLimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 17

        Name of harmonic spectrum for this source.  Default is "defaultUPFC", which is defined when the DSS starts.
        """
        return self._get_prop_string(17)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(17, value)
            return

        self._set_string(17, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 17

        Name of harmonic spectrum for this source.  Default is "defaultUPFC", which is defined when the DSS starts.
        """
        return self._get_obj(17, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(17, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 18

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 19

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 19) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 19, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 20

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(20, value)

class UPFCControl(DSSObj):
    _cls_name = 'UPFCControl'
    _cls_idx = 36
    _cls_prop_idx = {
        'upfclist': 1,
        'basefreq': 2,
        'enabled': 3,
        'like': 4,
    }

    @property
    def UPFCList(self) -> List[str]:
        """
        DSS property name: UPFCList
        DSS property index: 1

        The list of all the UPFC devices to be controlled by this controller, If left empty, this control will apply for all UPFCs in the model.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 1)

    @UPFCList.setter
    def UPFCList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 1, value_ptr, value_count)
        self._check_for_error()

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 2

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 3

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 4

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(4, value)

class ESPVLControl(DSSObj):
    _cls_name = 'ESPVLControl'
    _cls_idx = 37
    _cls_prop_idx = {
        'element': 1,
        'terminal': 2,
        'type': 3,
        'kwband': 4,
        'kvarlimit': 5,
        'localcontrollist': 6,
        'localcontrolweights': 7,
        'pvsystemlist': 8,
        'pvsystemweights': 9,
        'storagelist': 10,
        'storageweights': 11,
        'basefreq': 12,
        'enabled': 13,
        'like': 14,
    }

    # Class-specific enumerations
    class ESPVLControlType(IntEnum):
        """ESPVLControl: Type (DSS enumeration for ESPVLControl)"""
        SystemController = 1 # SystemController
        LocalController = 2 # LocalController


    @property
    def Element(self) -> str:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_prop_string(1)

    @Element.setter
    def Element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def Element_obj(self) -> DSSObj:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_obj(1, None)

    @Element_obj.setter
    def Element_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def Terminal(self) -> int:
        """
        DSS property name: Terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the ESPVLControl control is connected. 1 or 2, typically.  Default is 1. Make sure you have the direction on the power matching the sign of kWLimit.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @Terminal.setter
    def Terminal(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def Type(self) -> ESPVLControlType:
        """
        DSS property name: Type
        DSS property index: 3

        Type of controller.  1= System Controller; 2= Local controller. 
        """
        return ESPVLControlType(self._lib.Obj_GetInt32(self._ptr, 3))

    @Type.setter
    def Type(self, value: Union[AnyStr, int, ESPVLControlType]):
        if not isinstance(value, int):
            self._set_string(3, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def Type_str(self) -> str:
        """
        DSS property name: Type
        DSS property index: 3

        Type of controller.  1= System Controller; 2= Local controller. 
        """
        return self._get_prop_string(3)

    @Type_str.setter
    def Type_str(self, value: AnyStr):
        self.Type = value

    @property
    def kWBand(self) -> float:
        """
        DSS property name: kWBand
        DSS property index: 4

        Bandwidth (kW) of the dead band around the target limit.No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kWBand.setter
    def kWBand(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def kvarlimit(self) -> float:
        """
        DSS property name: kvarlimit
        DSS property index: 5

        Max kvar to be delivered through the element.  Uses same dead band as kW.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kvarlimit.setter
    def kvarlimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def LocalControlList(self) -> List[str]:
        """
        DSS property name: LocalControlList
        DSS property index: 6

        Array list of ESPVLControl local controller objects to be dispatched by System Controller. If not specified, all ESPVLControl devices with type=local in the circuit not attached to another controller are assumed to be part of this controller's fleet.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 6)

    @LocalControlList.setter
    def LocalControlList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 6, value_ptr, value_count)
        self._check_for_error()

    @property
    def LocalControlWeights(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: LocalControlWeights
        DSS property index: 7

        Array of proportional weights corresponding to each ESPVLControl local controller in the LocalControlList.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @LocalControlWeights.setter
    def LocalControlWeights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def PVSystemList(self) -> List[str]:
        """
        DSS property name: PVSystemList
        DSS property index: 8

        Array list of PVSystem objects to be dispatched by a Local Controller. 
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 8)

    @PVSystemList.setter
    def PVSystemList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 8, value_ptr, value_count)
        self._check_for_error()

    @property
    def PVSystemWeights(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: PVSystemWeights
        DSS property index: 9

        Array of proportional weights corresponding to each PVSystem in the PVSystemList.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 9)

    @PVSystemWeights.setter
    def PVSystemWeights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def StorageList(self) -> List[str]:
        """
        DSS property name: StorageList
        DSS property index: 10

        Array list of Storage objects to be dispatched by Local Controller. 
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 10)

    @StorageList.setter
    def StorageList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 10, value_ptr, value_count)
        self._check_for_error()

    @property
    def StorageWeights(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: StorageWeights
        DSS property index: 11

        Array of proportional weights corresponding to each Storage object in the StorageControlList.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 11)

    @StorageWeights.setter
    def StorageWeights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 12

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 13

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 13) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:                    New Capacitor.C2 like=c1  ...
        """
        self._set_string(14, value)

class IndMach012(DSSObj):
    _cls_name = 'IndMach012'
    _cls_idx = 38
    _cls_prop_idx = {
        'phases': 1,
        'bus1': 2,
        'kv': 3,
        'kw': 4,
        'pf': 5,
        'conn': 6,
        'kva': 7,
        'h': 8,
        'd': 9,
        'purs': 10,
        'puxs': 11,
        'purr': 12,
        'puxr': 13,
        'puxm': 14,
        'slip': 15,
        'maxslip': 16,
        'slipoption': 17,
        'yearly': 18,
        'daily': 19,
        'duty': 20,
        'debugtrace': 21,
        'spectrum': 22,
        'basefreq': 23,
        'enabled': 24,
        'like': 25,
    }

    # Class-specific enumerations
    class IndMach012SlipOption(IntEnum):
        """IndMach012: Slip Option (DSS enumeration for IndMach012)"""
        VariableSlip = 0 # VariableSlip
        FixedSlip = 1 # FixedSlip


    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this Induction Machine.  
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the Induction Machine is connected.  May include specific node specification.
        """
        return self._get_prop_string(2)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def kv(self) -> float:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV. For 2- and 3-phase machines, specify phase-phase kV. Otherwise, specify actual kV across each branch of the machine. If wye (star), specify phase-neutral kV. If delta or phase-phase connected, specify phase-phase kV.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kv.setter
    def kv(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def kW(self) -> float:
        """
        DSS property name: kW
        DSS property index: 4

        Shaft Power, kW, for the Induction Machine.  A positive value denotes power for a load. 
        Negative value denotes an induction generator. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kW.setter
    def kW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def pf(self) -> float:
        """
        DSS property name: pf
        DSS property index: 5

        [Read Only] Present power factor for the machine. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @pf.setter
    def pf(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 6

        Connection of stator: Delta or Wye. Default is Delta.
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 6))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(6, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 6

        Connection of stator: Delta or Wye. Default is Delta.
        """
        return self._get_prop_string(6)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kVA(self) -> float:
        """
        DSS property name: kVA
        DSS property index: 7

        Rated kVA for the machine.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @kVA.setter
    def kVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def H(self) -> float:
        """
        DSS property name: H
        DSS property index: 8

        Per unit mass constant of the machine.  MW-sec/MVA.  Default is 1.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @H.setter
    def H(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def D(self) -> float:
        """
        DSS property name: D
        DSS property index: 9

        Damping constant.  Usual range is 0 to 4. Default is 1.0.  Adjust to get damping in Dynamics mode,
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @D.setter
    def D(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def puRs(self) -> float:
        """
        DSS property name: puRs
        DSS property index: 10

        Per unit stator resistance. Default is 0.0053.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @puRs.setter
    def puRs(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def puXs(self) -> float:
        """
        DSS property name: puXs
        DSS property index: 11

        Per unit stator leakage reactance. Default is 0.106.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @puXs.setter
    def puXs(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def puRr(self) -> float:
        """
        DSS property name: puRr
        DSS property index: 12

        Per unit rotor  resistance. Default is 0.007.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @puRr.setter
    def puRr(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def puXr(self) -> float:
        """
        DSS property name: puXr
        DSS property index: 13

        Per unit rotor leakage reactance. Default is 0.12.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @puXr.setter
    def puXr(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def puXm(self) -> float:
        """
        DSS property name: puXm
        DSS property index: 14

        Per unit magnetizing reactance.Default is 4.0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @puXm.setter
    def puXm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def Slip(self) -> float:
        """
        DSS property name: Slip
        DSS property index: 15

        Initial slip value. Default is 0.007
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @Slip.setter
    def Slip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def MaxSlip(self) -> float:
        """
        DSS property name: MaxSlip
        DSS property index: 16

        Max slip value to allow. Default is 0.1. Set this before setting slip.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @MaxSlip.setter
    def MaxSlip(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def SlipOption(self) -> IndMach012SlipOption:
        """
        DSS property name: SlipOption
        DSS property index: 17

        Option for slip model. One of {fixedslip | variableslip*  }
        """
        return IndMach012SlipOption(self._lib.Obj_GetInt32(self._ptr, 17))

    @SlipOption.setter
    def SlipOption(self, value: Union[AnyStr, int, IndMach012SlipOption]):
        if not isinstance(value, int):
            self._set_string(17, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 17, value)

    @property
    def SlipOption_str(self) -> str:
        """
        DSS property name: SlipOption
        DSS property index: 17

        Option for slip model. One of {fixedslip | variableslip*  }
        """
        return self._get_prop_string(17)

    @SlipOption_str.setter
    def SlipOption_str(self, value: AnyStr):
        self.SlipOption = value

    @property
    def Yearly(self) -> str:
        """
        DSS property name: Yearly
        DSS property index: 18

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_prop_string(18)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(18, value)
            return

        self._set_string(18, value)

    @property
    def Yearly_obj(self) -> LoadShape:
        """
        DSS property name: Yearly
        DSS property index: 18

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_obj(18, LoadShape)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_obj(18, value)

    @property
    def Daily(self) -> str:
        """
        DSS property name: Daily
        DSS property index: 19

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_prop_string(19)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(19, value)
            return

        self._set_string(19, value)

    @property
    def Daily_obj(self) -> LoadShape:
        """
        DSS property name: Daily
        DSS property index: 19

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_obj(19, LoadShape)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_obj(19, value)

    @property
    def Duty(self) -> str:
        """
        DSS property name: Duty
        DSS property index: 20

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_prop_string(20)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_obj(20, value)
            return

        self._set_string(20, value)

    @property
    def Duty_obj(self) -> LoadShape:
        """
        DSS property name: Duty
        DSS property index: 20

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_obj(20, LoadShape)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_obj(20, value)

    @property
    def Debugtrace(self) -> bool:
        """
        DSS property name: Debugtrace
        DSS property index: 21

        [Yes | No*] Write DebugTrace file.
        """
        return self._lib.Obj_GetInt32(self._ptr, 21) != 0

    @Debugtrace.setter
    def Debugtrace(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 21, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 22

        Name of harmonic voltage or current spectrum for this IndMach012. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_prop_string(22)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(22, value)
            return

        self._set_string(22, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 22

        Name of harmonic voltage or current spectrum for this IndMach012. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_obj(22, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(22, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 23

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 24

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 24) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 24, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 25

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(25, value)

class GICsource(DSSObj):
    _cls_name = 'GICsource'
    _cls_idx = 39
    _cls_prop_idx = {
        'volts': 1,
        'angle': 2,
        'frequency': 3,
        'phases': 4,
        'en': 5,
        'ee': 6,
        'lat1': 7,
        'lon1': 8,
        'lat2': 9,
        'lon2': 10,
        'spectrum': 11,
        'basefreq': 12,
        'enabled': 13,
        'like': 14,
    }

    @property
    def Volts(self) -> float:
        """
        DSS property name: Volts
        DSS property index: 1

        Voltage magnitude, in volts, of the GIC voltage induced across the associated line. When specified, induced voltage is assumed defined by Voltage and Angle properties. 

        Specify this value

        OR

        EN, EE, lat1, lon1, lat2, lon2. 

        Not both!!  Last one entered will take precedence. Assumed identical in each phase of the Line object.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 1)

    @Volts.setter
    def Volts(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 1, value)

    @property
    def angle(self) -> float:
        """
        DSS property name: angle
        DSS property index: 2

        Phase angle in degrees of first phase. Default=0.0.  See Voltage property
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @angle.setter
    def angle(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def frequency(self) -> float:
        """
        DSS property name: frequency
        DSS property index: 3

        Source frequency.  Defaults to  0.1 Hz. So GICSource=0 at power frequency.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @frequency.setter
    def frequency(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 4

        Number of phases.  Defaults to 3. All three phases are assumed in phase (zero sequence)
        """
        return self._lib.Obj_GetInt32(self._ptr, 4)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def EN(self) -> float:
        """
        DSS property name: EN
        DSS property index: 5

        Northward Electric field (V/km). If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @EN.setter
    def EN(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def EE(self) -> float:
        """
        DSS property name: EE
        DSS property index: 6

        Eastward Electric field (V/km).  If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @EE.setter
    def EE(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def Lat1(self) -> float:
        """
        DSS property name: Lat1
        DSS property index: 7

        Latitude of Bus1 of the line(degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @Lat1.setter
    def Lat1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def Lon1(self) -> float:
        """
        DSS property name: Lon1
        DSS property index: 8

        Longitude of Bus1 of the line (degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @Lon1.setter
    def Lon1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def Lat2(self) -> float:
        """
        DSS property name: Lat2
        DSS property index: 9

        Latitude of Bus2 of the line (degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @Lat2.setter
    def Lat2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def Lon2(self) -> float:
        """
        DSS property name: Lon2
        DSS property index: 10

        Longitude of Bus2 of the line (degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @Lon2.setter
    def Lon2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 11

        Not used.
        """
        return self._get_prop_string(11)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(11, value)
            return

        self._set_string(11, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 11

        Not used.
        """
        return self._get_obj(11, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(11, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 12

        Not used.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 13

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 13) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(14, value)

class AutoTrans(DSSObj):
    _cls_name = 'AutoTrans'
    _cls_idx = 40
    _cls_prop_idx = {
        'phases': 1,
        'windings': 2,
        'wdg': 3,
        'bus': 4,
        'conn': 5,
        'kv': 6,
        'kva': 7,
        'tap': 8,
        'pctr': 9,
        '%r': 9,
        'rdcohms': 10,
        'core': 11,
        'buses': 12,
        'conns': 13,
        'kvs': 14,
        'kvas': 15,
        'taps': 16,
        'xhx': 17,
        'xht': 18,
        'xxt': 19,
        'xscarray': 20,
        'thermal': 21,
        'n': 22,
        'm': 23,
        'flrise': 24,
        'hsrise': 25,
        'pctloadloss': 26,
        '%loadloss': 26,
        'pctnoloadloss': 27,
        '%noloadloss': 27,
        'normhkva': 28,
        'emerghkva': 29,
        'sub': 30,
        'maxtap': 31,
        'mintap': 32,
        'numtaps': 33,
        'subname': 34,
        'pctimag': 35,
        '%imag': 35,
        'ppm_antifloat': 36,
        'pctrs': 37,
        '%rs': 37,
        'xrconst': 38,
        'leadlag': 39,
        'wdgcurrents': 40,
        'normamps': 41,
        'emergamps': 42,
        'faultrate': 43,
        'pctperm': 44,
        'repair': 45,
        'basefreq': 46,
        'enabled': 47,
        'like': 48,
    }

    # Class-specific enumerations
    class AutoTransConnection(IntEnum):
        """AutoTrans: Connection (DSS enumeration for AutoTrans)"""
        wye = 0 # wye
        delta = 1 # delta
        series = 2 # series
        y = 0 # y
        ln = 0 # ln
        ll = 1 # ll


    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of phases this AutoTrans. Default is 3.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def windings(self) -> int:
        """
        DSS property name: windings
        DSS property index: 2

        Number of windings, this AutoTranss. (Also is the number of terminals) Default is 2. This property triggers memory allocation for the AutoTrans and will cause other properties to revert to default values.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @windings.setter
    def windings(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def wdg(self) -> int:
        """
        DSS property name: wdg
        DSS property index: 3

        Set this = to the number of the winding you wish to define.  Then set the values for this winding.  Winding 1 is always the Series winding. Winding 2 is always Common winding (wye connected). Repeat for each winding.  Alternatively, use the array collections (buses, kVAs, etc.) to define the windings.  Note: reactances are BETWEEN pairs of windings; they are not the property of a single winding.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @wdg.setter
    def wdg(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def bus(self) -> List[str]:
        """
        DSS property name: bus
        DSS property index: 4

        Bus connection spec for this winding.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 4)

    @bus.setter
    def bus(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 4, value_ptr, value_count)
        self._check_for_error()

    @property
    def conn(self) -> List[AutoTransConnection]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {Series, wye*, Delta, LN, LL }. Default is "wye" with the neutral solidly grounded. 
        For AutoTrans, Winding 1 is always Series and Winding 2 (the Common winding) is always Wye. 
        If only 2 windings, no need to specify connections.
        """
        return [AutoTransConnection(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 5)]

    @conn.setter
    def conn(self, value: Union[List[Union[int,AutoTransConnection]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(5, value)
            return    
        self._set_int32_array(5, value)

    @property
    def conn_str(self) -> List[str]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {Series, wye*, Delta, LN, LL }. Default is "wye" with the neutral solidly grounded. 
        For AutoTrans, Winding 1 is always Series and Winding 2 (the Common winding) is always Wye. 
        If only 2 windings, no need to specify connections.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 5)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kV(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kV
        DSS property index: 6

        For 2-or 3-phase, enter phase-phase kV rating.  Otherwise, kV rating of the actual winding. Specify H terminal kV rating for Series winding.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 6)

    @kV.setter
    def kV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def kVA(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVA
        DSS property index: 7

        Base kVA rating of the winding. Side effect: forces change of max normal and emerg kVA ratings.If 2-winding AutoTrans, forces other winding to same value. When winding 1 is defined, all other windings are defaulted to the same rating and the first two winding resistances are defaulted to the %loadloss value.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @kVA.setter
    def kVA(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def tap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: tap
        DSS property index: 8

        Per unit tap that this winding is on.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 8)

    @tap.setter
    def tap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def pctR(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: %R
        DSS property index: 9

        Percent ac resistance this winding.  This value is for the power flow model.Is derived from the full load losses in the transformer test report.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 9)

    @pctR.setter
    def pctR(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def Rdcohms(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Rdcohms
        DSS property index: 10

        Winding dc resistance in OHMS. Specify this for GIC analysis. From transformer test report (divide by number of phases). Defaults to 85% of %R property (the ac value that includes stray losses).
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 10)

    @Rdcohms.setter
    def Rdcohms(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Core(self) -> CoreType:
        """
        DSS property name: Core
        DSS property index: 11

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis in auxiliary programs. Not used inside OpenDSS.
        """
        return CoreType(self._lib.Obj_GetInt32(self._ptr, 11))

    @Core.setter
    def Core(self, value: Union[AnyStr, int, CoreType]):
        if not isinstance(value, int):
            self._set_string(11, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 11, value)

    @property
    def Core_str(self) -> str:
        """
        DSS property name: Core
        DSS property index: 11

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis in auxiliary programs. Not used inside OpenDSS.
        """
        return self._get_prop_string(11)

    @Core_str.setter
    def Core_str(self, value: AnyStr):
        self.Core = value

    @property
    def buses(self) -> List[str]:
        """
        DSS property name: buses
        DSS property index: 12

        Use this to specify all the bus connections at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus]
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 12)

    @buses.setter
    def buses(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 12, value_ptr, value_count)
        self._check_for_error()

    @property
    def conns(self) -> List[AutoTransConnection]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus] ~ conns=(series, wye)
        """
        return [AutoTransConnection(val) for val in self._get_int32_list(self._lib.Obj_GetInt32Array, self._ptr, 13)]

    @conns.setter
    def conns(self, value: Union[List[Union[int,AutoTransConnection]], List[AnyStr]]):
        if not isinstance(value, int):
            self._set_string_array(13, value)
            return    
        self._set_int32_array(13, value)

    @property
    def conns_str(self) -> List[str]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus] ~ conns=(series, wye)
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 13)

    @conns_str.setter
    def conns_str(self, value: AnyStr):
        self.conns = value

    @property
    def kVs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVs
        DSS property index: 14

        Use this to specify the kV ratings of all windings at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus] 
        ~ conns=(series, wye)
        ~ kvs=(115, 12.47)

        See kV= property for voltage rules.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 14)

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def kVAs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVAs
        DSS property index: 15

        Use this to specify the kVA ratings of all windings at once using an array.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 15)

    @kVAs.setter
    def kVAs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(15, value)

    @property
    def taps(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: taps
        DSS property index: 16

        Use this to specify the p.u. tap of all windings at once using an array.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 16)

    @taps.setter
    def taps(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def XHX(self) -> float:
        """
        DSS property name: XHX
        DSS property index: 17

        Use this to specify the percent reactance, H-L (winding 1 to winding 2).  Use for 2- or 3-winding AutoTranss. On the kVA base of winding 1(H-X). 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @XHX.setter
    def XHX(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def XHT(self) -> float:
        """
        DSS property name: XHT
        DSS property index: 18

        Use this to specify the percent reactance, H-T (winding 1 to winding 3).  Use for 3-winding AutoTranss only. On the kVA base of winding 1(H-X). 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @XHT.setter
    def XHT(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def XXT(self) -> float:
        """
        DSS property name: XXT
        DSS property index: 19

        Use this to specify the percent reactance, L-T (winding 2 to winding 3).  Use for 3-winding AutoTranss only. On the kVA base of winding 1(H-X).  
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @XXT.setter
    def XXT(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def XSCarray(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: XSCarray
        DSS property index: 20

        Use this to specify the percent reactance between all pairs of windings as an array. All values are on the kVA base of winding 1.  The order of the values is as follows:

        (x12 13 14... 23 24.. 34 ..)  

        There will be n(n-1)/2 values, where n=number of windings.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 20)

    @XSCarray.setter
    def XSCarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(20, value)

    @property
    def thermal(self) -> float:
        """
        DSS property name: thermal
        DSS property index: 21

        Thermal time constant of the AutoTrans in hours.  Typically about 2.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @thermal.setter
    def thermal(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def n(self) -> float:
        """
        DSS property name: n
        DSS property index: 22

        n Exponent for thermal properties in IEEE C57.  Typically 0.8.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @n.setter
    def n(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def m(self) -> float:
        """
        DSS property name: m
        DSS property index: 23

        m Exponent for thermal properties in IEEE C57.  Typically 0.9 - 1.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @m.setter
    def m(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def flrise(self) -> float:
        """
        DSS property name: flrise
        DSS property index: 24

        Temperature rise, deg C, for full load.  Default is 65.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @flrise.setter
    def flrise(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def hsrise(self) -> float:
        """
        DSS property name: hsrise
        DSS property index: 25

        Hot spot temperature rise, deg C.  Default is 15.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @hsrise.setter
    def hsrise(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def pctloadloss(self) -> float:
        """
        DSS property name: %loadloss
        DSS property index: 26

        Percent load loss at full load. The %R of the High and Low windings (1 and 2) are adjusted to agree at rated kVA loading.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 26)

    @pctloadloss.setter
    def pctloadloss(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 26, value)

    @property
    def pctnoloadloss(self) -> float:
        """
        DSS property name: %noloadloss
        DSS property index: 27

        Percent no load losses at rated excitatation voltage. Default is 0. Converts to a resistance in parallel with the magnetizing impedance in each winding.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @pctnoloadloss.setter
    def pctnoloadloss(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def normhkVA(self) -> float:
        """
        DSS property name: normhkVA
        DSS property index: 28

        Normal maximum kVA rating of H winding (winding 1+2).  Usually 100% - 110% ofmaximum nameplate rating, depending on load shape. Defaults to 110% of kVA rating of Winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 28)

    @normhkVA.setter
    def normhkVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 28, value)

    @property
    def emerghkVA(self) -> float:
        """
        DSS property name: emerghkVA
        DSS property index: 29

        Emergency (contingency)  kVA rating of H winding (winding 1+2).  Usually 140% - 150% ofmaximum nameplate rating, depending on load shape. Defaults to 150% of kVA rating of Winding 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 29)

    @emerghkVA.setter
    def emerghkVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 29, value)

    @property
    def sub(self) -> bool:
        """
        DSS property name: sub
        DSS property index: 30

        ={Yes|No}  Designates whether this AutoTrans is to be considered a substation.Default is No.
        """
        return self._lib.Obj_GetInt32(self._ptr, 30) != 0

    @sub.setter
    def sub(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 30, value)

    @property
    def MaxTap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: MaxTap
        DSS property index: 31

        Max per unit tap for the active winding.  Default is 1.10
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 31)

    @MaxTap.setter
    def MaxTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(31, value)

    @property
    def MinTap(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: MinTap
        DSS property index: 32

        Min per unit tap for the active winding.  Default is 0.90
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 32)

    @MinTap.setter
    def MinTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(32, value)

    @property
    def NumTaps(self) -> npt.NDArray[np.int32]:
        """
        DSS property name: NumTaps
        DSS property index: 33

        Total number of taps between min and max tap.  Default is 32 (16 raise and 16 lower taps about the neutral position). The neutral position is not counted.
        """
        return self._get_int32_array(self._lib.Obj_GetInt32Array, self._ptr, 33)

    @NumTaps.setter
    def NumTaps(self, value: npt.NDArray[np.int32]):
        self._set_int32_array(33, value)

    @property
    def subname(self) -> str:
        """
        DSS property name: subname
        DSS property index: 34

        Substation Name. Optional. Default is null. If specified, printed on plots
        """
        return self._get_prop_string(34)

    @subname.setter
    def subname(self, value: AnyStr):
        self._set_string(34, value)

    @property
    def pctimag(self) -> float:
        """
        DSS property name: %imag
        DSS property index: 35

        Percent magnetizing current. Default=0.0. Magnetizing branch is in parallel with windings in each phase. Also, see "ppm_antifloat".
        """
        return self._lib.Obj_GetFloat64(self._ptr, 35)

    @pctimag.setter
    def pctimag(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 35, value)

    @property
    def ppm_antifloat(self) -> float:
        """
        DSS property name: ppm_antifloat
        DSS property index: 36

        Default=1 ppm.  Parts per million of AutoTrans winding VA rating connected to ground to protect against accidentally floating a winding without a reference. If positive then the effect is adding a very large reactance to ground.  If negative, then a capacitor.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 36)

    @ppm_antifloat.setter
    def ppm_antifloat(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 36, value)

    @property
    def pctRs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: %Rs
        DSS property index: 37

        Use this property to specify all the winding ac %resistances using an array. Example:

        New AutoTrans.T1 buses=[Hibus, lowbus] ~ %Rs=(0.2  0.3)
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 37)

    @pctRs.setter
    def pctRs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def XRConst(self) -> bool:
        """
        DSS property name: XRConst
        DSS property index: 38

        ={Yes|No} Default is NO. Signifies whether or not the X/R is assumed contant for harmonic studies.
        """
        return self._lib.Obj_GetInt32(self._ptr, 38) != 0

    @XRConst.setter
    def XRConst(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 38, value)

    @property
    def LeadLag(self) -> PhaseSequence:
        """
        DSS property name: LeadLag
        DSS property index: 39

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return PhaseSequence(self._lib.Obj_GetInt32(self._ptr, 39))

    @LeadLag.setter
    def LeadLag(self, value: Union[AnyStr, int, PhaseSequence]):
        if not isinstance(value, int):
            self._set_string(39, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 39, value)

    @property
    def LeadLag_str(self) -> str:
        """
        DSS property name: LeadLag
        DSS property index: 39

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return self._get_prop_string(39)

    @LeadLag_str.setter
    def LeadLag_str(self, value: AnyStr):
        self.LeadLag = value

    def WdgCurrents(self) -> str:
        """
        DSS property name: WdgCurrents
        DSS property index: 40

        (Read only) Makes winding currents available via return on query (? AutoTrans.TX.WdgCurrents). Order: Phase 1, Wdg 1, Wdg 2, ..., Phase 2 ...
        """
        # []
        # StringSilentROFunction
        return self._get_prop_string(self._lib.Obj_GetString(self._ptr, 40))

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 41

        Normal rated current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 41)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 41, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 42

        Maximum or emerg current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 42)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 42, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 43

        Failure rate per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 43)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 43, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 44

        Percent of failures that become permanent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 44)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 44, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 45

        Hours to repair.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 45)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 45, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 46

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 46)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 46, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 47

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 47) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 47, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 48

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(48, value)

class RegControl(DSSObj):
    _cls_name = 'RegControl'
    _cls_idx = 21
    _cls_prop_idx = {
        'transformer': 1,
        'winding': 2,
        'vreg': 3,
        'band': 4,
        'ptratio': 5,
        'ctprim': 6,
        'r': 7,
        'x': 8,
        'bus': 9,
        'delay': 10,
        'reversible': 11,
        'revvreg': 12,
        'revband': 13,
        'revr': 14,
        'revx': 15,
        'tapdelay': 16,
        'debugtrace': 17,
        'maxtapchange': 18,
        'inversetime': 19,
        'tapwinding': 20,
        'vlimit': 21,
        'ptphase': 22,
        'revthreshold': 23,
        'revdelay': 24,
        'revneutral': 25,
        'eventlog': 26,
        'remoteptratio': 27,
        'tapnum': 28,
        'reset': 29,
        'ldc_z': 30,
        'rev_z': 31,
        'cogen': 32,
        'basefreq': 33,
        'enabled': 34,
        'like': 35,
    }

    # Class-specific enumerations
    class RegControlPhaseSelection(IntEnum):
        """RegControl: Phase Selection (DSS enumeration for RegControl)"""
        min = -3 # min
        max = -2 # max


    @property
    def transformer(self) -> str:
        """
        DSS property name: transformer
        DSS property index: 1

        Name of Transformer or AutoTrans element to which the RegControl is connected. Do not specify the full object name; "Transformer" or "AutoTrans" is assumed for the object class.  Example:

        Transformer=Xfmr1
        """
        return self._get_prop_string(1)

    @transformer.setter
    def transformer(self, value: Union[AnyStr, Transformer, AutoTrans]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def transformer_obj(self) -> DSSObj:
        """
        DSS property name: transformer
        DSS property index: 1

        Name of Transformer or AutoTrans element to which the RegControl is connected. Do not specify the full object name; "Transformer" or "AutoTrans" is assumed for the object class.  Example:

        Transformer=Xfmr1
        """
        return self._get_obj(1, None)

    @transformer_obj.setter
    def transformer_obj(self, value: Union[Transformer, AutoTrans]):
        self._set_obj(1, value)

    @property
    def winding(self) -> int:
        """
        DSS property name: winding
        DSS property index: 2

        Number of the winding of the transformer element that the RegControl is monitoring. 1 or 2, typically.  Side Effect: Sets TAPWINDING property to the same winding.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @winding.setter
    def winding(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def vreg(self) -> float:
        """
        DSS property name: vreg
        DSS property index: 3

        Voltage regulator setting, in VOLTS, for the winding being controlled.  Multiplying this value times the ptratio should yield the voltage across the WINDING of the controlled transformer. Default is 120.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @vreg.setter
    def vreg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def band(self) -> float:
        """
        DSS property name: band
        DSS property index: 4

        Bandwidth in VOLTS for the controlled bus (see help for ptratio property).  Default is 3.0
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @band.setter
    def band(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def ptratio(self) -> float:
        """
        DSS property name: ptratio
        DSS property index: 5

        Ratio of the PT that converts the controlled winding voltage to the regulator control voltage. Default is 60.  If the winding is Wye, the line-to-neutral voltage is used.  Else, the line-to-line voltage is used. SIDE EFFECT: Also sets RemotePTRatio property.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @ptratio.setter
    def ptratio(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def CTprim(self) -> float:
        """
        DSS property name: CTprim
        DSS property index: 6

        Rating, in Amperes, of the primary CT rating for which the line amps convert to control rated amps.The typical default secondary ampere rating is 0.2 Amps (check with manufacturer specs). Current at which the LDC voltages match the R and X settings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @CTprim.setter
    def CTprim(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def R(self) -> float:
        """
        DSS property name: R
        DSS property index: 7

        R setting on the line drop compensator in the regulator, expressed in VOLTS.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @R.setter
    def R(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def X(self) -> float:
        """
        DSS property name: X
        DSS property index: 8

        X setting on the line drop compensator in the regulator, expressed in VOLTS.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @X.setter
    def X(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def bus(self) -> str:
        """
        DSS property name: bus
        DSS property index: 9

        Name of a bus (busname.nodename) in the system to use as the controlled bus instead of the bus to which the transformer winding is connected or the R and X line drop compensator settings.  Do not specify this value if you wish to use the line drop compensator settings.  Default is null string. Assumes the base voltage for this bus is the same as the transformer winding base specified above. Note: This bus (1-phase) WILL BE CREATED by the regulator control upon SOLVE if not defined by some other device. You can specify the node of the bus you wish to sample (defaults to 1). If specified, the RegControl is redefined as a 1-phase device since only one voltage is used.
        """
        return self._get_prop_string(9)

    @bus.setter
    def bus(self, value: AnyStr):
        self._set_string(9, value)

    @property
    def delay(self) -> float:
        """
        DSS property name: delay
        DSS property index: 10

        Time delay, in seconds, from when the voltage goes out of band to when the tap changing begins. This is used to determine which regulator control will act first. Default is 15.  You may specify any floating point number to achieve a model of whatever condition is necessary.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @delay.setter
    def delay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def reversible(self) -> bool:
        """
        DSS property name: reversible
        DSS property index: 11

        {Yes |No*} Indicates whether or not the regulator can be switched to regulate in the reverse direction. Default is No.Typically applies only to line regulators and not to LTC on a substation transformer.
        """
        return self._lib.Obj_GetInt32(self._ptr, 11) != 0

    @reversible.setter
    def reversible(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 11, value)

    @property
    def revvreg(self) -> float:
        """
        DSS property name: revvreg
        DSS property index: 12

        Voltage setting in volts for operation in the reverse direction.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @revvreg.setter
    def revvreg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def revband(self) -> float:
        """
        DSS property name: revband
        DSS property index: 13

        Bandwidth for operating in the reverse direction.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @revband.setter
    def revband(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def revR(self) -> float:
        """
        DSS property name: revR
        DSS property index: 14

        R line drop compensator setting for reverse direction.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @revR.setter
    def revR(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def revX(self) -> float:
        """
        DSS property name: revX
        DSS property index: 15

        X line drop compensator setting for reverse direction.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @revX.setter
    def revX(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def tapdelay(self) -> float:
        """
        DSS property name: tapdelay
        DSS property index: 16

        Delay in sec between tap changes. Default is 2. This is how long it takes between changes after the first change.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @tapdelay.setter
    def tapdelay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def debugtrace(self) -> bool:
        """
        DSS property name: debugtrace
        DSS property index: 17

        {Yes | No* }  Default is no.  Turn this on to capture the progress of the regulator model for each control iteration.  Creates a separate file for each RegControl named "REG_name.CSV".
        """
        return self._lib.Obj_GetInt32(self._ptr, 17) != 0

    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 17, value)

    @property
    def maxtapchange(self) -> int:
        """
        DSS property name: maxtapchange
        DSS property index: 18

        Maximum allowable tap change per control iteration in STATIC control mode.  Default is 16. 

        Set this to 1 to better approximate actual control action. 

        Set this to 0 to fix the tap in the current position.
        """
        return self._lib.Obj_GetInt32(self._ptr, 18)

    @maxtapchange.setter
    def maxtapchange(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def inversetime(self) -> bool:
        """
        DSS property name: inversetime
        DSS property index: 19

        {Yes | No* } Default is no.  The time delay is adjusted inversely proportional to the amount the voltage is outside the band down to 10%.
        """
        return self._lib.Obj_GetInt32(self._ptr, 19) != 0

    @inversetime.setter
    def inversetime(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 19, value)

    @property
    def tapwinding(self) -> int:
        """
        DSS property name: tapwinding
        DSS property index: 20

        Winding containing the actual taps, if different than the WINDING property. Defaults to the same winding as specified by the WINDING property.
        """
        return self._lib.Obj_GetInt32(self._ptr, 20)

    @tapwinding.setter
    def tapwinding(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 20, value)

    @property
    def vlimit(self) -> float:
        """
        DSS property name: vlimit
        DSS property index: 21

        Voltage Limit for bus to which regulated winding is connected (e.g. first customer). Default is 0.0. Set to a value greater then zero to activate this function.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @vlimit.setter
    def vlimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def PTphase(self) -> Union[RegControlPhaseSelection, int]:
        """
        DSS property name: PTphase
        DSS property index: 22

        For multi-phase transformers, the number of the phase being monitored or one of { MAX | MIN} for all phases. Default=1. Must be less than or equal to the number of phases. Ignored for regulated bus.
        """
        value = self._lib.Obj_GetInt32(self._ptr, 22)
        if value > 0:
            return value
    
        return RegControlPhaseSelection(value)

    @PTphase.setter
    def PTphase(self, value: Union[AnyStr, int, RegControlPhaseSelection]):
        if not isinstance(value, int):
            self._set_string(22, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    @property
    def PTphase_str(self) -> str:
        """
        DSS property name: PTphase
        DSS property index: 22

        For multi-phase transformers, the number of the phase being monitored or one of { MAX | MIN} for all phases. Default=1. Must be less than or equal to the number of phases. Ignored for regulated bus.
        """
        return self._get_prop_string(22)

    @PTphase_str.setter
    def PTphase_str(self, value: AnyStr):
        self.PTphase = value

    @property
    def revThreshold(self) -> float:
        """
        DSS property name: revThreshold
        DSS property index: 23

        kW reverse power threshold for reversing the direction of the regulator. Default is 100.0 kw.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @revThreshold.setter
    def revThreshold(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def revDelay(self) -> float:
        """
        DSS property name: revDelay
        DSS property index: 24

        Time Delay in seconds (s) for executing the reversing action once the threshold for reversing has been exceeded. Default is 60 s.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @revDelay.setter
    def revDelay(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def revNeutral(self) -> bool:
        """
        DSS property name: revNeutral
        DSS property index: 25

        {Yes | No*} Default is no. Set this to Yes if you want the regulator to go to neutral in the reverse direction or in cogen operation.
        """
        return self._lib.Obj_GetInt32(self._ptr, 25) != 0

    @revNeutral.setter
    def revNeutral(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 25, value)

    @property
    def EventLog(self) -> bool:
        """
        DSS property name: EventLog
        DSS property index: 26

        {Yes/True* | No/False} Default is YES for regulator control. Log control actions to Eventlog.
        """
        return self._lib.Obj_GetInt32(self._ptr, 26) != 0

    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 26, value)

    @property
    def RemotePTRatio(self) -> float:
        """
        DSS property name: RemotePTRatio
        DSS property index: 27

        When regulating a bus (the Bus= property is set), the PT ratio required to convert actual voltage at the remote bus to control voltage. Is initialized to PTratio property. Set this property after setting PTratio.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 27)

    @RemotePTRatio.setter
    def RemotePTRatio(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 27, value)

    @property
    def TapNum(self) -> int:
        """
        DSS property name: TapNum
        DSS property index: 28

        An integer number indicating the tap position that the controlled transformer winding tap position is currently at, or is being set to.  If being set, and the value is outside the range of the transformer min or max tap, then set to the min or max tap position as appropriate. Default is 0
        """
        return self._lib.Obj_GetInt32(self._ptr, 28)

    @TapNum.setter
    def TapNum(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 28, value)

    def Reset(self, value: bool):
        """
        DSS property name: Reset
        DSS property index: 29

        {Yes | No} If Yes, forces Reset of this RegControl.
        """
        self._lib.Obj_SetInt32(self._ptr, 29, value)

    @property
    def LDC_Z(self) -> float:
        """
        DSS property name: LDC_Z
        DSS property index: 30

        Z value for Beckwith LDC_Z control option. Volts adjustment at rated control current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 30)

    @LDC_Z.setter
    def LDC_Z(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 30, value)

    @property
    def rev_Z(self) -> float:
        """
        DSS property name: rev_Z
        DSS property index: 31

        Reverse Z value for Beckwith LDC_Z control option.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 31)

    @rev_Z.setter
    def rev_Z(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 31, value)

    @property
    def Cogen(self) -> bool:
        """
        DSS property name: Cogen
        DSS property index: 32

        {Yes|No*} Default is No. The Cogen feature is activated. Continues looking forward if power reverses, but switches to reverse-mode LDC, vreg and band values.
        """
        return self._lib.Obj_GetInt32(self._ptr, 32) != 0

    @Cogen.setter
    def Cogen(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 32, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 33

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 33)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 33, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 34

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 34) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 34, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 35

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(35, value)

class InvControl(DSSObj):
    _cls_name = 'InvControl'
    _cls_idx = 41
    _cls_prop_idx = {
        'derlist': 1,
        'mode': 2,
        'combimode': 3,
        'vvc_curve1': 4,
        'hysteresis_offset': 5,
        'voltage_curvex_ref': 6,
        'avgwindowlen': 7,
        'voltwatt_curve': 8,
        'dbvmin': 9,
        'dbvmax': 10,
        'argralowv': 11,
        'argrahiv': 12,
        'dynreacavgwindowlen': 13,
        'deltaq_factor': 14,
        'voltagechangetolerance': 15,
        'varchangetolerance': 16,
        'voltwattyaxis': 17,
        'rateofchangemode': 18,
        'lpftau': 19,
        'risefalllimit': 20,
        'deltap_factor': 21,
        'eventlog': 22,
        'refreactivepower': 23,
        'activepchangetolerance': 24,
        'monvoltagecalc': 25,
        'monbus': 26,
        'monbusesvbase': 27,
        'voltwattch_curve': 28,
        'wattpf_curve': 29,
        'wattvar_curve': 30,
        'pvsystemlist': 31,
        'vsetpoint': 32,
        'basefreq': 33,
        'enabled': 34,
        'like': 35,
    }

    # Class-specific enumerations
    class InvControlControlMode(IntEnum):
        """InvControl: Control Mode (DSS enumeration for InvControl)"""
        Voltvar = 1 # Voltvar
        VoltWatt = 2 # VoltWatt
        DynamicReaccurr = 3 # DynamicReaccurr
        WattPF = 4 # WattPF
        Wattvar = 5 # Wattvar
        AVR = 6 # AVR

    class InvControlCombiMode(IntEnum):
        """InvControl: Combi Mode (DSS enumeration for InvControl)"""
        VV_VW = 1 # VV_VW
        VV_DRC = 2 # VV_DRC

    class InvControlVoltageCurveXRef(IntEnum):
        """InvControl: Voltage Curve X Ref (DSS enumeration for InvControl)"""
        Rated = 0 # Rated
        Avg = 1 # Avg
        RAvg = 2 # RAvg

    class InvControlVoltWattYAxis(IntEnum):
        """InvControl: Volt-watt Y-Axis (DSS enumeration for InvControl)"""
        PAvailablePU = 0 # PAvailablePU
        PMPPPU = 1 # PMPPPU
        PctPMPPPU = 2 # PctPMPPPU
        KVARatingPU = 3 # KVARatingPU

    class InvControlRateOfChangeMode(IntEnum):
        """InvControl: Rate-of-change Mode (DSS enumeration for InvControl)"""
        Inactive = 0 # Inactive
        LPF = 1 # LPF
        RiseFall = 2 # RiseFall

    class InvControlReactivePowerReference(IntEnum):
        """InvControl: Reactive Power Reference (DSS enumeration for InvControl)"""
        VARAVAL = 0 # VARAVAL
        VARMAX = 1 # VARMAX


    @property
    def DERList(self) -> List[str]:
        """
        DSS property name: DERList
        DSS property index: 1

        Array list of PVSystem and/or Storage elements to be controlled. If not specified, all PVSystem and Storage in the circuit are assumed to be controlled by this control. 

        No capability of hierarchical control between two controls for a single element is implemented at this time.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 1)

    @DERList.setter
    def DERList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 1, value_ptr, value_count)
        self._check_for_error()

    @property
    def Mode(self) -> InvControlControlMode:
        """
        DSS property name: Mode
        DSS property index: 2

        Smart inverter function in which the InvControl will control the PC elements specified in DERList, according to the options below:

        Must be one of: {VOLTVAR* | VOLTWATT | DYNAMICREACCURR | WATTPF | WATTVAR} 
        if the user desires to use modes simultaneously, then set the CombiMode property. Setting the Mode to any valid value disables combination mode.

        In volt-var mode (Default). This mode attempts to CONTROL the vars, according to one or two volt-var curves, depending on the monitored voltages, present active power output, and the capabilities of the PVSystem/Storage. 

        In volt-watt mode. This mode attempts to LIMIT the watts, according to one defined volt-watt curve, depending on the monitored voltages and the capabilities of the PVSystem/Storage. 

        In dynamic reactive current mode. This mode attempts to increasingly counter deviations by CONTROLLING vars, depending on the monitored voltages, present active power output, and the capabilities of the of the PVSystem/Storage.

        In watt-pf mode. This mode attempts to CONTROL the vars, according to a watt-pf curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 

        In watt-var mode. This mode attempts to CONTROL the vars, according to a watt-var curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 
        """
        return InvControlControlMode(self._lib.Obj_GetInt32(self._ptr, 2))

    @Mode.setter
    def Mode(self, value: Union[AnyStr, int, InvControlControlMode]):
        if not isinstance(value, int):
            self._set_string(2, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def Mode_str(self) -> str:
        """
        DSS property name: Mode
        DSS property index: 2

        Smart inverter function in which the InvControl will control the PC elements specified in DERList, according to the options below:

        Must be one of: {VOLTVAR* | VOLTWATT | DYNAMICREACCURR | WATTPF | WATTVAR} 
        if the user desires to use modes simultaneously, then set the CombiMode property. Setting the Mode to any valid value disables combination mode.

        In volt-var mode (Default). This mode attempts to CONTROL the vars, according to one or two volt-var curves, depending on the monitored voltages, present active power output, and the capabilities of the PVSystem/Storage. 

        In volt-watt mode. This mode attempts to LIMIT the watts, according to one defined volt-watt curve, depending on the monitored voltages and the capabilities of the PVSystem/Storage. 

        In dynamic reactive current mode. This mode attempts to increasingly counter deviations by CONTROLLING vars, depending on the monitored voltages, present active power output, and the capabilities of the of the PVSystem/Storage.

        In watt-pf mode. This mode attempts to CONTROL the vars, according to a watt-pf curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 

        In watt-var mode. This mode attempts to CONTROL the vars, according to a watt-var curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 
        """
        return self._get_prop_string(2)

    @Mode_str.setter
    def Mode_str(self, value: AnyStr):
        self.Mode = value

    @property
    def CombiMode(self) -> InvControlCombiMode:
        """
        DSS property name: CombiMode
        DSS property index: 3

        Combination of smart inverter functions in which the InvControl will control the PC elements in DERList, according to the options below: 

        Must be a combination of the following: {VV_VW | VV_DRC}. Default is to not set this property, in which case the single control mode in Mode is active.  

        In combined VV_VW mode, both volt-var and volt-watt control modes are active simultaneously.  See help individually for volt-var mode and volt-watt mode in Mode property.
        Note that the PVSystem/Storage will attempt to achieve both the volt-watt and volt-var set-points based on the capabilities of the inverter in the PVSystem/Storage (kVA rating, etc), any limits set on maximum active power,

        In combined VV_DRC, both the volt-var and the dynamic reactive current modes are simultaneously active.
        """
        return InvControlCombiMode(self._lib.Obj_GetInt32(self._ptr, 3))

    @CombiMode.setter
    def CombiMode(self, value: Union[AnyStr, int, InvControlCombiMode]):
        if not isinstance(value, int):
            self._set_string(3, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    @property
    def CombiMode_str(self) -> str:
        """
        DSS property name: CombiMode
        DSS property index: 3

        Combination of smart inverter functions in which the InvControl will control the PC elements in DERList, according to the options below: 

        Must be a combination of the following: {VV_VW | VV_DRC}. Default is to not set this property, in which case the single control mode in Mode is active.  

        In combined VV_VW mode, both volt-var and volt-watt control modes are active simultaneously.  See help individually for volt-var mode and volt-watt mode in Mode property.
        Note that the PVSystem/Storage will attempt to achieve both the volt-watt and volt-var set-points based on the capabilities of the inverter in the PVSystem/Storage (kVA rating, etc), any limits set on maximum active power,

        In combined VV_DRC, both the volt-var and the dynamic reactive current modes are simultaneously active.
        """
        return self._get_prop_string(3)

    @CombiMode_str.setter
    def CombiMode_str(self, value: AnyStr):
        self.CombiMode = value

    @property
    def vvc_curve1(self) -> str:
        """
        DSS property name: vvc_curve1
        DSS property index: 4

        Required for VOLTVAR mode. 

        Name of the XYCurve object containing the volt-var curve. The positive values of the y-axis of the volt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 
        """
        return self._get_prop_string(4)

    @vvc_curve1.setter
    def vvc_curve1(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(4, value)
            return

        self._set_string(4, value)

    @property
    def vvc_curve1_obj(self) -> XYcurve:
        """
        DSS property name: vvc_curve1
        DSS property index: 4

        Required for VOLTVAR mode. 

        Name of the XYCurve object containing the volt-var curve. The positive values of the y-axis of the volt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 
        """
        return self._get_obj(4, XYcurve)

    @vvc_curve1_obj.setter
    def vvc_curve1_obj(self, value: XYcurve):
        self._set_obj(4, value)

    @property
    def hysteresis_offset(self) -> float:
        """
        DSS property name: hysteresis_offset
        DSS property index: 5

        Required for VOLTVAR mode, and defaults to 0. 

        for the times when the terminal voltage is decreasing, this is the off-set in per-unit voltage of a curve whose shape is the same as vvc_curve. It is offset by a certain negative value of per-unit voltage, which is defined by the base quantity for the x-axis of the volt-var curve (see help for voltage_curvex_ref)

        if the PVSystem/Storage terminal voltage has been increasing, and has not changed directions, utilize vvc_curve1 for the volt-var response. 

        if the PVSystem/Storage terminal voltage has been increasing and changes directions and begins to decrease, then move from utilizing vvc_curve1 to a volt-var curve of the same shape, but offset by a certain per-unit voltage value. 

        Maintain the same per-unit available var output level (unless head-room has changed due to change in active power or kva rating of PVSystem/Storage).  Per-unit var values remain the same for this internally constructed second curve (hysteresis curve). 

        if the terminal voltage has been decreasing and changes directions and begins to increase , then move from utilizing the offset curve, back to the vvc_curve1 for volt-var response, but stay at the same per-unit available vars output level.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @hysteresis_offset.setter
    def hysteresis_offset(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def voltage_curvex_ref(self) -> InvControlVoltageCurveXRef:
        """
        DSS property name: voltage_curvex_ref
        DSS property index: 6

        Required for VOLTVAR and VOLTWATT modes, and defaults to rated.  Possible values are: {rated|avg|ravg}.  

        Defines whether the x-axis values (voltage in per unit) for vvc_curve1 and the volt-watt curve corresponds to:

        rated. The rated voltage for the PVSystem/Storage object (1.0 in the volt-var curve equals rated voltage).

        avg. The average terminal voltage recorded over a certain number of prior power-flow solutions.
        with the avg setting, 1.0 per unit on the x-axis of the volt-var curve(s) corresponds to the average voltage.
        from a certain number of prior intervals.  See avgwindowlen parameter.

        ravg. Same as avg, with the exception that the avgerage terminal voltage is divided by the rated voltage.
        """
        return InvControlVoltageCurveXRef(self._lib.Obj_GetInt32(self._ptr, 6))

    @voltage_curvex_ref.setter
    def voltage_curvex_ref(self, value: Union[AnyStr, int, InvControlVoltageCurveXRef]):
        if not isinstance(value, int):
            self._set_string(6, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def voltage_curvex_ref_str(self) -> str:
        """
        DSS property name: voltage_curvex_ref
        DSS property index: 6

        Required for VOLTVAR and VOLTWATT modes, and defaults to rated.  Possible values are: {rated|avg|ravg}.  

        Defines whether the x-axis values (voltage in per unit) for vvc_curve1 and the volt-watt curve corresponds to:

        rated. The rated voltage for the PVSystem/Storage object (1.0 in the volt-var curve equals rated voltage).

        avg. The average terminal voltage recorded over a certain number of prior power-flow solutions.
        with the avg setting, 1.0 per unit on the x-axis of the volt-var curve(s) corresponds to the average voltage.
        from a certain number of prior intervals.  See avgwindowlen parameter.

        ravg. Same as avg, with the exception that the avgerage terminal voltage is divided by the rated voltage.
        """
        return self._get_prop_string(6)

    @voltage_curvex_ref_str.setter
    def voltage_curvex_ref_str(self, value: AnyStr):
        self.voltage_curvex_ref = value

    @property
    def avgwindowlen(self) -> int:
        """
        DSS property name: avgwindowlen
        DSS property index: 7

        Required for VOLTVAR mode and VOLTWATT mode, and defaults to 0 seconds (0s). 

        Sets the length of the averaging window over which the average PVSystem/Storage terminal voltage is calculated. 

        Units are indicated by appending s, m, or h to the integer value. 

        The averaging window will calculate the average PVSystem/Storage terminal voltage over the specified period of time, up to and including the last power flow solution. 

        Note, if the solution stepsize is larger than the window length, then the voltage will be assumed to have been constant over the time-frame specified by the window length.
        """
        return self._lib.Obj_GetInt32(self._ptr, 7)

    @avgwindowlen.setter
    def avgwindowlen(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 7, value)

    @property
    def voltwatt_curve(self) -> str:
        """
        DSS property name: voltwatt_curve
        DSS property index: 8

        Required for VOLTWATT mode. 

        Name of the XYCurve object containing the volt-watt curve. 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in one of the options described in the VoltwattYAxis property. 
        """
        return self._get_prop_string(8)

    @voltwatt_curve.setter
    def voltwatt_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(8, value)
            return

        self._set_string(8, value)

    @property
    def voltwatt_curve_obj(self) -> XYcurve:
        """
        DSS property name: voltwatt_curve
        DSS property index: 8

        Required for VOLTWATT mode. 

        Name of the XYCurve object containing the volt-watt curve. 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in one of the options described in the VoltwattYAxis property. 
        """
        return self._get_obj(8, XYcurve)

    @voltwatt_curve_obj.setter
    def voltwatt_curve_obj(self, value: XYcurve):
        self._set_obj(8, value)

    @property
    def DbVMin(self) -> float:
        """
        DSS property name: DbVMin
        DSS property index: 9

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 0.95 per-unit voltage (referenced to the PVSystem/Storage object rated voltage or a windowed average value). 

        This parameter is the minimum voltage that defines the voltage dead-band within which no reactive power is allowed to be generated. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @DbVMin.setter
    def DbVMin(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def DbVMax(self) -> float:
        """
        DSS property name: DbVMax
        DSS property index: 10

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 1.05 per-unit voltage (referenced to the PVSystem object rated voltage or a windowed average value). 

        This parameter is the maximum voltage that defines the voltage dead-band within which no reactive power is allowed to be generated. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @DbVMax.setter
    def DbVMax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def ArGraLowV(self) -> float:
        """
        DSS property name: ArGraLowV
        DSS property index: 11

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 0.1  

        This is a gradient, expressed in unit-less terms of %/%, to establish the ratio by which percentage capacitive reactive power production is increased as the  percent delta-voltage decreases below DbVMin. 

        Percent delta-voltage is defined as the present PVSystem/Storage terminal voltage minus the moving average voltage, expressed as a percentage of the rated voltage for the PVSystem/Storage object. 

        Note, the moving average voltage for the dynamic reactive current mode is different than the moving average voltage for the volt-watt and volt-var modes.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @ArGraLowV.setter
    def ArGraLowV(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def ArGraHiV(self) -> float:
        """
        DSS property name: ArGraHiV
        DSS property index: 12

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 0.1  

        This is a gradient, expressed in unit-less terms of %/%, to establish the ratio by which percentage inductive reactive power production is increased as the  percent delta-voltage decreases above DbVMax. 

        Percent delta-voltage is defined as the present PVSystem/Storage terminal voltage minus the moving average voltage, expressed as a percentage of the rated voltage for the PVSystem/Storage object. 

        Note, the moving average voltage for the dynamic reactive current mode is different than the mmoving average voltage for the volt-watt and volt-var modes.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @ArGraHiV.setter
    def ArGraHiV(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def DynReacavgwindowlen(self) -> int:
        """
        DSS property name: DynReacavgwindowlen
        DSS property index: 13

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 1 seconds (1s). do not use a value smaller than 1.0 

        Sets the length of the averaging window over which the average PVSystem/Storage terminal voltage is calculated for the dynamic reactive current mode. 

        Units are indicated by appending s, m, or h to the integer value. 

        Typically this will be a shorter averaging window than the volt-var and volt-watt averaging window.

        The averaging window will calculate the average PVSystem/Storage terminal voltage over the specified period of time, up to and including the last power flow solution.  Note, if the solution stepsize is larger than the window length, then the voltage will be assumed to have been constant over the time-frame specified by the window length.
        """
        return self._lib.Obj_GetInt32(self._ptr, 13)

    @DynReacavgwindowlen.setter
    def DynReacavgwindowlen(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 13, value)

    @property
    def deltaQ_Factor(self) -> float:
        """
        DSS property name: deltaQ_Factor
        DSS property index: 14

        Required for the VOLTVAR and DYNAMICREACCURR modes.  Defaults to -1.0. 

        Defining -1.0, OpenDSS takes care internally of delta_Q itself. It tries to improve convergence as well as speed up process

        Sets the maximum change (in per unit) from the prior var output level to the desired var output level during each control iteration. 


        if numerical instability is noticed in solutions such as var sign changing from one control iteration to the next and voltages oscillating between two values with some separation, this is an indication of numerical instability (use the EventLog to diagnose). 

        if the maximum control iterations are exceeded, and no numerical instability is seen in the EventLog of via monitors, then try increasing the value of this parameter to reduce the number of control iterations needed to achieve the control criteria, and move to the power flow solution.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @deltaQ_Factor.setter
    def deltaQ_Factor(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def VoltageChangeTolerance(self) -> float:
        """
        DSS property name: VoltageChangeTolerance
        DSS property index: 15

        Defaults to 0.0001 per-unit voltage.  This parameter should only be modified by advanced users of the InvControl.  

        Tolerance in pu of the control loop convergence associated to the monitored voltage in pu. This value is compared with the difference of the monitored voltage in pu of the current and previous control iterations of the control loop

        This voltage tolerance value plus the var/watt tolerance value (VarChangeTolerance/ActivePChangeTolerance) determine, together, when to stop control iterations by the InvControl. 

        If an InvControl is controlling more than one PVSystem/Storage, each PVSystem/Storage has this quantity calculated independently, and so an individual PVSystem/Storage may reach the tolerance within different numbers of control iterations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @VoltageChangeTolerance.setter
    def VoltageChangeTolerance(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def VarChangeTolerance(self) -> float:
        """
        DSS property name: VarChangeTolerance
        DSS property index: 16

        Required for VOLTVAR and DYNAMICREACCURR modes.  Defaults to 0.025 per unit of the base provided or absorbed reactive power described in the RefReactivePower property This parameter should only be modified by advanced users of the InvControl. 

        Tolerance in pu of the convergence of the control loop associated with reactive power. For the same control iteration, this value is compared to the difference, as an absolute value (without sign), between the desired reactive power value in pu and the output reactive power in pu of the controlled element.

        This reactive power tolerance value plus the voltage tolerance value (VoltageChangeTolerance) determine, together, when to stop control iterations by the InvControl.  

        If an InvControl is controlling more than one PVSystem/Storage, each PVSystem/Storage has this quantity calculated independently, and so an individual PVSystem/Storage may reach the tolerance within different numbers of control iterations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @VarChangeTolerance.setter
    def VarChangeTolerance(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def VoltwattYAxis(self) -> InvControlVoltWattYAxis:
        """
        DSS property name: VoltwattYAxis
        DSS property index: 17

        Required for VOLTWATT mode.  Must be one of: {PMPPPU* | PAVAILABLEPU| PCTPMPPPU | KVARATINGPU}.  The default is PMPPPU.  

        Units for the y-axis of the volt-watt curve while in volt-watt mode. 

        When set to PMPPPU. The y-axis corresponds to the value in pu of Pmpp property of the PVSystem. 

        When set to PAVAILABLEPU. The y-axis corresponds to the value in pu of the available active power of the PVSystem. 

        When set to PCTPMPPPU. The y-axis corresponds to the value in pu of the power Pmpp multiplied by 1/100 of the %Pmpp property of the PVSystem.

        When set to KVARATINGPU. The y-axis corresponds to the value in pu of the kVA property of the PVSystem.
        """
        return InvControlVoltWattYAxis(self._lib.Obj_GetInt32(self._ptr, 17))

    @VoltwattYAxis.setter
    def VoltwattYAxis(self, value: Union[AnyStr, int, InvControlVoltWattYAxis]):
        if not isinstance(value, int):
            self._set_string(17, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 17, value)

    @property
    def VoltwattYAxis_str(self) -> str:
        """
        DSS property name: VoltwattYAxis
        DSS property index: 17

        Required for VOLTWATT mode.  Must be one of: {PMPPPU* | PAVAILABLEPU| PCTPMPPPU | KVARATINGPU}.  The default is PMPPPU.  

        Units for the y-axis of the volt-watt curve while in volt-watt mode. 

        When set to PMPPPU. The y-axis corresponds to the value in pu of Pmpp property of the PVSystem. 

        When set to PAVAILABLEPU. The y-axis corresponds to the value in pu of the available active power of the PVSystem. 

        When set to PCTPMPPPU. The y-axis corresponds to the value in pu of the power Pmpp multiplied by 1/100 of the %Pmpp property of the PVSystem.

        When set to KVARATINGPU. The y-axis corresponds to the value in pu of the kVA property of the PVSystem.
        """
        return self._get_prop_string(17)

    @VoltwattYAxis_str.setter
    def VoltwattYAxis_str(self, value: AnyStr):
        self.VoltwattYAxis = value

    @property
    def RateofChangeMode(self) -> InvControlRateOfChangeMode:
        """
        DSS property name: RateofChangeMode
        DSS property index: 18

        Required for VOLTWATT and VOLTVAR mode.  Must be one of: {INACTIVE* | LPF | RISEFALL }.  The default is INACTIVE.  

        Auxiliary option that aims to limit the changes of the desired reactive power and the active power limit between time steps, the alternatives are listed below: 

        INACTIVE. It indicates there is no limit on rate of change imposed for either active or reactive power output. 

        LPF. A low-pass RC filter is applied to the desired reactive power and/or the active power limit to determine the output power as a function of a time constant defined in the LPFTau property. 

        RISEFALL. A rise and fall limit in the change of active and/or reactive power expressed in terms of pu power per second, defined in the RiseFallLimit, is applied to the desired reactive power and/or the active power limit. 
        """
        return InvControlRateOfChangeMode(self._lib.Obj_GetInt32(self._ptr, 18))

    @RateofChangeMode.setter
    def RateofChangeMode(self, value: Union[AnyStr, int, InvControlRateOfChangeMode]):
        if not isinstance(value, int):
            self._set_string(18, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    @property
    def RateofChangeMode_str(self) -> str:
        """
        DSS property name: RateofChangeMode
        DSS property index: 18

        Required for VOLTWATT and VOLTVAR mode.  Must be one of: {INACTIVE* | LPF | RISEFALL }.  The default is INACTIVE.  

        Auxiliary option that aims to limit the changes of the desired reactive power and the active power limit between time steps, the alternatives are listed below: 

        INACTIVE. It indicates there is no limit on rate of change imposed for either active or reactive power output. 

        LPF. A low-pass RC filter is applied to the desired reactive power and/or the active power limit to determine the output power as a function of a time constant defined in the LPFTau property. 

        RISEFALL. A rise and fall limit in the change of active and/or reactive power expressed in terms of pu power per second, defined in the RiseFallLimit, is applied to the desired reactive power and/or the active power limit. 
        """
        return self._get_prop_string(18)

    @RateofChangeMode_str.setter
    def RateofChangeMode_str(self, value: AnyStr):
        self.RateofChangeMode = value

    @property
    def LPFTau(self) -> float:
        """
        DSS property name: LPFTau
        DSS property index: 19

        Not required. Defaults to 0 seconds. 

        Filter time constant of the LPF option of the RateofChangeMode property. The time constant will cause the low-pass filter to achieve 95% of the target value in 3 time constants.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @LPFTau.setter
    def LPFTau(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def RiseFallLimit(self) -> float:
        """
        DSS property name: RiseFallLimit
        DSS property index: 20

        Not required.  Defaults to no limit (-1). Must be -1 (no limit) or a positive value.  

        Limit in power in pu per second used by the RISEFALL option of the RateofChangeMode property.The base value for this ramp is defined in the RefReactivePower property and/or in VoltwattYAxis.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @RiseFallLimit.setter
    def RiseFallLimit(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def deltaP_Factor(self) -> float:
        """
        DSS property name: deltaP_Factor
        DSS property index: 21

        Required for the VOLTWATT modes.  Defaults to -1.0. 

        Defining -1.0, OpenDSS takes care internally of delta_P itself. It tries to improve convergence as well as speed up process

        Defining between 0.05 and 1.0, it sets the maximum change (in unit of the y-axis) from the prior active power output level to the desired active power output level during each control iteration. 


        If numerical instability is noticed in solutions such as active power changing substantially from one control iteration to the next and/or voltages oscillating between two values with some separation, this is an indication of numerical instability (use the EventLog to diagnose). 

        If the maximum control iterations are exceeded, and no numerical instability is seen in the EventLog of via monitors, then try increasing the value of this parameter to reduce the number of control iterations needed to achieve the control criteria, and move to the power flow solution.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @deltaP_Factor.setter
    def deltaP_Factor(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def EventLog(self) -> bool:
        """
        DSS property name: EventLog
        DSS property index: 22

        {Yes/True* | No/False} Default is YES for InvControl. Log control actions to Eventlog.
        """
        return self._lib.Obj_GetInt32(self._ptr, 22) != 0

    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    @property
    def RefReactivePower(self) -> InvControlReactivePowerReference:
        """
        DSS property name: RefReactivePower
        DSS property index: 23

        Required for any mode that has VOLTVAR, DYNAMICREACCURR and WATTVAR. Defaults to VARAVAL.

        Defines the base reactive power for both the provided and absorbed reactive power, according to one of the following options: 

        VARAVAL. The base values for the provided and absorbed reactive power are equal to the available reactive power.

        VARMAX: The base values of the provided and absorbed reactive power are equal to the value defined in the kvarMax and kvarMaxAbs properties, respectively.
        """
        return InvControlReactivePowerReference(self._lib.Obj_GetInt32(self._ptr, 23))

    @RefReactivePower.setter
    def RefReactivePower(self, value: Union[AnyStr, int, InvControlReactivePowerReference]):
        if not isinstance(value, int):
            self._set_string(23, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 23, value)

    @property
    def RefReactivePower_str(self) -> str:
        """
        DSS property name: RefReactivePower
        DSS property index: 23

        Required for any mode that has VOLTVAR, DYNAMICREACCURR and WATTVAR. Defaults to VARAVAL.

        Defines the base reactive power for both the provided and absorbed reactive power, according to one of the following options: 

        VARAVAL. The base values for the provided and absorbed reactive power are equal to the available reactive power.

        VARMAX: The base values of the provided and absorbed reactive power are equal to the value defined in the kvarMax and kvarMaxAbs properties, respectively.
        """
        return self._get_prop_string(23)

    @RefReactivePower_str.setter
    def RefReactivePower_str(self, value: AnyStr):
        self.RefReactivePower = value

    @property
    def ActivePChangeTolerance(self) -> float:
        """
        DSS property name: ActivePChangeTolerance
        DSS property index: 24

        Required for VOLTWATT. Default is 0.01

        Tolerance in pu of the convergence of the control loop associated with active power. For the same control iteration, this value is compared to the difference between the active power limit in pu resulted from the convergence process and the one resulted from the volt-watt function.

        This reactive power tolerance value plus the voltage tolerance value (VoltageChangeTolerance) determine, together, when to stop control iterations by the InvControl.  

        If an InvControl is controlling more than one PVSystem/Storage, each PVSystem/Storage has this quantity calculated independently, and so an individual PVSystem/Storage may reach the tolerance within different numbers of control iterations.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @ActivePChangeTolerance.setter
    def ActivePChangeTolerance(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def monVoltageCalc(self) -> Union[MonitoredPhase, int]:
        """
        DSS property name: monVoltageCalc
        DSS property index: 25

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=AVG. 
        """
        value = self._lib.Obj_GetInt32(self._ptr, 25)
        if value > 0:
            return value
    
        return MonitoredPhase(value)

    @monVoltageCalc.setter
    def monVoltageCalc(self, value: Union[AnyStr, int, MonitoredPhase]):
        if not isinstance(value, int):
            self._set_string(25, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 25, value)

    @property
    def monVoltageCalc_str(self) -> str:
        """
        DSS property name: monVoltageCalc
        DSS property index: 25

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=AVG. 
        """
        return self._get_prop_string(25)

    @monVoltageCalc_str.setter
    def monVoltageCalc_str(self, value: AnyStr):
        self.monVoltageCalc = value

    @property
    def monBus(self) -> List[str]:
        """
        DSS property name: monBus
        DSS property index: 26

        Name of monitored bus used by the voltage-dependente control modes. Default is bus of the controlled PVSystem/Storage or Storage.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 26)

    @monBus.setter
    def monBus(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 26, value_ptr, value_count)
        self._check_for_error()

    @property
    def MonBusesVbase(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: MonBusesVbase
        DSS property index: 27

        Array list of rated voltages of the buses and their nodes presented in the monBus property. This list may have different line-to-line and/or line-to-ground voltages.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 27)

    @MonBusesVbase.setter
    def MonBusesVbase(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(27, value)

    @property
    def voltwattCH_curve(self) -> str:
        """
        DSS property name: voltwattCH_curve
        DSS property index: 28

        Required for VOLTWATT mode for Storage element in CHARGING state. 

        The name of an XYCurve object that describes the variation in active power output (in per unit of maximum active power outut for the Storage). 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in: (1) per unit of maximum active power output capability of the Storage, or (2) maximum available active power output capability (defined by the parameter: VoltwattYAxis), corresponding to the terminal voltage (x-axis value in per unit). 

        No default -- must be specified for VOLTWATT mode for Storage element in CHARGING state.
        """
        return self._get_prop_string(28)

    @voltwattCH_curve.setter
    def voltwattCH_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(28, value)
            return

        self._set_string(28, value)

    @property
    def voltwattCH_curve_obj(self) -> XYcurve:
        """
        DSS property name: voltwattCH_curve
        DSS property index: 28

        Required for VOLTWATT mode for Storage element in CHARGING state. 

        The name of an XYCurve object that describes the variation in active power output (in per unit of maximum active power outut for the Storage). 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in: (1) per unit of maximum active power output capability of the Storage, or (2) maximum available active power output capability (defined by the parameter: VoltwattYAxis), corresponding to the terminal voltage (x-axis value in per unit). 

        No default -- must be specified for VOLTWATT mode for Storage element in CHARGING state.
        """
        return self._get_obj(28, XYcurve)

    @voltwattCH_curve_obj.setter
    def voltwattCH_curve_obj(self, value: XYcurve):
        self._set_obj(28, value)

    @property
    def wattpf_curve(self) -> str:
        """
        DSS property name: wattpf_curve
        DSS property index: 29

        Required for WATTPF mode.

        Name of the XYCurve object containing the watt-pf curve.
        The positive values of the y-axis are positive power factor values. The negative values of the the y-axis are negative power factor values. When positive, the output reactive power has the same direction of the output active power, and when negative, it has the opposite direction.
        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.

        The y-axis represents the power factor and the reference is power factor equal to 0. 

        For example, if the user wants to define the following XY coordinates: (0, 0.9); (0.2, 0.9); (0.5, -0.9); (1, -0.9).
        Try to plot them considering the y-axis reference equal to unity power factor.

        The user needs to translate this curve into a plot in which the y-axis reference is equal to 0 power factor.It means that two new XY coordinates need to be included, in this case they are: (0.35, 1); (0.35, -1).
        Try to plot them considering the y-axis reference equal to 0 power factor.
        The discontinity in 0.35pu is not a problem since var is zero for either power factor equal to 1 or -1.
        """
        return self._get_prop_string(29)

    @wattpf_curve.setter
    def wattpf_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(29, value)
            return

        self._set_string(29, value)

    @property
    def wattpf_curve_obj(self) -> XYcurve:
        """
        DSS property name: wattpf_curve
        DSS property index: 29

        Required for WATTPF mode.

        Name of the XYCurve object containing the watt-pf curve.
        The positive values of the y-axis are positive power factor values. The negative values of the the y-axis are negative power factor values. When positive, the output reactive power has the same direction of the output active power, and when negative, it has the opposite direction.
        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.

        The y-axis represents the power factor and the reference is power factor equal to 0. 

        For example, if the user wants to define the following XY coordinates: (0, 0.9); (0.2, 0.9); (0.5, -0.9); (1, -0.9).
        Try to plot them considering the y-axis reference equal to unity power factor.

        The user needs to translate this curve into a plot in which the y-axis reference is equal to 0 power factor.It means that two new XY coordinates need to be included, in this case they are: (0.35, 1); (0.35, -1).
        Try to plot them considering the y-axis reference equal to 0 power factor.
        The discontinity in 0.35pu is not a problem since var is zero for either power factor equal to 1 or -1.
        """
        return self._get_obj(29, XYcurve)

    @wattpf_curve_obj.setter
    def wattpf_curve_obj(self, value: XYcurve):
        self._set_obj(29, value)

    @property
    def wattvar_curve(self) -> str:
        """
        DSS property name: wattvar_curve
        DSS property index: 30

        Required for WATTVAR mode. 

        Name of the XYCurve object containing the watt-var curve. The positive values of the y-axis of the watt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property.

        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.
        """
        return self._get_prop_string(30)

    @wattvar_curve.setter
    def wattvar_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(30, value)
            return

        self._set_string(30, value)

    @property
    def wattvar_curve_obj(self) -> XYcurve:
        """
        DSS property name: wattvar_curve
        DSS property index: 30

        Required for WATTVAR mode. 

        Name of the XYCurve object containing the watt-var curve. The positive values of the y-axis of the watt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property.

        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.
        """
        return self._get_obj(30, XYcurve)

    @wattvar_curve_obj.setter
    def wattvar_curve_obj(self, value: XYcurve):
        self._set_obj(30, value)

    @property
    def PVSystemList(self) -> List[str]:
        """
        DSS property name: PVSystemList
        DSS property index: 31

        Deprecated, use DERList instead.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 31)

    @PVSystemList.setter
    def PVSystemList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 31, value_ptr, value_count)
        self._check_for_error()

    @property
    def Vsetpoint(self) -> float:
        """
        DSS property name: Vsetpoint
        DSS property index: 32

        Required for Active Voltage Regulation (AVR).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 32)

    @Vsetpoint.setter
    def Vsetpoint(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 32, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 33

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 33)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 33, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 34

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 34) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 34, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 35

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(35, value)

class ExpControl(DSSObj):
    _cls_name = 'ExpControl'
    _cls_idx = 42
    _cls_prop_idx = {
        'pvsystemlist': 1,
        'vreg': 2,
        'slope': 3,
        'vregtau': 4,
        'qbias': 5,
        'vregmin': 6,
        'vregmax': 7,
        'qmaxlead': 8,
        'qmaxlag': 9,
        'eventlog': 10,
        'deltaq_factor': 11,
        'preferq': 12,
        'tresponse': 13,
        'derlist': 14,
        'basefreq': 15,
        'enabled': 16,
        'like': 17,
    }

    @property
    def PVSystemList(self) -> List[str]:
        """
        DSS property name: PVSystemList
        DSS property index: 1

        Array list of PVSystems to be controlled.

        If not specified, all PVSystems in the circuit are assumed to be controlled by this ExpControl.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 1)

    @PVSystemList.setter
    def PVSystemList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 1, value_ptr, value_count)
        self._check_for_error()

    @property
    def Vreg(self) -> float:
        """
        DSS property name: Vreg
        DSS property index: 2

        Per-unit voltage at which reactive power is zero; defaults to 1.0.

        This may dynamically self-adjust when VregTau > 0, limited by VregMin and VregMax.If imput as 0, Vreg will be initialized from a snapshot solution with no inverter Q.The equilibrium point of reactive power is also affected by Qbias
        """
        return self._lib.Obj_GetFloat64(self._ptr, 2)

    @Vreg.setter
    def Vreg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 2, value)

    @property
    def Slope(self) -> float:
        """
        DSS property name: Slope
        DSS property index: 3

        Per-unit reactive power injection / per-unit voltage deviation from Vreg; defaults to 50.

        Unlike InvControl, base reactive power is constant at the inverter kva rating.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @Slope.setter
    def Slope(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def VregTau(self) -> float:
        """
        DSS property name: VregTau
        DSS property index: 4

        Time constant for adaptive Vreg. Defaults to 1200 seconds.

        When the control injects or absorbs reactive power due to a voltage deviation from the Q=0 crossing of the volt-var curve, the Q=0 crossing will move toward the actual terminal voltage with this time constant. Over time, the effect is to gradually bring inverter reactive power to zero as the grid voltage changes due to non-solar effects. If zero, then Vreg stays fixed. IEEE1547-2018 requires adjustability from 300s to 5000s
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @VregTau.setter
    def VregTau(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def Qbias(self) -> float:
        """
        DSS property name: Qbias
        DSS property index: 5

        Equilibrium per-unit reactive power when V=Vreg; defaults to 0.

        Enter > 0 for lagging (capacitive) bias, < 0 for leading (inductive) bias.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @Qbias.setter
    def Qbias(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def VregMin(self) -> float:
        """
        DSS property name: VregMin
        DSS property index: 6

        Lower limit on adaptive Vreg; defaults to 0.95 per-unit
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @VregMin.setter
    def VregMin(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def VregMax(self) -> float:
        """
        DSS property name: VregMax
        DSS property index: 7

        Upper limit on adaptive Vreg; defaults to 1.05 per-unit
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @VregMax.setter
    def VregMax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def QmaxLead(self) -> float:
        """
        DSS property name: QmaxLead
        DSS property index: 8

        Limit on leading (inductive) reactive power injection, in per-unit of base kva; defaults to 0.44.For Category A inverters per P1547/D7, set this value to 0.25.

        Regardless of QmaxLead, the reactive power injection is still limited by dynamic headroom when actual real power output exceeds 0%
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @QmaxLead.setter
    def QmaxLead(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def QmaxLag(self) -> float:
        """
        DSS property name: QmaxLag
        DSS property index: 9

        Limit on lagging (capacitive) reactive power injection, in per-unit of base kva; defaults to 0.44.

        For Category A inverters per P1547/D7, set this value to 0.25.Regardless of QmaxLag, the reactive power injection is still limited by dynamic headroom when actual real power output exceeds 0%
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @QmaxLag.setter
    def QmaxLag(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def EventLog(self) -> bool:
        """
        DSS property name: EventLog
        DSS property index: 10

        {Yes/True* | No/False} Default is No for ExpControl. Log control actions to Eventlog.
        """
        return self._lib.Obj_GetInt32(self._ptr, 10) != 0

    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 10, value)

    @property
    def DeltaQ_factor(self) -> float:
        """
        DSS property name: DeltaQ_factor
        DSS property index: 11

        Convergence parameter; Defaults to 0.7. 

        Sets the maximum change (in per unit) from the prior var output level to the desired var output level during each control iteration. If numerical instability is noticed in solutions such as var sign changing from one control iteration to the next and voltages oscillating between two values with some separation, this is an indication of numerical instability (use the EventLog to diagnose). If the maximum control iterations are exceeded, and no numerical instability is seen in the EventLog of via monitors, then try increasing the value of this parameter to reduce the number of control iterations needed to achieve the control criteria, and move to the power flow solution.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @DeltaQ_factor.setter
    def DeltaQ_factor(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def PreferQ(self) -> bool:
        """
        DSS property name: PreferQ
        DSS property index: 12

        {Yes/True* | No/False} Default is No for ExpControl.

        Curtails real power output as needed to meet the reactive power requirement. IEEE1547-2018 requires Yes, but the default is No for backward compatibility of OpenDSS models.
        """
        return self._lib.Obj_GetInt32(self._ptr, 12) != 0

    @PreferQ.setter
    def PreferQ(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    @property
    def Tresponse(self) -> float:
        """
        DSS property name: Tresponse
        DSS property index: 13

        Open-loop response time for changes in Q.

        The value of Q reaches 90% of the target change within Tresponse, which corresponds to a low-pass filter having tau = Tresponse / 2.3026. The behavior is similar to LPFTAU in InvControl, but here the response time is input instead of the time constant. IEEE1547-2018 default is 10s for Catagory A and 5s for Category B, adjustable from 1s to 90s for both categories. However, the default is 0 for backward compatibility of OpenDSS models.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @Tresponse.setter
    def Tresponse(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def DERList(self) -> List[str]:
        """
        DSS property name: DERList
        DSS property index: 14

        Alternative to PVSystemList for CIM export and import.

        However, storage is not actually implemented yet. Use fully qualified PVSystem names.
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 14)

    @DERList.setter
    def DERList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 14, value_ptr, value_count)
        self._check_for_error()

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 15

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 16

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 16) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 17

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(17, value)

class GICLine(DSSObj):
    _cls_name = 'GICLine'
    _cls_idx = 43
    _cls_prop_idx = {
        'bus1': 1,
        'bus2': 2,
        'volts': 3,
        'angle': 4,
        'frequency': 5,
        'phases': 6,
        'r': 7,
        'x': 8,
        'c': 9,
        'en': 10,
        'ee': 11,
        'lat1': 12,
        'lon1': 13,
        'lat2': 14,
        'lon2': 15,
        'spectrum': 16,
        'basefreq': 17,
        'enabled': 18,
        'like': 19,
    }

    @property
    def bus1(self) -> str:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which the main terminal (1) is connected.
        bus1=busname
        bus1=busname.1.2.3
        """
        return self._get_prop_string(1)

    @bus1.setter
    def bus1(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def bus2(self) -> str:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of bus to which 2nd terminal is connected.
        bus2=busname
        bus2=busname.1.2.3

        No Default; must be specified.
        """
        return self._get_prop_string(2)

    @bus2.setter
    def bus2(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def Volts(self) -> float:
        """
        DSS property name: Volts
        DSS property index: 3

        Voltage magnitude, in volts, of the GIC voltage induced across this line. When spedified, voltage source is assumed defined by Voltage and Angle properties. 

        Specify this value

        OR

        EN, EE, lat1, lon1, lat2, lon2. 

        Not both!!  Last one entered will take precedence. Assumed identical in each phase of the Line object.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @Volts.setter
    def Volts(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def Angle(self) -> float:
        """
        DSS property name: Angle
        DSS property index: 4

        Phase angle in degrees of first phase. Default=0.0.  See Voltage property
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @Angle.setter
    def Angle(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def frequency(self) -> float:
        """
        DSS property name: frequency
        DSS property index: 5

        Source frequency.  Defaults to 0.1 Hz.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @frequency.setter
    def frequency(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 6

        Number of phases.  Defaults to 3.
        """
        return self._lib.Obj_GetInt32(self._ptr, 6)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def R(self) -> float:
        """
        DSS property name: R
        DSS property index: 7

        Resistance of line, ohms of impedance in series with GIC voltage source. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @R.setter
    def R(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def X(self) -> float:
        """
        DSS property name: X
        DSS property index: 8

        Reactance at base frequency, ohms. Default = 0.0. This value is generally not important for GIC studies but may be used if desired.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @X.setter
    def X(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def C(self) -> float:
        """
        DSS property name: C
        DSS property index: 9

        Value of line blocking capacitance in microfarads. Default = 0.0, implying that there is no line blocking capacitor.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @C.setter
    def C(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def EN(self) -> float:
        """
        DSS property name: EN
        DSS property index: 10

        Northward Electric field (V/km). If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @EN.setter
    def EN(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def EE(self) -> float:
        """
        DSS property name: EE
        DSS property index: 11

        Eastward Electric field (V/km).  If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @EE.setter
    def EE(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def Lat1(self) -> float:
        """
        DSS property name: Lat1
        DSS property index: 12

        Latitude of Bus1 (degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @Lat1.setter
    def Lat1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def Lon1(self) -> float:
        """
        DSS property name: Lon1
        DSS property index: 13

        Longitude of Bus1 (degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @Lon1.setter
    def Lon1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def Lat2(self) -> float:
        """
        DSS property name: Lat2
        DSS property index: 14

        Latitude of Bus2 (degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @Lat2.setter
    def Lat2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def Lon2(self) -> float:
        """
        DSS property name: Lon2
        DSS property index: 15

        Longitude of Bus2 (degrees)
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @Lon2.setter
    def Lon2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 16

        Inherited Property for all PCElements. Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_prop_string(16)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(16, value)
            return

        self._set_string(16, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 16

        Inherited Property for all PCElements. Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_obj(16, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(16, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 17

        Inherited Property for all PCElements. Base frequency for specification of reactance value.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 18

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 18) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 18, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 19

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(19, value)

class GICTransformer(DSSObj):
    _cls_name = 'GICTransformer'
    _cls_idx = 44
    _cls_prop_idx = {
        'bush': 1,
        'busnh': 2,
        'busx': 3,
        'busnx': 4,
        'phases': 5,
        'type': 6,
        'r1': 7,
        'r2': 8,
        'kvll1': 9,
        'kvll2': 10,
        'mva': 11,
        'varcurve': 12,
        'pctr1': 13,
        '%r1': 13,
        'pctr2': 14,
        '%r2': 14,
        'k': 15,
        'normamps': 16,
        'emergamps': 17,
        'faultrate': 18,
        'pctperm': 19,
        'repair': 20,
        'basefreq': 21,
        'enabled': 22,
        'like': 23,
    }

    # Class-specific enumerations
    class GICTransformerType(IntEnum):
        """GICTransformer: Type (DSS enumeration for GICTransformer)"""
        GSU = 1 # GSU
        Auto = 2 # Auto
        YY = 3 # YY


    @property
    def BusH(self) -> str:
        """
        DSS property name: BusH
        DSS property index: 1

        Name of High-side(H) bus. Examples:
        BusH=busname
        BusH=busname.1.2.3
        """
        return self._get_prop_string(1)

    @BusH.setter
    def BusH(self, value: AnyStr):
        self._set_string(1, value)

    @property
    def BusNH(self) -> str:
        """
        DSS property name: BusNH
        DSS property index: 2

        Name of Neutral bus for H, or first, winding. Defaults to all phases connected to H-side bus, node 0, if not specified and transformer type is either GSU or YY. (Shunt Wye Connection to ground reference)For Auto, this is automatically set to the X bus.
        """
        return self._get_prop_string(2)

    @BusNH.setter
    def BusNH(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def BusX(self) -> str:
        """
        DSS property name: BusX
        DSS property index: 3

        Name of Low-side(X) bus, if type=Auto or YY. 
        """
        return self._get_prop_string(3)

    @BusX.setter
    def BusX(self, value: AnyStr):
        self._set_string(3, value)

    @property
    def BusNX(self) -> str:
        """
        DSS property name: BusNX
        DSS property index: 4

        Name of Neutral bus for X, or Second, winding. Defaults to all phases connected to X-side bus, node 0, if not specified. (Shunt Wye Connection to ground reference)
        """
        return self._get_prop_string(4)

    @BusNX.setter
    def BusNX(self, value: AnyStr):
        self._set_string(4, value)

    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 5

        Number of Phases. Default is 3.
        """
        return self._lib.Obj_GetInt32(self._ptr, 5)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def Type(self) -> GICTransformerType:
        """
        DSS property name: Type
        DSS property index: 6

        Type of transformer: {GSU* | Auto | YY}. Default is GSU.
        """
        return GICTransformerType(self._lib.Obj_GetInt32(self._ptr, 6))

    @Type.setter
    def Type(self, value: Union[AnyStr, int, GICTransformerType]):
        if not isinstance(value, int):
            self._set_string(6, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def Type_str(self) -> str:
        """
        DSS property name: Type
        DSS property index: 6

        Type of transformer: {GSU* | Auto | YY}. Default is GSU.
        """
        return self._get_prop_string(6)

    @Type_str.setter
    def Type_str(self, value: AnyStr):
        self.Type = value

    @property
    def R1(self) -> float:
        """
        DSS property name: R1
        DSS property index: 7

        Resistance, each phase, ohms for H winding, (Series winding, if Auto). Default is 0.0001. If 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @R1.setter
    def R1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def R2(self) -> float:
        """
        DSS property name: R2
        DSS property index: 8

        Resistance, each phase, ohms for X winding, (Common winding, if Auto). Default is 0.0001. 
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @R2.setter
    def R2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def KVLL1(self) -> float:
        """
        DSS property name: KVLL1
        DSS property index: 9

        Optional. kV LL rating for H winding (winding 1). Default is 500. Required if you are going to export vars for power flow analysis or enter winding resistances in percent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @KVLL1.setter
    def KVLL1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def KVLL2(self) -> float:
        """
        DSS property name: KVLL2
        DSS property index: 10

        Optional. kV LL rating for X winding (winding 2). Default is 138. Required if you are going to export vars for power flow analysis or enter winding resistances in percent..
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @KVLL2.setter
    def KVLL2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def MVA(self) -> float:
        """
        DSS property name: MVA
        DSS property index: 11

        Optional. MVA Rating assumed Transformer. Default is 100. Used for computing vars due to GIC and winding resistances if kV and MVA ratings are specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @MVA.setter
    def MVA(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def VarCurve(self) -> str:
        """
        DSS property name: VarCurve
        DSS property index: 12

        Optional. XYCurve object name. Curve is expected as TOTAL pu vars vs pu GIC amps/phase. Vars are in pu of the MVA property. No Default value. Required only if you are going to export vars for power flow analysis. See K property.
        """
        return self._get_prop_string(12)

    @VarCurve.setter
    def VarCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_obj(12, value)
            return

        self._set_string(12, value)

    @property
    def VarCurve_obj(self) -> XYcurve:
        """
        DSS property name: VarCurve
        DSS property index: 12

        Optional. XYCurve object name. Curve is expected as TOTAL pu vars vs pu GIC amps/phase. Vars are in pu of the MVA property. No Default value. Required only if you are going to export vars for power flow analysis. See K property.
        """
        return self._get_obj(12, XYcurve)

    @VarCurve_obj.setter
    def VarCurve_obj(self, value: XYcurve):
        self._set_obj(12, value)

    @property
    def pctR1(self) -> float:
        """
        DSS property name: %R1
        DSS property index: 13

        Optional. Percent Resistance, each phase, for H winding (1), (Series winding, if Auto). Default is 0.2. 

        Alternative way to enter R1 value. It is the actual resistances in ohmns that matter. MVA and kV should be specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @pctR1.setter
    def pctR1(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def pctR2(self) -> float:
        """
        DSS property name: %R2
        DSS property index: 14

        Optional. Percent Resistance, each phase, for X winding (2), (Common winding, if Auto). Default is 0.2. 

        Alternative way to enter R2 value. It is the actual resistances in ohms that matter. MVA and kV should be specified.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @pctR2.setter
    def pctR2(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def K(self) -> float:
        """
        DSS property name: K
        DSS property index: 15

        Mvar K factor. Default way to convert GIC Amps in H winding (winding 1) to Mvar. Default is 2.2. Commonly-used simple multiplier for estimating Mvar losses for power flow analysis. 

        Mvar = K * kvLL * GIC per phase / 1000 

        Mutually exclusive with using the VarCurve property and pu curves.If you specify this (default), VarCurve is ignored.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @K.setter
    def K(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def normamps(self) -> float:
        """
        DSS property name: normamps
        DSS property index: 16

        Normal rated current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @normamps.setter
    def normamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def emergamps(self) -> float:
        """
        DSS property name: emergamps
        DSS property index: 17

        Maximum or emerg current.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @emergamps.setter
    def emergamps(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def faultrate(self) -> float:
        """
        DSS property name: faultrate
        DSS property index: 18

        Failure rate per year.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @faultrate.setter
    def faultrate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def pctperm(self) -> float:
        """
        DSS property name: pctperm
        DSS property index: 19

        Percent of failures that become permanent.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @pctperm.setter
    def pctperm(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def repair(self) -> float:
        """
        DSS property name: repair
        DSS property index: 20

        Hours to repair.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @repair.setter
    def repair(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 21

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 22

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 22) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 23

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(23, value)

class VSConverter(DSSObj):
    _cls_name = 'VSConverter'
    _cls_idx = 45
    _cls_prop_idx = {
        'phases': 1,
        'bus1': 2,
        'kvac': 3,
        'kvdc': 4,
        'kw': 5,
        'ndc': 6,
        'rac': 7,
        'xac': 8,
        'm0': 9,
        'd0': 10,
        'mmin': 11,
        'mmax': 12,
        'iacmax': 13,
        'idcmax': 14,
        'vacref': 15,
        'pacref': 16,
        'qacref': 17,
        'vdcref': 18,
        'vscmode': 19,
        'spectrum': 20,
        'basefreq': 21,
        'enabled': 22,
        'like': 23,
    }

    # Class-specific enumerations
    class VSConverterControlMode(IntEnum):
        """VSConverter: Control Mode (DSS enumeration for VSConverter)"""
        Fixed = 0 # Fixed
        PacVac = 1 # PacVac
        PacQac = 2 # PacQac
        VdcVac = 3 # VdcVac
        VdcQac = 4 # VdcQac


    @property
    def phases(self) -> int:
        """
        DSS property name: phases
        DSS property index: 1

        Number of AC plus DC conductors. Default is 4. AC phases numbered before DC conductors.
        """
        return self._lib.Obj_GetInt32(self._ptr, 1)

    @phases.setter
    def phases(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 1, value)

    @property
    def Bus1(self) -> str:
        """
        DSS property name: Bus1
        DSS property index: 2

        Name of converter bus, containing both AC and DC conductors. Bus2 is always ground.
        """
        return self._get_prop_string(2)

    @Bus1.setter
    def Bus1(self, value: AnyStr):
        self._set_string(2, value)

    @property
    def kVac(self) -> float:
        """
        DSS property name: kVac
        DSS property index: 3

        Nominal AC line-neutral voltage in kV. Must be specified > 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kVac.setter
    def kVac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def kVdc(self) -> float:
        """
        DSS property name: kVdc
        DSS property index: 4

        Nominal DC voltage in kV. Must be specified > 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 4)

    @kVdc.setter
    def kVdc(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 4, value)

    @property
    def kW(self) -> float:
        """
        DSS property name: kW
        DSS property index: 5

        Nominal converter power in kW. Must be specified > 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kW.setter
    def kW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def Ndc(self) -> int:
        """
        DSS property name: Ndc
        DSS property index: 6

        Number of DC conductors. Default is 1. DC conductors numbered after AC phases.
        """
        return self._lib.Obj_GetInt32(self._ptr, 6)

    @Ndc.setter
    def Ndc(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def Rac(self) -> float:
        """
        DSS property name: Rac
        DSS property index: 7

        AC resistance (ohms) for the converter transformer, plus any series reactors. Default is 0.
        Must be 0 for Vac control mode.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 7)

    @Rac.setter
    def Rac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 7, value)

    @property
    def Xac(self) -> float:
        """
        DSS property name: Xac
        DSS property index: 8

        AC reactance (ohms) for the converter transformer, plus any series reactors. Default is 0.
        Must be 0 for Vac control mode. Must be >0 for PacVac, PacQac or VacVdc control mode.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @Xac.setter
    def Xac(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def m0(self) -> float:
        """
        DSS property name: m0
        DSS property index: 9

        Fixed or initial value of the modulation index. Default is 0.5.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 9)

    @m0.setter
    def m0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 9, value)

    @property
    def d0(self) -> float:
        """
        DSS property name: d0
        DSS property index: 10

        Fixed or initial value of the power angle in degrees. Default is 0.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 10)

    @d0.setter
    def d0(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 10, value)

    @property
    def Mmin(self) -> float:
        """
        DSS property name: Mmin
        DSS property index: 11

        Minimum value of modulation index. Default is 0.1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @Mmin.setter
    def Mmin(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def Mmax(self) -> float:
        """
        DSS property name: Mmax
        DSS property index: 12

        Maximum value of modulation index. Default is 0.9.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @Mmax.setter
    def Mmax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def Iacmax(self) -> float:
        """
        DSS property name: Iacmax
        DSS property index: 13

        Maximum value of AC line current, per-unit of nominal. Default is 2.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @Iacmax.setter
    def Iacmax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def Idcmax(self) -> float:
        """
        DSS property name: Idcmax
        DSS property index: 14

        Maximum value of DC current, per-unit of nominal. Default is 2.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 14)

    @Idcmax.setter
    def Idcmax(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 14, value)

    @property
    def Vacref(self) -> float:
        """
        DSS property name: Vacref
        DSS property index: 15

        Reference AC line-to-neutral voltage, RMS Volts. Default is 0.
        Applies to PacVac and VdcVac control modes, influencing m.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 15)

    @Vacref.setter
    def Vacref(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 15, value)

    @property
    def Pacref(self) -> float:
        """
        DSS property name: Pacref
        DSS property index: 16

        Reference total AC real power, Watts. Default is 0.
        Applies to PacVac and PacQac control modes, influencing d.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 16)

    @Pacref.setter
    def Pacref(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 16, value)

    @property
    def Qacref(self) -> float:
        """
        DSS property name: Qacref
        DSS property index: 17

        Reference total AC reactive power, Vars. Default is 0.
        Applies to PacQac and VdcQac control modes, influencing m.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 17)

    @Qacref.setter
    def Qacref(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 17, value)

    @property
    def Vdcref(self) -> float:
        """
        DSS property name: Vdcref
        DSS property index: 18

        Reference DC voltage, Volts. Default is 0.
        Applies to VdcVac control mode, influencing d.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @Vdcref.setter
    def Vdcref(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def VscMode(self) -> VSConverterControlMode:
        """
        DSS property name: VscMode
        DSS property index: 19

        Control Mode (Fixed|PacVac|PacQac|VdcVac|VdcQac). Default is Fixed.
        """
        return VSConverterControlMode(self._lib.Obj_GetInt32(self._ptr, 19))

    @VscMode.setter
    def VscMode(self, value: Union[AnyStr, int, VSConverterControlMode]):
        if not isinstance(value, int):
            self._set_string(19, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 19, value)

    @property
    def VscMode_str(self) -> str:
        """
        DSS property name: VscMode
        DSS property index: 19

        Control Mode (Fixed|PacVac|PacQac|VdcVac|VdcQac). Default is Fixed.
        """
        return self._get_prop_string(19)

    @VscMode_str.setter
    def VscMode_str(self, value: AnyStr):
        self.VscMode = value

    @property
    def spectrum(self) -> str:
        """
        DSS property name: spectrum
        DSS property index: 20

        Name of harmonic spectrum for this device.
        """
        return self._get_prop_string(20)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_obj(20, value)
            return

        self._set_string(20, value)

    @property
    def spectrum_obj(self) -> Spectrum:
        """
        DSS property name: spectrum
        DSS property index: 20

        Name of harmonic spectrum for this device.
        """
        return self._get_obj(20, Spectrum)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_obj(20, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 21

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 22

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 22) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 22, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 23

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(23, value)

class Monitor(DSSObj):
    _cls_name = 'Monitor'
    _cls_idx = 46
    _cls_prop_idx = {
        'element': 1,
        'terminal': 2,
        'mode': 3,
        'action': 4,
        'residual': 5,
        'vipolar': 6,
        'ppolar': 7,
        'basefreq': 8,
        'enabled': 9,
        'like': 10,
    }

    # Class-specific enumerations
    class MonitorAction(IntEnum):
        """Monitor: Action (DSS enumeration for Monitor)"""
        Clear = 0 # Clear
        Save = 1 # Save
        Take = 2 # Take
        Process = 3 # Process
        Reset = 0 # Reset


    @property
    def element(self) -> str:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_prop_string(1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def element_obj(self) -> DSSObj:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_obj(1, None)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def terminal(self) -> int:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the monitor is connected. 1 or 2, typically. For monitoring states, attach monitor to terminal 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @terminal.setter
    def terminal(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def mode(self) -> int:
        """
        DSS property name: mode
        DSS property index: 3

        Bitmask integer designating the values the monitor is to capture: 
        0 = Voltages and currents at designated terminal
        1 = Powers at designated terminal
        2 = Tap Position (Transformer Device only)
        3 = State Variables (PCElements only)
        4 = Flicker level and severity index (Pst) for voltages. No adders apply.
            Flicker level at simulation time step, Pst at 10-minute time step.
        5 = Solution variables (Iterations, etc).
        Normally, these would be actual phasor quantities from solution.
        6 = Capacitor Switching (Capacitors only)
        7 = Storage state vars (Storage device only)
        8 = All winding currents (Transformer device only)
        9 = Losses, watts and var (of monitored device)
        10 = All Winding voltages (Transformer device only)
        Normally, these would be actual phasor quantities from solution.
        11 = All terminal node voltages and line currents of monitored device
        12 = All terminal node voltages LL and line currents of monitored device
        Combine mode with adders below to achieve other results for terminal quantities:
        +16 = Sequence quantities
        +32 = Magnitude only
        +64 = Positive sequence only or avg of all phases

        Mix adder to obtain desired results. For example:
        Mode=112 will save positive sequence voltage and current magnitudes only
        Mode=48 will save all sequence voltages and currents, but magnitude only.
        """
        return self._lib.Obj_GetInt32(self._ptr, 3)

    @mode.setter
    def mode(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 3, value)

    def action(self, value: Union[str, bytes, int, MonitorAction]):
        """
        DSS property name: action
        DSS property index: 4

        {Clear | Save | Take | Process}
        (C)lears or (S)aves current buffer.
        (T)ake action takes a sample.
        (P)rocesses the data taken so far (e.g. Pst for mode 4).

        Note that monitors are automatically reset (cleared) when the Set Mode= command is issued. Otherwise, the user must explicitly reset all monitors (reset monitors command) or individual monitors with the Clear action.
        """
        if isinstance(value, int):
            self._lib.Obj_SetInt32(self._ptr, 4, value)
            return
    
        self._set_string(4, value)

    @property
    def residual(self) -> bool:
        """
        DSS property name: residual
        DSS property index: 5

        {Yes/True | No/False} Default = No.  Include Residual cbannel (sum of all phases) for voltage and current. Does not apply to sequence quantity modes or power modes.
        """
        return self._lib.Obj_GetInt32(self._ptr, 5) != 0

    @residual.setter
    def residual(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 5, value)

    @property
    def VIPolar(self) -> bool:
        """
        DSS property name: VIPolar
        DSS property index: 6

        {Yes/True | No/False} Default = YES. Report voltage and current in polar form (Mag/Angle). (default)  Otherwise, it will be real and imaginary.
        """
        return self._lib.Obj_GetInt32(self._ptr, 6) != 0

    @VIPolar.setter
    def VIPolar(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 6, value)

    @property
    def PPolar(self) -> bool:
        """
        DSS property name: PPolar
        DSS property index: 7

        {Yes/True | No/False} Default = YES. Report power in Apparent power, S, in polar form (Mag/Angle).(default)  Otherwise, is P and Q
        """
        return self._lib.Obj_GetInt32(self._ptr, 7) != 0

    @PPolar.setter
    def PPolar(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 7, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 8

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 8)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 8, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 9

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 9) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 9, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 10

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(10, value)

class EnergyMeter(DSSObj):
    _cls_name = 'EnergyMeter'
    _cls_idx = 47
    _cls_prop_idx = {
        'element': 1,
        'terminal': 2,
        'action': 3,
        'option': 4,
        'kvanormal': 5,
        'kvaemerg': 6,
        'peakcurrent': 7,
        'zonelist': 8,
        'localonly': 9,
        'mask': 10,
        'losses': 11,
        'linelosses': 12,
        'xfmrlosses': 13,
        'seqlosses': 14,
        'threepaselosses': 15,
        '3phaselosses': 15,
        'vbaselosses': 16,
        'phasevoltagereport': 17,
        'int_rate': 18,
        'int_duration': 19,
        'saifi': 20,
        'saifikw': 21,
        'saidi': 22,
        'caidi': 23,
        'custinterrupts': 24,
        'basefreq': 25,
        'enabled': 26,
        'like': 27,
    }

    # Class-specific enumerations
    class EnergyMeterAction(IntEnum):
        """EnergyMeter: Action (DSS enumeration for EnergyMeter)"""
        Allocate = 0 # Allocate
        Clear = 1 # Clear
        Reduce = 2 # Reduce
        Save = 3 # Save
        Take = 4 # Take
        ZoneDump = 5 # ZoneDump


    @property
    def element(self) -> str:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_prop_string(1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def element_obj(self) -> DSSObj:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_obj(1, None)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def terminal(self) -> int:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the monitor is connected. 1 or 2, typically.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @terminal.setter
    def terminal(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    def action(self, value: Union[str, bytes, int, EnergyMeterAction]):
        """
        DSS property name: action
        DSS property index: 3

        {Clear (reset) | Save | Take | Zonedump | Allocate | Reduce} 

        (A)llocate = Allocate loads on the meter zone to match PeakCurrent.
        (C)lear = reset all registers to zero
        (R)educe = reduces zone by merging lines (see Set Keeplist & ReduceOption)
        (S)ave = saves the current register values to a file.
           File name is "MTR_metername.CSV".
        (T)ake = Takes a sample at present solution
        (Z)onedump = Dump names of elements in meter zone to a file
           File name is "Zone_metername.CSV".
        """
        if isinstance(value, int):
            self._lib.Obj_SetInt32(self._ptr, 3, value)
            return
    
        self._set_string(3, value)

    @property
    def option(self) -> List[str]:
        """
        DSS property name: option
        DSS property index: 4

        Enter a string ARRAY of any combination of the following. Options processed left-to-right:

        (E)xcess : (default) UE/EEN is estimate of energy over capacity 
        (T)otal : UE/EEN is total energy after capacity exceeded
        (R)adial : (default) Treats zone as a radial circuit
        (M)esh : Treats zone as meshed network (not radial).
        (C)ombined : (default) Load UE/EEN computed from combination of overload and undervoltage.
        (V)oltage : Load UE/EEN computed based on voltage only.

        Example: option=(E, R)
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 4)

    @option.setter
    def option(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 4, value_ptr, value_count)
        self._check_for_error()

    @property
    def kVAnormal(self) -> float:
        """
        DSS property name: kVAnormal
        DSS property index: 5

        Upper limit on kVA load in the zone, Normal configuration. Default is 0.0 (ignored). Overrides limits on individual lines for overload EEN. With "LocalOnly=Yes" option, uses only load in metered branch.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 5)

    @kVAnormal.setter
    def kVAnormal(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 5, value)

    @property
    def kVAemerg(self) -> float:
        """
        DSS property name: kVAemerg
        DSS property index: 6

        Upper limit on kVA load in the zone, Emergency configuration. Default is 0.0 (ignored). Overrides limits on individual lines for overload UE. With "LocalOnly=Yes" option, uses only load in metered branch.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 6)

    @kVAemerg.setter
    def kVAemerg(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 6, value)

    @property
    def peakcurrent(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: peakcurrent
        DSS property index: 7

        ARRAY of current magnitudes representing the peak currents measured at this location for the load allocation function.  Default is (400, 400, 400). Enter one current for each phase
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @peakcurrent.setter
    def peakcurrent(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def Zonelist(self) -> List[str]:
        """
        DSS property name: Zonelist
        DSS property index: 8

        ARRAY of full element names for this meter's zone.  Default is for meter to find it's own zone. If specified, DSS uses this list instead.  Can access the names in a single-column text file.  Examples: 

        zonelist=[line.L1, transformer.T1, Line.L3] 
        zonelist=(file=branchlist.txt)
        """
        return self._get_string_array(self._lib.Obj_GetStringArray, self._ptr, 8)

    @Zonelist.setter
    def Zonelist(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        self._lib.Obj_SetStringArray(self._ptr, 8, value_ptr, value_count)
        self._check_for_error()

    @property
    def LocalOnly(self) -> bool:
        """
        DSS property name: LocalOnly
        DSS property index: 9

        {Yes | No}  Default is NO.  If Yes, meter considers only the monitored element for EEN and UE calcs.  Uses whole zone for losses.
        """
        return self._lib.Obj_GetInt32(self._ptr, 9) != 0

    @LocalOnly.setter
    def LocalOnly(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 9, value)

    @property
    def Mask(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: Mask
        DSS property index: 10

        Mask for adding registers whenever all meters are totalized.  Array of floating point numbers representing the multiplier to be used for summing each register from this meter. Default = (1, 1, 1, 1, ... ).  You only have to enter as many as are changed (positional). Useful when two meters monitor same energy, etc.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 10)

    @Mask.setter
    def Mask(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Losses(self) -> bool:
        """
        DSS property name: Losses
        DSS property index: 11

        {Yes | No}  Default is YES. Compute Zone losses. If NO, then no losses at all are computed.
        """
        return self._lib.Obj_GetInt32(self._ptr, 11) != 0

    @Losses.setter
    def Losses(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 11, value)

    @property
    def LineLosses(self) -> bool:
        """
        DSS property name: LineLosses
        DSS property index: 12

        {Yes | No}  Default is YES. Compute Line losses. If NO, then none of the losses are computed.
        """
        return self._lib.Obj_GetInt32(self._ptr, 12) != 0

    @LineLosses.setter
    def LineLosses(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 12, value)

    @property
    def XfmrLosses(self) -> bool:
        """
        DSS property name: XfmrLosses
        DSS property index: 13

        {Yes | No}  Default is YES. Compute Transformer losses. If NO, transformers are ignored in loss calculations.
        """
        return self._lib.Obj_GetInt32(self._ptr, 13) != 0

    @XfmrLosses.setter
    def XfmrLosses(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 13, value)

    @property
    def SeqLosses(self) -> bool:
        """
        DSS property name: SeqLosses
        DSS property index: 14

        {Yes | No}  Default is YES. Compute Sequence losses in lines and segregate by line mode losses and zero mode losses.
        """
        return self._lib.Obj_GetInt32(self._ptr, 14) != 0

    @SeqLosses.setter
    def SeqLosses(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 14, value)

    @property
    def threePaseLosses(self) -> bool:
        """
        DSS property name: 3phaseLosses
        DSS property index: 15

        {Yes | No}  Default is YES. Compute Line losses and segregate by 3-phase and other (1- and 2-phase) line losses. 
        """
        return self._lib.Obj_GetInt32(self._ptr, 15) != 0

    @threePaseLosses.setter
    def threePaseLosses(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 15, value)

    @property
    def VbaseLosses(self) -> bool:
        """
        DSS property name: VbaseLosses
        DSS property index: 16

        {Yes | No}  Default is YES. Compute losses and segregate by voltage base. If NO, then voltage-based tabulation is not reported.
        """
        return self._lib.Obj_GetInt32(self._ptr, 16) != 0

    @VbaseLosses.setter
    def VbaseLosses(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 16, value)

    @property
    def PhaseVoltageReport(self) -> bool:
        """
        DSS property name: PhaseVoltageReport
        DSS property index: 17

        {Yes | No}  Default is NO.  Report min, max, and average phase voltages for the zone and tabulate by voltage base. Demand Intervals must be turned on (Set Demand=true) and voltage bases must be defined for this property to take effect. Result is in a separate report file.
        """
        return self._lib.Obj_GetInt32(self._ptr, 17) != 0

    @PhaseVoltageReport.setter
    def PhaseVoltageReport(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 17, value)

    @property
    def Int_Rate(self) -> float:
        """
        DSS property name: Int_Rate
        DSS property index: 18

        Average number of annual interruptions for head of the meter zone (source side of zone or feeder).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 18)

    @Int_Rate.setter
    def Int_Rate(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 18, value)

    @property
    def Int_Duration(self) -> float:
        """
        DSS property name: Int_Duration
        DSS property index: 19

        Average annual duration, in hr, of interruptions for head of the meter zone (source side of zone or feeder).
        """
        return self._lib.Obj_GetFloat64(self._ptr, 19)

    @Int_Duration.setter
    def Int_Duration(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 19, value)

    @property
    def SAIFI(self) -> float:
        """
        DSS property name: SAIFI
        DSS property index: 20

        (Read only) Makes SAIFI result available via return on query (? energymeter.myMeter.SAIFI.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 20)

    @SAIFI.setter
    def SAIFI(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 20, value)

    @property
    def SAIFIkW(self) -> float:
        """
        DSS property name: SAIFIkW
        DSS property index: 21

        (Read only) Makes SAIFIkW result available via return on query (? energymeter.myMeter.SAIFIkW.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 21)

    @SAIFIkW.setter
    def SAIFIkW(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 21, value)

    @property
    def SAIDI(self) -> float:
        """
        DSS property name: SAIDI
        DSS property index: 22

        (Read only) Makes SAIDI result available via return on query (? energymeter.myMeter.SAIDI.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 22)

    @SAIDI.setter
    def SAIDI(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 22, value)

    @property
    def CAIDI(self) -> float:
        """
        DSS property name: CAIDI
        DSS property index: 23

        (Read only) Makes CAIDI result available via return on query (? energymeter.myMeter.CAIDI.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 23)

    @CAIDI.setter
    def CAIDI(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 23, value)

    @property
    def CustInterrupts(self) -> float:
        """
        DSS property name: CustInterrupts
        DSS property index: 24

        (Read only) Makes Total Customer Interrupts value result available via return on query (? energymeter.myMeter.CustInterrupts.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 24)

    @CustInterrupts.setter
    def CustInterrupts(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 24, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 25

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 25)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 25, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 26

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 26) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 26, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 27

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(27, value)

class Sensor(DSSObj):
    _cls_name = 'Sensor'
    _cls_idx = 48
    _cls_prop_idx = {
        'element': 1,
        'terminal': 2,
        'kvbase': 3,
        'clear': 4,
        'kvs': 5,
        'currents': 6,
        'kws': 7,
        'kvars': 8,
        'conn': 9,
        'deltadirection': 10,
        'pcterror': 11,
        '%error': 11,
        'weight': 12,
        'basefreq': 13,
        'enabled': 14,
        'like': 15,
    }

    @property
    def element(self) -> str:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the Sensor is connected.
        """
        return self._get_prop_string(1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_obj(1, value)
            return

        self._set_string(1, value)

    @property
    def element_obj(self) -> DSSObj:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the Sensor is connected.
        """
        return self._get_obj(1, None)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_obj(1, value)

    @property
    def terminal(self) -> int:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the Sensor is connected. 1 or 2, typically. Default is 1.
        """
        return self._lib.Obj_GetInt32(self._ptr, 2)

    @terminal.setter
    def terminal(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 2, value)

    @property
    def kvbase(self) -> float:
        """
        DSS property name: kvbase
        DSS property index: 3

        Voltage base for the sensor, in kV. If connected to a 2- or 3-phase terminal, 
        specify L-L voltage. For 1-phase devices specify L-N or actual 1-phase voltage. Like many other DSS devices, default is 12.47kV.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 3)

    @kvbase.setter
    def kvbase(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 3, value)

    @property
    def clear(self) -> bool:
        """
        DSS property name: clear
        DSS property index: 4

        { Yes | No }. Clear=Yes clears sensor values. Should be issued before putting in a new set of measurements.
        """
        return self._lib.Obj_GetInt32(self._ptr, 4) != 0

    @clear.setter
    def clear(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 4, value)

    @property
    def kVs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kVs
        DSS property index: 5

        Array of Voltages (kV) measured by the voltage sensor. For Delta-connected sensors, Line-Line voltages are expected. For Wye, Line-Neutral are expected.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 5)

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(5, value)

    @property
    def currents(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: currents
        DSS property index: 6

        Array of Currents (amps) measured by the current sensor. Specify this or power quantities; not both.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 6)

    @currents.setter
    def currents(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def kWs(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kWs
        DSS property index: 7

        Array of Active power (kW) measurements at the sensor. Is converted into Currents along with q=[...]
        Will override any currents=[...] specification.
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 7)

    @kWs.setter
    def kWs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def kvars(self) -> npt.NDArray[np.float64]:
        """
        DSS property name: kvars
        DSS property index: 8

        Array of Reactive power (kvar) measurements at the sensor. Is converted into Currents along with p=[...]
        """
        return self._get_float64_array(self._lib.Obj_GetFloat64Array, self._ptr, 8)

    @kvars.setter
    def kvars(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def conn(self) -> Connection:
        """
        DSS property name: conn
        DSS property index: 9

        Voltage sensor Connection: { wye | delta | LN | LL }.  Default is wye. Applies to voltage measurement only. 
        Currents are always assumed to be line currents.
        If wye or LN, voltage is assumed measured line-neutral; otherwise, line-line.
        """
        return Connection(self._lib.Obj_GetInt32(self._ptr, 9))

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection]):
        if not isinstance(value, int):
            self._set_string(9, value)
            return
        self._lib.Obj_SetInt32(self._ptr, 9, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 9

        Voltage sensor Connection: { wye | delta | LN | LL }.  Default is wye. Applies to voltage measurement only. 
        Currents are always assumed to be line currents.
        If wye or LN, voltage is assumed measured line-neutral; otherwise, line-line.
        """
        return self._get_prop_string(9)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def Deltadirection(self) -> int:
        """
        DSS property name: Deltadirection
        DSS property index: 10

        {1 or -1}  Default is 1:  1-2, 2-3, 3-1.  For reverse rotation, enter -1. Any positive or negative entry will suffice.
        """
        return self._lib.Obj_GetInt32(self._ptr, 10)

    @Deltadirection.setter
    def Deltadirection(self, value: int):
        self._lib.Obj_SetInt32(self._ptr, 10, value)

    @property
    def pctError(self) -> float:
        """
        DSS property name: %Error
        DSS property index: 11

        Assumed percent error in the measurement. Default is 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 11)

    @pctError.setter
    def pctError(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 11, value)

    @property
    def Weight(self) -> float:
        """
        DSS property name: Weight
        DSS property index: 12

        Weighting factor: Default is 1.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 12)

    @Weight.setter
    def Weight(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 12, value)

    @property
    def basefreq(self) -> float:
        """
        DSS property name: basefreq
        DSS property index: 13

        Base Frequency for ratings.
        """
        return self._lib.Obj_GetFloat64(self._ptr, 13)

    @basefreq.setter
    def basefreq(self, value: float):
        self._lib.Obj_SetFloat64(self._ptr, 13, value)

    @property
    def enabled(self) -> bool:
        """
        DSS property name: enabled
        DSS property index: 14

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return self._lib.Obj_GetInt32(self._ptr, 14) != 0

    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Obj_SetInt32(self._ptr, 14, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 15

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_string(15, value)

class LineCodeBatch(DSSBatch):
    _cls_name = 'LineCode'
    _obj_cls = LineCode
    _cls_idx = 1


    @property
    def nphases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: nphases
        DSS property index: 1

        Number of phases in the line this line code data represents.  Setting this property reinitializes the line code.  Impedance matrix is reset for default symmetrical component.
        """
        return BatchInt32ArrayProxy(self, 1)

    @nphases.setter
    def nphases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def r1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: r1
        DSS property index: 2

        Positive-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Rmatrix.
        """
        return BatchFloat64ArrayProxy(self, 2)

    @r1.setter
    def r1(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def x1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: x1
        DSS property index: 3

        Positive-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Xmatrix
        """
        return BatchFloat64ArrayProxy(self, 3)

    @x1.setter
    def x1(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def r0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: r0
        DSS property index: 4

        Zero-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @r0.setter
    def r0(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def x0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: x0
        DSS property index: 5

        Zero-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @x0.setter
    def x0(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def C1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: C1
        DSS property index: 6

        Positive-sequence capacitance, nf per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Cmatrix and B1.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @C1.setter
    def C1(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def C0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: C0
        DSS property index: 7

        Zero-sequence capacitance, nf per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also B0.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @C0.setter
    def C0(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def units(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: units
        DSS property index: 8

        One of (ohms per ...) {none|mi|km|kft|m|me|ft|in|cm}.  Default is none; assumes units agree with length unitsgiven in Line object
        """
        return BatchInt32ArrayProxy(self, 8)

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(8, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(8, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 8

        One of (ohms per ...) {none|mi|km|kft|m|me|ft|in|cm}.  Default is none; assumes units agree with length unitsgiven in Line object
        """
        return self._get_prop_string(8)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    @property
    def rmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: rmatrix
        DSS property index: 9

        Resistance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 9)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @rmatrix.setter
    def rmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def xmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: xmatrix
        DSS property index: 10

        Reactance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 10)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @xmatrix.setter
    def xmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def cmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: cmatrix
        DSS property index: 11

        Nodal Capacitance matrix, lower triangle, nf per unit length.Order of the matrix is the number of phases. May be used to specify the shunt capacitance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 11)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @cmatrix.setter
    def cmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def baseFreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: baseFreq
        DSS property index: 12

        Frequency at which impedances are specified.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @baseFreq.setter
    def baseFreq(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 13

        Normal ampere limit on line.  This is the so-called Planning Limit. It may also be the value above which load will have to be dropped in a contingency.  Usually about 75% - 80% of the emergency (one-hour) rating.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 14

        Emergency ampere limit on line (usually one-hour rating).
        """
        return BatchFloat64ArrayProxy(self, 14)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 15

        Number of faults per unit length per year.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 16

        Percentage of the faults that become permanent.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 17

        Hours to repair.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(17, value)

    def Kron(self, value: bool):
        """
        DSS property name: Kron
        DSS property index: 18

        Kron = Y/N. Default=N.  Perform Kron reduction on the impedance matrix after it is formed, reducing order by 1. Eliminates the conductor designated by the "Neutral=" property. Do this after the R, X, and C matrices are defined. Ignored for symmetrical components. May be issued more than once to eliminate more than one conductor by resetting the Neutral property after the previous invoking of this property. Generally, you do not want to do a Kron reduction on the matrix if you intend to solve at a frequency other than the base frequency and exploit the Rg and Xg values.
        """
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 18, value)

    @property
    def Rg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rg
        DSS property index: 19

        Carson earth return resistance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments. Default is 0.01805 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @Rg.setter
    def Rg(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def Xg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xg
        DSS property index: 20

        Carson earth return reactance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments. Default value is 0.155081 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @Xg.setter
    def Xg(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def rho(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: rho
        DSS property index: 21

        Default=100 meter ohms.  Earth resitivity used to compute earth correction factor.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @rho.setter
    def rho(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def neutral(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: neutral
        DSS property index: 22

        Designates which conductor is the "neutral" conductor that will be eliminated by Kron reduction. Default is the last conductor (nphases value). After Kron reduction is set to 0. Subsequent issuing of Kron=Yes will not do anything until this property is set to a legal value. Applies only to LineCodes defined by R, X, and C matrix.
        """
        return BatchInt32ArrayProxy(self, 22)

    @neutral.setter
    def neutral(self, value):
        self._set_batch_int32_array(22, value)

    @property
    def B1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: B1
        DSS property index: 23

        Alternate way to specify C1. MicroS per unit length
        """
        return BatchFloat64ArrayProxy(self, 23)

    @B1.setter
    def B1(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def B0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: B0
        DSS property index: 24

        Alternate way to specify C0. MicroS per unit length
        """
        return BatchFloat64ArrayProxy(self, 24)

    @B0.setter
    def B0(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 25

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return BatchInt32ArrayProxy(self, 25)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(25, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 26

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 26)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(26, value)

    @property
    def linetype(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: LineType
        DSS property index: 27

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return BatchInt32ArrayProxy(self, 27)

    @linetype.setter
    def linetype(self, value: Union[AnyStr, int, LineType, List[AnyStr], List[Union[int, LineType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(27, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(27, value)

    @property
    def linetype_str(self) -> str:
        """
        DSS property name: LineType
        DSS property index: 27

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return self._get_prop_string(27)

    @linetype_str.setter
    def linetype_str(self, value: AnyStr):
        self.linetype = value

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 28

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(28, value)

class LoadShapeBatch(DSSBatch):
    _cls_name = 'LoadShape'
    _obj_cls = LoadShape
    _cls_idx = 2


    @property
    def npts(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in load shape vectors. This gets reset to the number of multiplier values found (in files only) if less than specified.
        """
        return BatchInt32ArrayProxy(self, 1)

    @npts.setter
    def npts(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def interval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: interval
        DSS property index: 2

        Time interval for fixed interval data, hrs. Default = 1. If Interval = 0 then time data (in hours) may be at either regular or  irregular intervals and time value must be specified using either the Hour property or input files. Then values are interpolated when Interval=0, but not for fixed interval data.  

        See also "sinterval" and "minterval".
        """
        return BatchFloat64ArrayProxy(self, 2)

    @interval.setter
    def interval(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def mult(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: mult
        DSS property index: 3

        Array of multiplier values for active power (P) or other key value (such as pu V for Vsource). 

        You can also use the syntax: 

        mult = (file=filename)     !for text file one value per line
        mult = (dblfile=filename)  !for packed file of doubles
        mult = (sngfile=filename)  !for packed file of singles 
        mult = (file=MyCSVFile.CSV, col=3, header=yes)  !for multicolumn CSV files 

        Note: this property will reset Npts if the  number of values in the files are fewer.

        Same as Pmult
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @mult.setter
    def mult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def hour(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: hour
        DSS property index: 4

        Array of hour values. Only necessary to define for variable interval data (Interval=0). If you set Interval>0 to denote fixed interval data, DO NOT USE THIS PROPERTY. You can also use the syntax: 
        hour = (file=filename)     !for text file one value per line
        hour = (dblfile=filename)  !for packed file of doubles
        hour = (sngfile=filename)  !for packed file of singles 
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @hour.setter
    def hour(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def mean(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: mean
        DSS property index: 5

        Mean of the active power multipliers.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently. Used for Monte Carlo load simulations.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @mean.setter
    def mean(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def stddev(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: stddev
        DSS property index: 6

        Standard deviation of active power multipliers.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently.Is overwritten if you subsequently read in a curve

        Used for Monte Carlo load simulations.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @stddev.setter
    def stddev(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def csvfile(self) -> List[str]:
        """
        DSS property name: csvfile
        DSS property index: 7

        Switch input of active power load curve data to a CSV text file containing (hour, mult) points, or simply (mult) values for fixed time interval data, one per line. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7) 

    @csvfile.setter
    def csvfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 7, value)

    @property
    def sngfile(self) -> List[str]:
        """
        DSS property name: sngfile
        DSS property index: 8

        Switch input of active power load curve data to a binary file of singles containing (hour, mult) points, or simply (mult) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8) 

    @sngfile.setter
    def sngfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 8, value)

    @property
    def dblfile(self) -> List[str]:
        """
        DSS property name: dblfile
        DSS property index: 9

        Switch input of active power load curve data to a binary file of doubles containing (hour, mult) points, or simply (mult) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9) 

    @dblfile.setter
    def dblfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 9, value)

    def action(self, value: Union[str, bytes, int]):
        """
        DSS property name: action
        DSS property index: 10

        {NORMALIZE | DblSave | SngSave} After defining load curve data, setting action=normalize will modify the multipliers so that the peak is 1.0. The mean and std deviation are recomputed.

        Setting action=DblSave or SngSave will cause the present mult and qmult values to be written to either a packed file of double or single. The filename is the loadshape name. The mult array will have a "_P" appended on the file name and the qmult array, if it exists, will have "_Q" appended.
        """
        if isinstance(value, int):
            self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 10, value)
        else:
            self._set_batch_string(10, value)

    @property
    def qmult(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: qmult
        DSS property index: 11

        Array of multiplier values for reactive power (Q).  You can also use the syntax: 
        qmult = (file=filename)     !for text file one value per line
        qmult = (dblfile=filename)  !for packed file of doubles
        qmult = (sngfile=filename)  !for packed file of singles 
        qmult = (file=MyCSVFile.CSV, col=4, header=yes)  !for multicolumn CSV files 
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 11)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @qmult.setter
    def qmult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def UseActual(self) -> List[bool]:
        """
        DSS property name: UseActual
        DSS property index: 12

        {Yes | No* | True | False*} If true, signifies to Load, Generator, Vsource, or other objects to use the return value as the actual kW, kvar, kV, or other value rather than a multiplier. Nominally for AMI Load data but may be used for other functions.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 12)
        ]
    @UseActual.setter
    def UseActual(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 12, value)

    @property
    def Pmax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Pmax
        DSS property index: 13

        kW value at the time of max power. Is automatically set upon reading in a loadshape. Use this property to override the value automatically computed or to retrieve the value computed.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @Pmax.setter
    def Pmax(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def Qmax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Qmax
        DSS property index: 14

        kvar value at the time of max kW power. Is automatically set upon reading in a loadshape. Use this property to override the value automatically computed or to retrieve the value computed.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @Qmax.setter
    def Qmax(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def sinterval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: sinterval
        DSS property index: 15

        Specify fixed interval in SECONDS. Alternate way to specify Interval property.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @sinterval.setter
    def sinterval(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def minterval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: minterval
        DSS property index: 16

        Specify fixed interval in MINUTES. Alternate way to specify Interval property.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @minterval.setter
    def minterval(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def Pbase(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Pbase
        DSS property index: 17

        Base P value for normalization. Default is zero, meaning the peak will be used.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @Pbase.setter
    def Pbase(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def Qbase(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Qbase
        DSS property index: 18

        Base Q value for normalization. Default is zero, meaning the peak will be used.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @Qbase.setter
    def Qbase(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def Pmult(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Pmult
        DSS property index: 19

        Synonym for "mult".
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 19)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Pmult.setter
    def Pmult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(19, value)

    @property
    def PQCSVFile(self) -> List[str]:
        """
        DSS property name: PQCSVFile
        DSS property index: 20

        Switch input to a CSV text file containing (active, reactive) power (P, Q) multiplier pairs, one per row. 
        If the interval=0, there should be 3 items on each line: (hour, Pmult, Qmult)
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 20) 

    @PQCSVFile.setter
    def PQCSVFile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 20, value)

    @property
    def MemoryMapping(self) -> List[bool]:
        """
        DSS property name: MemoryMapping
        DSS property index: 21

        {Yes | No* | True | False*} Enables the memory mapping functionality for dealing with large amounts of load shapes. 
        By defaul is False. Use it to accelerate the model loading when the containing a large number of load shapes.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 21)
        ]
    @MemoryMapping.setter
    def MemoryMapping(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 21, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 22

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(22, value)

class TShapeBatch(DSSBatch):
    _cls_name = 'TShape'
    _obj_cls = TShape
    _cls_idx = 3


    @property
    def npts(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in temperature shape vectors. This gets reset to the number of Temperature values found if less than specified.
        """
        return BatchInt32ArrayProxy(self, 1)

    @npts.setter
    def npts(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def interval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: interval
        DSS property index: 2

        Time interval for fixed interval data, hrs. Default = 1. If Interval = 0 then time data (in hours) may be at irregular intervals and time value must be specified using either the Hour property or input files. Then values are interpolated when Interval=0, but not for fixed interval data.  

        See also "sinterval" and "minterval".
        """
        return BatchFloat64ArrayProxy(self, 2)

    @interval.setter
    def interval(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def temp(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: temp
        DSS property index: 3

        Array of temperature values.  Units should be compatible with the object using the data. You can also use the syntax: 
        Temp = (file=filename)     !for text file one value per line
        Temp = (dblfile=filename)  !for packed file of doubles
        Temp = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts if the  number of values in the files are fewer.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @temp.setter
    def temp(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def hour(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: hour
        DSS property index: 4

        Array of hour values. Only necessary to define this property for variable interval data. If the data are fixed interval, do not use this property. You can also use the syntax: 
        hour = (file=filename)     !for text file one value per line
        hour = (dblfile=filename)  !for packed file of doubles
        hour = (sngfile=filename)  !for packed file of singles 
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @hour.setter
    def hour(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def mean(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: mean
        DSS property index: 5

        Mean of the temperature curve values.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently. Used for Monte Carlo load simulations.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @mean.setter
    def mean(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def stddev(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: stddev
        DSS property index: 6

        Standard deviation of the temperatures.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently.Is overwritten if you subsequently read in a curve

        Used for Monte Carlo load simulations.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @stddev.setter
    def stddev(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def csvfile(self) -> List[str]:
        """
        DSS property name: csvfile
        DSS property index: 7

        Switch input of  temperature curve data to a csv file containing (hour, Temp) points, or simply (Temp) values for fixed time interval data, one per line. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7) 

    @csvfile.setter
    def csvfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 7, value)

    @property
    def sngfile(self) -> List[str]:
        """
        DSS property name: sngfile
        DSS property index: 8

        Switch input of  temperature curve data to a binary file of singles containing (hour, Temp) points, or simply (Temp) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8) 

    @sngfile.setter
    def sngfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 8, value)

    @property
    def dblfile(self) -> List[str]:
        """
        DSS property name: dblfile
        DSS property index: 9

        Switch input of  temperature curve data to a binary file of doubles containing (hour, Temp) points, or simply (Temp) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9) 

    @dblfile.setter
    def dblfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 9, value)

    @property
    def sinterval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: sinterval
        DSS property index: 10

        Specify fixed interval in SECONDS. Alternate way to specify Interval property.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @sinterval.setter
    def sinterval(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def minterval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: minterval
        DSS property index: 11

        Specify fixed interval in MINUTES. Alternate way to specify Interval property.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @minterval.setter
    def minterval(self, value):
        self._set_batch_float64_array(11, value)

    def action(self, value: Union[str, bytes, int]):
        """
        DSS property name: action
        DSS property index: 12

        {DblSave | SngSave} After defining temperature curve data... Setting action=DblSave or SngSave will cause the present "Temp" values to be written to either a packed file of double or single. The filename is the Tshape name. 
        """
        if isinstance(value, int):
            self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 12, value)
        else:
            self._set_batch_string(12, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 13

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(13, value)

class PriceShapeBatch(DSSBatch):
    _cls_name = 'PriceShape'
    _obj_cls = PriceShape
    _cls_idx = 4


    @property
    def npts(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in price shape vectors. This gets reset to the number of Price values found if less than specified.
        """
        return BatchInt32ArrayProxy(self, 1)

    @npts.setter
    def npts(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def interval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: interval
        DSS property index: 2

        Time interval for fixed interval data, hrs. Default = 1. If Interval = 0 then time data (in hours) may be at irregular intervals and time value must be specified using either the Hour property or input files. Then values are interpolated when Interval=0, but not for fixed interval data.  

        See also "sinterval" and "minterval".
        """
        return BatchFloat64ArrayProxy(self, 2)

    @interval.setter
    def interval(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def price(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: price
        DSS property index: 3

        Array of Price values.  Units should be compatible with the object using the data. You can also use the syntax: 
        Price = (file=filename)     !for text file one value per line
        Price = (dblfile=filename)  !for packed file of doubles
        Price = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts if the  number of values in the files are fewer.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @price.setter
    def price(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def hour(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: hour
        DSS property index: 4

        Array of hour values. Only necessary to define this property for variable interval data. If the data are fixed interval, do not use this property. You can also use the syntax: 
        hour = (file=filename)     !for text file one value per line
        hour = (dblfile=filename)  !for packed file of doubles
        hour = (sngfile=filename)  !for packed file of singles 
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @hour.setter
    def hour(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def mean(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: mean
        DSS property index: 5

        Mean of the Price curve values.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently. Used for Monte Carlo load simulations.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @mean.setter
    def mean(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def stddev(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: stddev
        DSS property index: 6

        Standard deviation of the Prices.  This is computed on demand the first time a value is needed.  However, you may set it to another value independently.Is overwritten if you subsequently read in a curve

        Used for Monte Carlo load simulations.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @stddev.setter
    def stddev(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def csvfile(self) -> List[str]:
        """
        DSS property name: csvfile
        DSS property index: 7

        Switch input of  Price curve data to a csv file containing (hour, Price) points, or simply (Price) values for fixed time interval data, one per line. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7) 

    @csvfile.setter
    def csvfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 7, value)

    @property
    def sngfile(self) -> List[str]:
        """
        DSS property name: sngfile
        DSS property index: 8

        Switch input of  Price curve data to a binary file of singles containing (hour, Price) points, or simply (Price) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8) 

    @sngfile.setter
    def sngfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 8, value)

    @property
    def dblfile(self) -> List[str]:
        """
        DSS property name: dblfile
        DSS property index: 9

        Switch input of  Price curve data to a binary file of doubles containing (hour, Price) points, or simply (Price) values for fixed time interval data, packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9) 

    @dblfile.setter
    def dblfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 9, value)

    @property
    def sinterval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: sinterval
        DSS property index: 10

        Specify fixed interval in SECONDS. Alternate way to specify Interval property.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @sinterval.setter
    def sinterval(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def minterval(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: minterval
        DSS property index: 11

        Specify fixed interval in MINUTES. Alternate way to specify Interval property.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @minterval.setter
    def minterval(self, value):
        self._set_batch_float64_array(11, value)

    def action(self, value: Union[str, bytes, int]):
        """
        DSS property name: action
        DSS property index: 12

        {DblSave | SngSave} After defining Price curve data... Setting action=DblSave or SngSave will cause the present "Price" values to be written to either a packed file of double or single. The filename is the PriceShape name. 
        """
        if isinstance(value, int):
            self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 12, value)
        else:
            self._set_batch_string(12, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 13

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(13, value)

class XYcurveBatch(DSSBatch):
    _cls_name = 'XYcurve'
    _obj_cls = XYcurve
    _cls_idx = 5


    @property
    def npts(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: npts
        DSS property index: 1

        Max number of points to expect in curve. This could get reset to the actual number of points defined if less than specified.
        """
        return BatchInt32ArrayProxy(self, 1)

    @npts.setter
    def npts(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def Points(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Points
        DSS property index: 2

        One way to enter the points in a curve. Enter x and y values as one array in the order [x1, y1, x2, y2, ...]. For example:

        Points=[1,100 2,200 3, 300] 

        Values separated by commas or white space. Zero fills arrays if insufficient number of values.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 2)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Points.setter
    def Points(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def Yarray(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Yarray
        DSS property index: 3

        Alternate way to enter Y values. Enter an array of Y values corresponding to the X values.  You can also use the syntax: 
        Yarray = (file=filename)     !for text file one value per line
        Yarray = (dblfile=filename)  !for packed file of doubles
        Yarray = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts to a smaller value if the  number of values in the files are fewer.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Yarray.setter
    def Yarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def Xarray(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Xarray
        DSS property index: 4

        Alternate way to enter X values. Enter an array of X values corresponding to the Y values.  You can also use the syntax: 
        Xarray = (file=filename)     !for text file one value per line
        Xarray = (dblfile=filename)  !for packed file of doubles
        Xarray = (sngfile=filename)  !for packed file of singles 

        Note: this property will reset Npts to a smaller value if the  number of values in the files are fewer.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Xarray.setter
    def Xarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def csvfile(self) -> List[str]:
        """
        DSS property name: csvfile
        DSS property index: 5

        Switch input of  X-Y curve data to a CSV file containing X, Y points one per line. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 5) 

    @csvfile.setter
    def csvfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 5, value)

    @property
    def sngfile(self) -> List[str]:
        """
        DSS property name: sngfile
        DSS property index: 6

        Switch input of  X-Y curve data to a binary file of SINGLES containing X, Y points packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6) 

    @sngfile.setter
    def sngfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 6, value)

    @property
    def dblfile(self) -> List[str]:
        """
        DSS property name: dblfile
        DSS property index: 7

        Switch input of  X-Y  curve data to a binary file of DOUBLES containing X, Y points packed one after another. NOTE: This action may reset the number of points to a lower value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7) 

    @dblfile.setter
    def dblfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 7, value)

    @property
    def x(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: x
        DSS property index: 8

        Enter a value and then retrieve the interpolated Y value from the Y property. On input shifted then scaled to original curve. Scaled then shifted on output.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @x.setter
    def x(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def y(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: y
        DSS property index: 9

        Enter a value and then retrieve the interpolated X value from the X property. On input shifted then scaled to original curve. Scaled then shifted on output.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @y.setter
    def y(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def Xshift(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xshift
        DSS property index: 10

        Shift X property values (in/out) by this amount of offset. Default = 0. Does not change original definition of arrays.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @Xshift.setter
    def Xshift(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def Yshift(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Yshift
        DSS property index: 11

        Shift Y property values (in/out) by this amount of offset. Default = 0. Does not change original definition of arrays.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @Yshift.setter
    def Yshift(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def Xscale(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xscale
        DSS property index: 12

        Scale X property values (in/out) by this factor. Default = 1.0. Does not change original definition of arrays.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @Xscale.setter
    def Xscale(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def Yscale(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Yscale
        DSS property index: 13

        Scale Y property values (in/out) by this factor. Default = 1.0. Does not change original definition of arrays.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @Yscale.setter
    def Yscale(self, value):
        self._set_batch_float64_array(13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(14, value)

class GrowthShapeBatch(DSSBatch):
    _cls_name = 'GrowthShape'
    _obj_cls = GrowthShape
    _cls_idx = 6


    @property
    def npts(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: npts
        DSS property index: 1

        Number of points to expect in subsequent vector.
        """
        return BatchInt32ArrayProxy(self, 1)

    @npts.setter
    def npts(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def year(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: year
        DSS property index: 2

        Array of year values, or a text file spec, corresponding to the multipliers. Enter only those years where the growth changes. May be any integer sequence -- just so it is consistent. See help on Mult.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 2)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @year.setter
    def year(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def mult(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: mult
        DSS property index: 3

        Array of growth multiplier values, or a text file spec, corresponding to the year values. Enter the multiplier by which you would multiply the previous year's load to get the present year's.

        Examples:

          Year = [1, 2, 5]   Mult=[1.05, 1.025, 1.02].
          Year= (File=years.txt) Mult= (file=mults.txt).

        Text files contain one value per line.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @mult.setter
    def mult(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def csvfile(self) -> List[str]:
        """
        DSS property name: csvfile
        DSS property index: 4

        Switch input of growth curve data to a csv file containing (year, mult) points, one per line.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 4) 

    @csvfile.setter
    def csvfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 4, value)

    @property
    def sngfile(self) -> List[str]:
        """
        DSS property name: sngfile
        DSS property index: 5

        Switch input of growth curve data to a binary file of singles containing (year, mult) points, packed one after another.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 5) 

    @sngfile.setter
    def sngfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 5, value)

    @property
    def dblfile(self) -> List[str]:
        """
        DSS property name: dblfile
        DSS property index: 6

        Switch input of growth curve data to a binary file of doubles containing (year, mult) points, packed one after another.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6) 

    @dblfile.setter
    def dblfile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 6, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 7

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(7, value)

class TCC_CurveBatch(DSSBatch):
    _cls_name = 'TCC_Curve'
    _obj_cls = TCC_Curve
    _cls_idx = 7


    @property
    def npts(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: npts
        DSS property index: 1

        Number of points to expect in time-current arrays.
        """
        return BatchInt32ArrayProxy(self, 1)

    @npts.setter
    def npts(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def C_array(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: C_array
        DSS property index: 2

        Array of current (or voltage) values corresponding to time values (see help on T_Array).
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 2)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @C_array.setter
    def C_array(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def T_array(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: T_array
        DSS property index: 3

        Array of time values in sec. Typical array syntax: 
        t_array = (1, 2, 3, 4, ...)

        Can also substitute a file designation: 
        t_array =  (file=filename)

        The specified file has one value per line.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @T_array.setter
    def T_array(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 4

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(4, value)

class SpectrumBatch(DSSBatch):
    _cls_name = 'Spectrum'
    _obj_cls = Spectrum
    _cls_idx = 8


    @property
    def NumHarm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: NumHarm
        DSS property index: 1

        Number of frequencies in this spectrum. (See CSVFile)
        """
        return BatchInt32ArrayProxy(self, 1)

    @NumHarm.setter
    def NumHarm(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def harmonic(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: harmonic
        DSS property index: 2

        Array of harmonic values. You can also use the syntax
        harmonic = (file=filename)     !for text file one value per line
        harmonic = (dblfile=filename)  !for packed file of doubles
        harmonic = (sngfile=filename)  !for packed file of singles 
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 2)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @harmonic.setter
    def harmonic(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(2, value)

    @property
    def pctmag(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: %mag
        DSS property index: 3

        Array of magnitude values, assumed to be in PERCENT. You can also use the syntax
        %mag = (file=filename)     !for text file one value per line
        %mag = (dblfile=filename)  !for packed file of doubles
        %mag = (sngfile=filename)  !for packed file of singles 
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @pctmag.setter
    def pctmag(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def angle(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: angle
        DSS property index: 4

        Array of phase angle values, degrees.You can also use the syntax
        angle = (file=filename)     !for text file one value per line
        angle = (dblfile=filename)  !for packed file of doubles
        angle = (sngfile=filename)  !for packed file of singles 
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @angle.setter
    def angle(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def CSVFile(self) -> List[str]:
        """
        DSS property name: CSVFile
        DSS property index: 5

        File of spectrum points with (harmonic, magnitude-percent, angle-degrees) values, one set of 3 per line, in CSV format. If fewer than NUMHARM frequencies found in the file, NUMHARM is set to the smaller value.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 5) 

    @CSVFile.setter
    def CSVFile(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 5, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 6

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(6, value)

class WireDataBatch(DSSBatch):
    _cls_name = 'WireData'
    _obj_cls = WireData
    _cls_idx = 9


    @property
    def Rdc(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rdc
        DSS property index: 1

        dc Resistance, ohms per unit length (see Runits). Defaults to Rac/1.02 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 1)

    @Rdc.setter
    def Rdc(self, value):
        self._set_batch_float64_array(1, value)

    @property
    def Rac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rac
        DSS property index: 2

        Resistance at 60 Hz per unit length. Defaults to 1.02*Rdc if not specified.
        """
        return BatchFloat64ArrayProxy(self, 2)

    @Rac.setter
    def Rac(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def Runits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Runits
        DSS property index: 3

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 3)

    @Runits.setter
    def Runits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(3, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(3, value)

    @property
    def Runits_str(self) -> str:
        """
        DSS property name: Runits
        DSS property index: 3

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(3)

    @Runits_str.setter
    def Runits_str(self, value: AnyStr):
        self.Runits = value

    @property
    def GMRac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GMRac
        DSS property index: 4

        GMR at 60 Hz. Defaults to .7788*radius if not specified.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @GMRac.setter
    def GMRac(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def GMRunits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: GMRunits
        DSS property index: 5

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 5)

    @GMRunits.setter
    def GMRunits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(5, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(5, value)

    @property
    def GMRunits_str(self) -> str:
        """
        DSS property name: GMRunits
        DSS property index: 5

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(5)

    @GMRunits_str.setter
    def GMRunits_str(self, value: AnyStr):
        self.GMRunits = value

    @property
    def radius(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: radius
        DSS property index: 6

        Outside radius of conductor. Defaults to GMR/0.7788 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @radius.setter
    def radius(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def radunits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: radunits
        DSS property index: 7

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 7)

    @radunits.setter
    def radunits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(7, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(7, value)

    @property
    def radunits_str(self) -> str:
        """
        DSS property name: radunits
        DSS property index: 7

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(7)

    @radunits_str.setter
    def radunits_str(self, value: AnyStr):
        self.radunits = value

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 8

        Normal ampacity, amperes. Defaults to Emergency amps/1.5 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 9

        Emergency ampacity, amperes. Defaults to 1.5 * Normal Amps if not specified.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def diam(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: diam
        DSS property index: 10

        Diameter; Alternative method for entering radius.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @diam.setter
    def diam(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 11

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return BatchInt32ArrayProxy(self, 11)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(11, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 12

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 12)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(12, value)

    @property
    def Capradius(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Capradius
        DSS property index: 13

        Equivalent conductor radius for capacitance calcs. Specify this for bundled conductors. Defaults to same value as radius. Define Diam or Radius property first.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @Capradius.setter
    def Capradius(self, value):
        self._set_batch_float64_array(13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(14, value)

class CNDataBatch(DSSBatch):
    _cls_name = 'CNData'
    _obj_cls = CNData
    _cls_idx = 10


    @property
    def k(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: k
        DSS property index: 1

        Number of concentric neutral strands; default is 2
        """
        return BatchInt32ArrayProxy(self, 1)

    @k.setter
    def k(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def DiaStrand(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DiaStrand
        DSS property index: 2

        Diameter of a concentric neutral strand; same units as core conductor radius; no default.
        """
        return BatchFloat64ArrayProxy(self, 2)

    @DiaStrand.setter
    def DiaStrand(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def GmrStrand(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GmrStrand
        DSS property index: 3

        Geometric mean radius of a concentric neutral strand; same units as core conductor GMR; defaults to 0.7788 * CN strand radius.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @GmrStrand.setter
    def GmrStrand(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def Rstrand(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rstrand
        DSS property index: 4

        AC resistance of a concentric neutral strand; same units as core conductor resistance; no default.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @Rstrand.setter
    def Rstrand(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def EpsR(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: EpsR
        DSS property index: 5

        Insulation layer relative permittivity; default is 2.3.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @EpsR.setter
    def EpsR(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def InsLayer(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: InsLayer
        DSS property index: 6

        Insulation layer thickness; same units as radius; no default. With DiaIns, establishes inner radius for capacitance calculation.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @InsLayer.setter
    def InsLayer(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def DiaIns(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DiaIns
        DSS property index: 7

        Diameter over insulation layer; same units as radius; no default. Establishes outer radius for capacitance calculation.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @DiaIns.setter
    def DiaIns(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def DiaCable(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DiaCable
        DSS property index: 8

        Diameter over cable; same units as radius; no default.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @DiaCable.setter
    def DiaCable(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def Rdc(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rdc
        DSS property index: 9

        dc Resistance, ohms per unit length (see Runits). Defaults to Rac/1.02 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @Rdc.setter
    def Rdc(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def Rac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rac
        DSS property index: 10

        Resistance at 60 Hz per unit length. Defaults to 1.02*Rdc if not specified.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @Rac.setter
    def Rac(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def Runits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Runits
        DSS property index: 11

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 11)

    @Runits.setter
    def Runits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(11, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(11, value)

    @property
    def Runits_str(self) -> str:
        """
        DSS property name: Runits
        DSS property index: 11

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(11)

    @Runits_str.setter
    def Runits_str(self, value: AnyStr):
        self.Runits = value

    @property
    def GMRac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GMRac
        DSS property index: 12

        GMR at 60 Hz. Defaults to .7788*radius if not specified.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @GMRac.setter
    def GMRac(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def GMRunits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: GMRunits
        DSS property index: 13

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 13)

    @GMRunits.setter
    def GMRunits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(13, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(13, value)

    @property
    def GMRunits_str(self) -> str:
        """
        DSS property name: GMRunits
        DSS property index: 13

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(13)

    @GMRunits_str.setter
    def GMRunits_str(self, value: AnyStr):
        self.GMRunits = value

    @property
    def radius(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: radius
        DSS property index: 14

        Outside radius of conductor. Defaults to GMR/0.7788 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @radius.setter
    def radius(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def radunits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: radunits
        DSS property index: 15

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 15)

    @radunits.setter
    def radunits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(15, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(15, value)

    @property
    def radunits_str(self) -> str:
        """
        DSS property name: radunits
        DSS property index: 15

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(15)

    @radunits_str.setter
    def radunits_str(self, value: AnyStr):
        self.radunits = value

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 16

        Normal ampacity, amperes. Defaults to Emergency amps/1.5 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 17

        Emergency ampacity, amperes. Defaults to 1.5 * Normal Amps if not specified.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def diam(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: diam
        DSS property index: 18

        Diameter; Alternative method for entering radius.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @diam.setter
    def diam(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 19

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return BatchInt32ArrayProxy(self, 19)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(19, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 20

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 20)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(20, value)

    @property
    def Capradius(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Capradius
        DSS property index: 21

        Equivalent conductor radius for capacitance calcs. Specify this for bundled conductors. Defaults to same value as radius. Define Diam or Radius property first.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @Capradius.setter
    def Capradius(self, value):
        self._set_batch_float64_array(21, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 22

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(22, value)

class TSDataBatch(DSSBatch):
    _cls_name = 'TSData'
    _obj_cls = TSData
    _cls_idx = 11


    @property
    def DiaShield(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DiaShield
        DSS property index: 1

        Diameter over tape shield; same units as radius; no default.
        """
        return BatchFloat64ArrayProxy(self, 1)

    @DiaShield.setter
    def DiaShield(self, value):
        self._set_batch_float64_array(1, value)

    @property
    def TapeLayer(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TapeLayer
        DSS property index: 2

        Tape shield thickness; same units as radius; no default.
        """
        return BatchFloat64ArrayProxy(self, 2)

    @TapeLayer.setter
    def TapeLayer(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def TapeLap(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TapeLap
        DSS property index: 3

        Tape Lap in percent; default 20.0
        """
        return BatchFloat64ArrayProxy(self, 3)

    @TapeLap.setter
    def TapeLap(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def EpsR(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: EpsR
        DSS property index: 4

        Insulation layer relative permittivity; default is 2.3.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @EpsR.setter
    def EpsR(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def InsLayer(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: InsLayer
        DSS property index: 5

        Insulation layer thickness; same units as radius; no default. With DiaIns, establishes inner radius for capacitance calculation.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @InsLayer.setter
    def InsLayer(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def DiaIns(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DiaIns
        DSS property index: 6

        Diameter over insulation layer; same units as radius; no default. Establishes outer radius for capacitance calculation.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @DiaIns.setter
    def DiaIns(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def DiaCable(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DiaCable
        DSS property index: 7

        Diameter over cable; same units as radius; no default.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @DiaCable.setter
    def DiaCable(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def Rdc(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rdc
        DSS property index: 8

        dc Resistance, ohms per unit length (see Runits). Defaults to Rac/1.02 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @Rdc.setter
    def Rdc(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def Rac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rac
        DSS property index: 9

        Resistance at 60 Hz per unit length. Defaults to 1.02*Rdc if not specified.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @Rac.setter
    def Rac(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def Runits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Runits
        DSS property index: 10

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 10)

    @Runits.setter
    def Runits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(10, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(10, value)

    @property
    def Runits_str(self) -> str:
        """
        DSS property name: Runits
        DSS property index: 10

        Length units for resistance: ohms per {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(10)

    @Runits_str.setter
    def Runits_str(self, value: AnyStr):
        self.Runits = value

    @property
    def GMRac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GMRac
        DSS property index: 11

        GMR at 60 Hz. Defaults to .7788*radius if not specified.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @GMRac.setter
    def GMRac(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def GMRunits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: GMRunits
        DSS property index: 12

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 12)

    @GMRunits.setter
    def GMRunits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(12, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(12, value)

    @property
    def GMRunits_str(self) -> str:
        """
        DSS property name: GMRunits
        DSS property index: 12

        Units for GMR: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(12)

    @GMRunits_str.setter
    def GMRunits_str(self, value: AnyStr):
        self.GMRunits = value

    @property
    def radius(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: radius
        DSS property index: 13

        Outside radius of conductor. Defaults to GMR/0.7788 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @radius.setter
    def radius(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def radunits(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: radunits
        DSS property index: 14

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return BatchInt32ArrayProxy(self, 14)

    @radunits.setter
    def radunits(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(14, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(14, value)

    @property
    def radunits_str(self) -> str:
        """
        DSS property name: radunits
        DSS property index: 14

        Units for outside radius: {mi|kft|km|m|Ft|in|cm|mm} Default=none.
        """
        return self._get_prop_string(14)

    @radunits_str.setter
    def radunits_str(self, value: AnyStr):
        self.radunits = value

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 15

        Normal ampacity, amperes. Defaults to Emergency amps/1.5 if not specified.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 16

        Emergency ampacity, amperes. Defaults to 1.5 * Normal Amps if not specified.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def diam(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: diam
        DSS property index: 17

        Diameter; Alternative method for entering radius.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @diam.setter
    def diam(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 18

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return BatchInt32ArrayProxy(self, 18)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(18, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 19

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 19)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(19, value)

    @property
    def Capradius(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Capradius
        DSS property index: 20

        Equivalent conductor radius for capacitance calcs. Specify this for bundled conductors. Defaults to same value as radius. Define Diam or Radius property first.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @Capradius.setter
    def Capradius(self, value):
        self._set_batch_float64_array(20, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 21

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(21, value)

class LineSpacingBatch(DSSBatch):
    _cls_name = 'LineSpacing'
    _obj_cls = LineSpacing
    _cls_idx = 12


    @property
    def nconds(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: nconds
        DSS property index: 1

        Number of wires in this geometry. Default is 3. Triggers memory allocations. Define first!
        """
        return BatchInt32ArrayProxy(self, 1)

    @nconds.setter
    def nconds(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def nphases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: nphases
        DSS property index: 2

        Number of retained phase conductors. If less than the number of wires, list the retained phase coordinates first.
        """
        return BatchInt32ArrayProxy(self, 2)

    @nphases.setter
    def nphases(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def x(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: x
        DSS property index: 3

        Array of wire X coordinates.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 3)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @x.setter
    def x(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(3, value)

    @property
    def h(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: h
        DSS property index: 4

        Array of wire Heights.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @h.setter
    def h(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def units(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: units
        DSS property index: 5

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return BatchInt32ArrayProxy(self, 5)

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(5, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(5, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 5

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return self._get_prop_string(5)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 6

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(6, value)

class LineGeometryBatch(DSSBatch):
    _cls_name = 'LineGeometry'
    _obj_cls = LineGeometry
    _cls_idx = 13


    @property
    def nconds(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: nconds
        DSS property index: 1

        Number of conductors in this geometry. Default is 3. Triggers memory allocations. Define first!
        """
        return BatchInt32ArrayProxy(self, 1)

    @nconds.setter
    def nconds(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def nphases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: nphases
        DSS property index: 2

        Number of phases. Default =3; All other conductors are considered neutrals and might be reduced out.
        """
        return BatchInt32ArrayProxy(self, 2)

    @nphases.setter
    def nphases(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def cond(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: cond
        DSS property index: 3

        Set this = number of the conductor you wish to define. Default is 1.
        """
        return BatchInt32ArrayProxy(self, 3)

    @cond.setter
    def cond(self, value):
        self._set_batch_int32_array(3, value)

    @property
    def wire(self) -> List[List[str]]:
        """
        DSS property name: wire
        DSS property index: 4

        Code from WireData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Overhead Line parameter calculation,
        Unless Tape Shield cable previously assigned to phases, and this wire is a neutral.
        """
        return self._get_string_ll(4)

    @wire.setter
    def wire(self, value: Union[List[Union[AnyStr, WireData]], List[List[Union[AnyStr, WireData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 4, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(4, value)

    @property
    def wire_obj(self) -> List[List[WireData]]:
        """
        DSS property name: wire
        DSS property index: 4

        Code from WireData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Overhead Line parameter calculation,
        Unless Tape Shield cable previously assigned to phases, and this wire is a neutral.
        """
        return self._get_batch_obj_array(4, WireData)

    @wire_obj.setter
    def wire_obj(self, value: Union[List[WireData], List[List[WireData]]]):
        self._set_batch_obj_array(4, value)

    @property
    def x(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: x
        DSS property index: 5

        x coordinate.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 5)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @x.setter
    def x(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(5, value)

    @property
    def h(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: h
        DSS property index: 6

        Height of conductor.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 6)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @h.setter
    def h(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def units(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: units
        DSS property index: 7

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return BatchInt32ArrayProxy(self, 7)

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(7, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(7, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 7

        Units for x and h: {mi|kft|km|m|Ft|in|cm } Initial default is "ft", but defaults to last unit defined
        """
        return self._get_prop_string(7)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 8

        Normal ampacity, amperes for the line. Defaults to first conductor if not specified.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 9

        Emergency ampacity, amperes. Defaults to first conductor if not specified.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def reduce(self) -> List[bool]:
        """
        DSS property name: reduce
        DSS property index: 10

        {Yes | No} Default = no. Reduce to Nphases (Kron Reduction). Reduce out neutrals.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 10)
        ]
    @reduce.setter
    def reduce(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 10, value)

    @property
    def spacing(self) -> List[str]:
        """
        DSS property name: spacing
        DSS property index: 11

        Reference to a LineSpacing for use in a line constants calculation.
        Alternative to x, h, and units. MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry.
        Must be used in conjunction with the Wires property.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @spacing.setter
    def spacing(self, value: Union[AnyStr, LineSpacing]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(11, value)
            return

        self._set_batch_string(11, value)

    @property
    def spacing_obj(self) -> List[str]:
        """
        DSS property name: spacing
        DSS property index: 11

        Reference to a LineSpacing for use in a line constants calculation.
        Alternative to x, h, and units. MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry.
        Must be used in conjunction with the Wires property.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @spacing_obj.setter
    def spacing_obj(self, value: LineSpacing):
        self._set_batch_string(11, value)

    @property
    def wires(self) -> List[List[str]]:
        """
        DSS property name: wires
        DSS property index: 12

        Array of WireData names for use in a line constants calculation.
        Alternative to individual wire inputs. ALL MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry,
        unless TSData or CNData were previously assigned to phases, and these wires are neutrals.
        Must be used in conjunction with the Spacing property.
        """
        return self._get_string_ll(12)

    @wires.setter
    def wires(self, value: Union[List[Union[AnyStr, WireData]], List[List[Union[AnyStr, WireData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 12, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(12, value)

    @property
    def wires_obj(self) -> List[List[WireData]]:
        """
        DSS property name: wires
        DSS property index: 12

        Array of WireData names for use in a line constants calculation.
        Alternative to individual wire inputs. ALL MUST BE PREVIOUSLY DEFINED.
        Must match "nconds" as previously defined for this geometry,
        unless TSData or CNData were previously assigned to phases, and these wires are neutrals.
        Must be used in conjunction with the Spacing property.
        """
        return self._get_batch_obj_array(12, WireData)

    @wires_obj.setter
    def wires_obj(self, value: Union[List[WireData], List[List[WireData]]]):
        self._set_batch_obj_array(12, value)

    @property
    def cncable(self) -> List[List[str]]:
        """
        DSS property name: cncable
        DSS property index: 13

        Code from CNData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Concentric Neutral cable parameter calculation.
        """
        return self._get_string_ll(13)

    @cncable.setter
    def cncable(self, value: Union[List[Union[AnyStr, CNData]], List[List[Union[AnyStr, CNData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 13, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(13, value)

    @property
    def cncable_obj(self) -> List[List[CNData]]:
        """
        DSS property name: cncable
        DSS property index: 13

        Code from CNData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Concentric Neutral cable parameter calculation.
        """
        return self._get_batch_obj_array(13, CNData)

    @cncable_obj.setter
    def cncable_obj(self, value: Union[List[CNData], List[List[CNData]]]):
        self._set_batch_obj_array(13, value)

    @property
    def tscable(self) -> List[List[str]]:
        """
        DSS property name: tscable
        DSS property index: 14

        Code from TSData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Tape Shield cable parameter calculation.
        """
        return self._get_string_ll(14)

    @tscable.setter
    def tscable(self, value: Union[List[Union[AnyStr, TSData]], List[List[Union[AnyStr, TSData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 14, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(14, value)

    @property
    def tscable_obj(self) -> List[List[TSData]]:
        """
        DSS property name: tscable
        DSS property index: 14

        Code from TSData. MUST BE PREVIOUSLY DEFINED. no default.
        Specifies use of Tape Shield cable parameter calculation.
        """
        return self._get_batch_obj_array(14, TSData)

    @tscable_obj.setter
    def tscable_obj(self, value: Union[List[TSData], List[List[TSData]]]):
        self._set_batch_obj_array(14, value)

    @property
    def cncables(self) -> List[List[str]]:
        """
        DSS property name: cncables
        DSS property index: 15

        Array of CNData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_string_ll(15)

    @cncables.setter
    def cncables(self, value: Union[List[Union[AnyStr, CNData]], List[List[Union[AnyStr, CNData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 15, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(15, value)

    @property
    def cncables_obj(self) -> List[List[CNData]]:
        """
        DSS property name: cncables
        DSS property index: 15

        Array of CNData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_batch_obj_array(15, CNData)

    @cncables_obj.setter
    def cncables_obj(self, value: Union[List[CNData], List[List[CNData]]]):
        self._set_batch_obj_array(15, value)

    @property
    def tscables(self) -> List[List[str]]:
        """
        DSS property name: tscables
        DSS property index: 16

        Array of TSData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_string_ll(16)

    @tscables.setter
    def tscables(self, value: Union[List[Union[AnyStr, TSData]], List[List[Union[AnyStr, TSData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 16, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(16, value)

    @property
    def tscables_obj(self) -> List[List[TSData]]:
        """
        DSS property name: tscables
        DSS property index: 16

        Array of TSData names for cable parameter calculation.
        All must be previously defined, and match "nphases" for this geometry.
        You can later define "nconds-nphases" wires for bare neutral conductors.
        """
        return self._get_batch_obj_array(16, TSData)

    @tscables_obj.setter
    def tscables_obj(self, value: Union[List[TSData], List[List[TSData]]]):
        self._set_batch_obj_array(16, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 17

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property. Defaults to first conductor if not specified.
        """
        return BatchInt32ArrayProxy(self, 17)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(17, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 18

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.Defaults to first conductor if not specified.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 18)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(18, value)

    @property
    def linetype(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: LineType
        DSS property index: 19

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return BatchInt32ArrayProxy(self, 19)

    @linetype.setter
    def linetype(self, value: Union[AnyStr, int, LineType, List[AnyStr], List[Union[int, LineType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(19, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(19, value)

    @property
    def linetype_str(self) -> str:
        """
        DSS property name: LineType
        DSS property index: 19

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return self._get_prop_string(19)

    @linetype_str.setter
    def linetype_str(self, value: AnyStr):
        self.linetype = value

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 20

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(20, value)

class XfmrCodeBatch(DSSBatch):
    _cls_name = 'XfmrCode'
    _obj_cls = XfmrCode
    _cls_idx = 14


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of phases this transformer. Default is 3.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def windings(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: windings
        DSS property index: 2

        Number of windings, this transformers. (Also is the number of terminals) Default is 2. This property triggers memory allocation for the Transformer and will cause other properties to revert to default values.
        """
        return BatchInt32ArrayProxy(self, 2)

    @windings.setter
    def windings(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def wdg(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: wdg
        DSS property index: 3

        Set this = to the number of the winding you wish to define.  Then set the values for this winding.  Repeat for each winding.  Alternatively, use the array collections (buses, kvas, etc.) to define the windings.  Note: reactances are BETWEEN pairs of windings; they are not the property of a single winding.
        """
        return BatchInt32ArrayProxy(self, 3)

    @wdg.setter
    def wdg(self, value):
        self._set_batch_int32_array(3, value)

    @property
    def conn(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: conn
        DSS property index: 4

        Connection of this winding. Default is "wye" with the neutral solidly grounded.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @conn.setter
    def conn(self, value: Union[List[Union[int,Connection]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 4, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(4, value)

    @property
    def conn_str(self) -> List[List[str]]:
        """
        DSS property name: conn
        DSS property index: 4

        Connection of this winding. Default is "wye" with the neutral solidly grounded.
        """
        return self._get_string_ll(4)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kV(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kV
        DSS property index: 5

        For 2-or 3-phase, enter phase-phase kV rating.  Otherwise, kV rating of the actual winding
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 5)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kV.setter
    def kV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(5, value)

    @property
    def kVA(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVA
        DSS property index: 6

        Base kVA rating of the winding. Side effect: forces change of max normal and emerg kva ratings.If 2-winding transformer, forces other winding to same value. When winding 1 is defined, all other windings are defaulted to the same rating and the first two winding resistances are defaulted to the %loadloss value.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 6)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVA.setter
    def kVA(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def tap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: tap
        DSS property index: 7

        Per unit tap that this winding is normally on.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @tap.setter
    def tap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def pctR(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: %R
        DSS property index: 8

        Percent resistance this winding.  (half of total for a 2-winding).
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 8)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @pctR.setter
    def pctR(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def Rneut(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Rneut
        DSS property index: 9

        Default = -1. Neutral resistance of wye (star)-connected winding in actual ohms.If entered as a negative value, the neutral is assumed to be open, or floating.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 9)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Rneut.setter
    def Rneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def Xneut(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Xneut
        DSS property index: 10

        Neutral reactance of wye(star)-connected winding in actual ohms.  May be + or -.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 10)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Xneut.setter
    def Xneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def conns(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: conns
        DSS property index: 11

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 11)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @conns.setter
    def conns(self, value: Union[List[Union[int,Connection]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 11, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(11, value)

    @property
    def conns_str(self) -> List[List[str]]:
        """
        DSS property name: conns
        DSS property index: 11

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return self._get_string_ll(11)

    @conns_str.setter
    def conns_str(self, value: AnyStr):
        self.conns = value

    @property
    def kVs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVs
        DSS property index: 12

        Use this to specify the kV ratings of all windings at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" 
        ~ conns=(delta, wye)
        ~ kvs=(115, 12.47)

        See kV= property for voltage rules.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 12)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(12, value)

    @property
    def kVAs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVAs
        DSS property index: 13

        Use this to specify the kVA ratings of all windings at once using an array.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 13)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVAs.setter
    def kVAs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(13, value)

    @property
    def taps(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: taps
        DSS property index: 14

        Use this to specify the normal p.u. tap of all windings at once using an array.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 14)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @taps.setter
    def taps(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def Xhl(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xhl
        DSS property index: 15

        Use this to specify the percent reactance, H-L (winding 1 to winding 2).  Use for 2- or 3-winding transformers. On the kva base of winding 1.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @Xhl.setter
    def Xhl(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def Xht(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xht
        DSS property index: 16

        Use this to specify the percent reactance, H-T (winding 1 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @Xht.setter
    def Xht(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def Xlt(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xlt
        DSS property index: 17

        Use this to specify the percent reactance, L-T (winding 2 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @Xlt.setter
    def Xlt(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def Xscarray(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Xscarray
        DSS property index: 18

        Use this to specify the percent reactance between all pairs of windings as an array. All values are on the kVA base of winding 1.  The order of the values is as follows:

        (x12 13 14... 23 24.. 34 ..)  

        There will be n(n-1)/2 values, where n=number of windings.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 18)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Xscarray.setter
    def Xscarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(18, value)

    @property
    def thermal(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: thermal
        DSS property index: 19

        Thermal time constant of the transformer in hours.  Typically about 2.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @thermal.setter
    def thermal(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def n(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: n
        DSS property index: 20

        n Exponent for thermal properties in IEEE C57.  Typically 0.8.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @n.setter
    def n(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def m(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: m
        DSS property index: 21

        m Exponent for thermal properties in IEEE C57.  Typically 0.9 - 1.0
        """
        return BatchFloat64ArrayProxy(self, 21)

    @m.setter
    def m(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def flrise(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: flrise
        DSS property index: 22

        Temperature rise, deg C, for full load.  Default is 65.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @flrise.setter
    def flrise(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def hsrise(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: hsrise
        DSS property index: 23

        Hot spot temperature rise, deg C.  Default is 15.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @hsrise.setter
    def hsrise(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def pctloadloss(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %loadloss
        DSS property index: 24

        Percent load loss at full load. The %R of the High and Low windings (1 and 2) are adjusted to agree at rated kVA loading.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @pctloadloss.setter
    def pctloadloss(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def pctnoloadloss(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %noloadloss
        DSS property index: 25

        Percent no load losses at rated excitatation voltage. Default is 0. Converts to a resistance in parallel with the magnetizing impedance in each winding.
        """
        return BatchFloat64ArrayProxy(self, 25)

    @pctnoloadloss.setter
    def pctnoloadloss(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def normhkVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normhkVA
        DSS property index: 26

        Normal maximum kVA rating of H winding (winding 1).  Usually 100% - 110% ofmaximum nameplate rating, depending on load shape. Defaults to 110% of kVA rating of Winding 1.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @normhkVA.setter
    def normhkVA(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def emerghkVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emerghkVA
        DSS property index: 27

        Emergency (contingency)  kVA rating of H winding (winding 1).  Usually 140% - 150% ofmaximum nameplate rating, depending on load shape. Defaults to 150% of kVA rating of Winding 1.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @emerghkVA.setter
    def emerghkVA(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def MaxTap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: MaxTap
        DSS property index: 28

        Max per unit tap for the active winding.  Default is 1.10
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 28)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @MaxTap.setter
    def MaxTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(28, value)

    @property
    def MinTap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: MinTap
        DSS property index: 29

        Min per unit tap for the active winding.  Default is 0.90
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 29)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @MinTap.setter
    def MinTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(29, value)

    @property
    def NumTaps(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: NumTaps
        DSS property index: 30

        Total number of taps between min and max tap.  Default is 32.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 30)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @NumTaps.setter
    def NumTaps(self, value: npt.NDArray[np.int32]): #TODO: list of arrays, matrix
        self._set_batch_int32_array(30, value)

    @property
    def pctimag(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %imag
        DSS property index: 31

        Percent magnetizing current. Default=0.0. Magnetizing branch is in parallel with windings in each phase. Also, see "ppm_antifloat".
        """
        return BatchFloat64ArrayProxy(self, 31)

    @pctimag.setter
    def pctimag(self, value):
        self._set_batch_float64_array(31, value)

    @property
    def ppm_antifloat(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ppm_antifloat
        DSS property index: 32

        Default=1 ppm.  Parts per million of transformer winding VA rating connected to ground to protect against accidentally floating a winding without a reference. If positive then the effect is adding a very large reactance to ground.  If negative, then a capacitor.
        """
        return BatchFloat64ArrayProxy(self, 32)

    @ppm_antifloat.setter
    def ppm_antifloat(self, value):
        self._set_batch_float64_array(32, value)

    @property
    def pctRs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: %Rs
        DSS property index: 33

        Use this property to specify all the winding %resistances using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ %Rs=(0.2  0.3)
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 33)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @pctRs.setter
    def pctRs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(33, value)

    @property
    def X12(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X12
        DSS property index: 34

        Alternative to XHL for specifying the percent reactance from winding 1 to winding 2.  Use for 2- or 3-winding transformers. Percent on the kVA base of winding 1. 
        """
        return BatchFloat64ArrayProxy(self, 34)

    @X12.setter
    def X12(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def X13(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X13
        DSS property index: 35

        Alternative to XHT for specifying the percent reactance from winding 1 to winding 3.  Use for 3-winding transformers only. Percent on the kVA base of winding 1. 
        """
        return BatchFloat64ArrayProxy(self, 35)

    @X13.setter
    def X13(self, value):
        self._set_batch_float64_array(35, value)

    @property
    def X23(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X23
        DSS property index: 36

        Alternative to XLT for specifying the percent reactance from winding 2 to winding 3.Use for 3-winding transformers only. Percent on the kVA base of winding 1.  
        """
        return BatchFloat64ArrayProxy(self, 36)

    @X23.setter
    def X23(self, value):
        self._set_batch_float64_array(36, value)

    @property
    def RdcOhms(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: RdcOhms
        DSS property index: 37

        Winding dc resistance in OHMS. Useful for GIC analysis. From transformer test report. Defaults to 85% of %R property
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 37)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @RdcOhms.setter
    def RdcOhms(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 38

        Defines the number of ratings to be defined for the transfomer, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return BatchInt32ArrayProxy(self, 38)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(38, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 39

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in transformers.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 39)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(39, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 40

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(40, value)

class LineBatch(DSSBatch):
    _cls_name = 'Line'
    _obj_cls = Line
    _cls_idx = 15


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which first terminal is connected.
        Example:
        bus1=busname   (assumes all terminals connected in normal phase order)
        bus1=busname.3.1.2.0 (specify terminal to node connections explicitly)
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def bus2(self) -> List[str]:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of bus to which 2nd terminal is connected.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus2.setter
    def bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def linecode(self) -> List[str]:
        """
        DSS property name: linecode
        DSS property index: 3

        Name of linecode object describing line impedances.
        If you use a line code, you do not need to specify the impedances here. The line code must have been PREVIOUSLY defined. The values specified last will prevail over those specified earlier (left-to-right sequence of properties).  You can subsequently change the number of phases if symmetrical component quantities are specified.If no line code or impedance data are specified, the line object defaults to 336 MCM ACSR on 4 ft spacing.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @linecode.setter
    def linecode(self, value: Union[AnyStr, LineCode]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(3, value)
            return

        self._set_batch_string(3, value)

    @property
    def linecode_obj(self) -> List[str]:
        """
        DSS property name: linecode
        DSS property index: 3

        Name of linecode object describing line impedances.
        If you use a line code, you do not need to specify the impedances here. The line code must have been PREVIOUSLY defined. The values specified last will prevail over those specified earlier (left-to-right sequence of properties).  You can subsequently change the number of phases if symmetrical component quantities are specified.If no line code or impedance data are specified, the line object defaults to 336 MCM ACSR on 4 ft spacing.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @linecode_obj.setter
    def linecode_obj(self, value: LineCode):
        self._set_batch_string(3, value)

    @property
    def length(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: length
        DSS property index: 4

        Length of line. Default is 1.0. If units do not match the impedance data, specify "units" property. 
        """
        return BatchFloat64ArrayProxy(self, 4)

    @length.setter
    def length(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 5

        Number of phases, this line.
        """
        return BatchInt32ArrayProxy(self, 5)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(5, value)

    @property
    def r1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: r1
        DSS property index: 6

        Positive-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Rmatrix.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @r1.setter
    def r1(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def x1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: x1
        DSS property index: 7

        Positive-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.  See also Xmatrix
        """
        return BatchFloat64ArrayProxy(self, 7)

    @x1.setter
    def x1(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def r0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: r0
        DSS property index: 8

        Zero-sequence Resistance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @r0.setter
    def r0(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def x0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: x0
        DSS property index: 9

        Zero-sequence Reactance, ohms per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @x0.setter
    def x0(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def C1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: C1
        DSS property index: 10

        Positive-sequence capacitance, nf per unit length.  Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition. See also Cmatrix and B1.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @C1.setter
    def C1(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def C0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: C0
        DSS property index: 11

        Zero-sequence capacitance, nf per unit length. Setting any of R1, R0, X1, X0, C1, C0 forces the program to use the symmetrical component line definition.See also B0.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @C0.setter
    def C0(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def rmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: rmatrix
        DSS property index: 12

        Resistance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration. Using any of Rmatrix, Xmatrix, Cmatrix forces program to use the matrix values for line impedance definition. For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 12)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @rmatrix.setter
    def rmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(12, value)

    @property
    def xmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: xmatrix
        DSS property index: 13

        Reactance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases. May be used to specify the impedance of any line configuration. Using any of Rmatrix, Xmatrix, Cmatrix forces program to use the matrix values for line impedance definition.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 13)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @xmatrix.setter
    def xmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(13, value)

    @property
    def cmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: cmatrix
        DSS property index: 14

        Nodal Capacitance matrix, lower triangle, nf per unit length.Order of the matrix is the number of phases. May be used to specify the shunt capacitance of any line configuration. Using any of Rmatrix, Xmatrix, Cmatrix forces program to use the matrix values for line impedance definition.  For balanced line models, you may use the standard symmetrical component data definition instead.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 14)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @cmatrix.setter
    def cmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def Switch(self) -> List[bool]:
        """
        DSS property name: Switch
        DSS property index: 15

        {y/n | T/F}  Default= no/false.  Designates this line as a switch for graphics and algorithmic purposes. 
        SIDE EFFECT: Sets r1 = 1.0; x1 = 1.0; r0 = 1.0; x0 = 1.0; c1 = 1.1 ; c0 = 1.0;  length = 0.001; You must reset if you want something different.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 15)
        ]
    @Switch.setter
    def Switch(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 15, value)

    @property
    def Rg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rg
        DSS property index: 16

        Carson earth return resistance per unit length used to compute impedance values at base frequency. Default is 0.01805 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @Rg.setter
    def Rg(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def Xg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xg
        DSS property index: 17

        Carson earth return reactance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments. Default is 0.155081 = 60 Hz value in ohms per kft (matches default line impedances). This value is required for harmonic solutions if you wish to adjust the earth return impedances for frequency. If not, set both Rg and Xg = 0.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @Xg.setter
    def Xg(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def rho(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: rho
        DSS property index: 18

        Default=100 meter ohms.  Earth resitivity used to compute earth correction factor. Overrides Line geometry definition if specified.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @rho.setter
    def rho(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def geometry(self) -> List[str]:
        """
        DSS property name: geometry
        DSS property index: 19

        Geometry code for LineGeometry Object. Supercedes any previous definition of line impedance. Line constants are computed for each frequency change or rho change. CAUTION: may alter number of phases. You cannot subsequently change the number of phases unless you change how the line impedance is defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19)

    @geometry.setter
    def geometry(self, value: Union[AnyStr, LineGeometry]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(19, value)
            return

        self._set_batch_string(19, value)

    @property
    def geometry_obj(self) -> List[str]:
        """
        DSS property name: geometry
        DSS property index: 19

        Geometry code for LineGeometry Object. Supercedes any previous definition of line impedance. Line constants are computed for each frequency change or rho change. CAUTION: may alter number of phases. You cannot subsequently change the number of phases unless you change how the line impedance is defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19)

    @geometry_obj.setter
    def geometry_obj(self, value: LineGeometry):
        self._set_batch_string(19, value)

    @property
    def units(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: units
        DSS property index: 20

        Length Units = {none | mi|kft|km|m|Ft|in|cm } Default is None - assumes length units match impedance units.
        """
        return BatchInt32ArrayProxy(self, 20)

    @units.setter
    def units(self, value: Union[AnyStr, int, DimensionUnits, List[AnyStr], List[Union[int, DimensionUnits]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(20, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(20, value)

    @property
    def units_str(self) -> str:
        """
        DSS property name: units
        DSS property index: 20

        Length Units = {none | mi|kft|km|m|Ft|in|cm } Default is None - assumes length units match impedance units.
        """
        return self._get_prop_string(20)

    @units_str.setter
    def units_str(self, value: AnyStr):
        self.units = value

    @property
    def spacing(self) -> List[str]:
        """
        DSS property name: spacing
        DSS property index: 21

        Reference to a LineSpacing for use in a line constants calculation.
        Must be used in conjunction with the Wires property.
        Specify this before the wires property.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 21)

    @spacing.setter
    def spacing(self, value: Union[AnyStr, LineSpacing]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(21, value)
            return

        self._set_batch_string(21, value)

    @property
    def spacing_obj(self) -> List[str]:
        """
        DSS property name: spacing
        DSS property index: 21

        Reference to a LineSpacing for use in a line constants calculation.
        Must be used in conjunction with the Wires property.
        Specify this before the wires property.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 21)

    @spacing_obj.setter
    def spacing_obj(self, value: LineSpacing):
        self._set_batch_string(21, value)

    @property
    def wires(self) -> List[List[str]]:
        """
        DSS property name: wires
        DSS property index: 22

        Array of WireData names for use in an overhead line constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, and "ncond" wires.
        May also be used to specify bare neutrals with cables, using "ncond-nphase" wires.
        """
        return self._get_string_ll(22)

    @wires.setter
    def wires(self, value: Union[List[Union[AnyStr, WireData]], List[List[Union[AnyStr, WireData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 22, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(22, value)

    @property
    def wires_obj(self) -> List[List[WireData]]:
        """
        DSS property name: wires
        DSS property index: 22

        Array of WireData names for use in an overhead line constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, and "ncond" wires.
        May also be used to specify bare neutrals with cables, using "ncond-nphase" wires.
        """
        return self._get_batch_obj_array(22, WireData)

    @wires_obj.setter
    def wires_obj(self, value: Union[List[WireData], List[List[WireData]]]):
        self._set_batch_obj_array(22, value)

    @property
    def earthmodel(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: EarthModel
        DSS property index: 23

        One of {Carson | FullCarson | Deri}. Default is the global value established with the Set EarthModel command. See the Options Help on EarthModel option. This is used to override the global value for this line. This option applies only when the "geometry" property is used.
        """
        return BatchInt32ArrayProxy(self, 23)

    @earthmodel.setter
    def earthmodel(self, value: Union[AnyStr, int, EarthModel, List[AnyStr], List[Union[int, EarthModel]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(23, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(23, value)

    @property
    def earthmodel_str(self) -> str:
        """
        DSS property name: EarthModel
        DSS property index: 23

        One of {Carson | FullCarson | Deri}. Default is the global value established with the Set EarthModel command. See the Options Help on EarthModel option. This is used to override the global value for this line. This option applies only when the "geometry" property is used.
        """
        return self._get_prop_string(23)

    @earthmodel_str.setter
    def earthmodel_str(self, value: AnyStr):
        self.earthmodel = value

    @property
    def cncables(self) -> List[List[str]]:
        """
        DSS property name: cncables
        DSS property index: 24

        Array of CNData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" cncables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_string_ll(24)

    @cncables.setter
    def cncables(self, value: Union[List[Union[AnyStr, CNData]], List[List[Union[AnyStr, CNData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 24, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(24, value)

    @property
    def cncables_obj(self) -> List[List[CNData]]:
        """
        DSS property name: cncables
        DSS property index: 24

        Array of CNData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" cncables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_batch_obj_array(24, CNData)

    @cncables_obj.setter
    def cncables_obj(self, value: Union[List[CNData], List[List[CNData]]]):
        self._set_batch_obj_array(24, value)

    @property
    def tscables(self) -> List[List[str]]:
        """
        DSS property name: tscables
        DSS property index: 25

        Array of TSData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" tscables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_string_ll(25)

    @tscables.setter
    def tscables(self, value: Union[List[Union[AnyStr, TSData]], List[List[Union[AnyStr, TSData]]]]):
        if not len(value):
            return

        if isinstance(value[0], (bytes, str)):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 25, value_ptr, value_count)
        
            self._check_for_error()
            return

        self._set_batch_obj_array(25, value)

    @property
    def tscables_obj(self) -> List[List[TSData]]:
        """
        DSS property name: tscables
        DSS property index: 25

        Array of TSData names for use in a cable constants calculation.
        Must be used in conjunction with the Spacing property.
        Specify the Spacing first, using "nphases" tscables.
        You may later specify "nconds-nphases" wires for separate neutrals
        """
        return self._get_batch_obj_array(25, TSData)

    @tscables_obj.setter
    def tscables_obj(self, value: Union[List[TSData], List[List[TSData]]]):
        self._set_batch_obj_array(25, value)

    @property
    def B1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: B1
        DSS property index: 26

        Alternate way to specify C1. MicroS per unit length
        """
        return BatchFloat64ArrayProxy(self, 26)

    @B1.setter
    def B1(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def B0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: B0
        DSS property index: 27

        Alternate way to specify C0. MicroS per unit length
        """
        return BatchFloat64ArrayProxy(self, 27)

    @B0.setter
    def B0(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 28

        Defines the number of ratings to be defined for the wire, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return BatchInt32ArrayProxy(self, 28)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(28, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 29

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in lines.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 29)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(29, value)

    @property
    def linetype(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: LineType
        DSS property index: 30

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return BatchInt32ArrayProxy(self, 30)

    @linetype.setter
    def linetype(self, value: Union[AnyStr, int, LineType, List[AnyStr], List[Union[int, LineType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(30, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(30, value)

    @property
    def linetype_str(self) -> str:
        """
        DSS property name: LineType
        DSS property index: 30

        Code designating the type of line. 
        One of: OH, UG, UG_TS, UG_CN, SWT_LDBRK, SWT_FUSE, SWT_SECT, SWT_REC, SWT_DISC, SWT_BRK, SWT_ELBOW

        OpenDSS currently does not use this internally. For whatever purpose the user defines. Default is OH.
        """
        return self._get_prop_string(30)

    @linetype_str.setter
    def linetype_str(self, value: AnyStr):
        self.linetype = value

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 31

        Normal rated current.
        """
        return BatchFloat64ArrayProxy(self, 31)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(31, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 32

        Maximum or emerg current.
        """
        return BatchFloat64ArrayProxy(self, 32)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(32, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 33

        Failure rate PER UNIT LENGTH per year. Length must be same units as LENGTH property. Default is 0.1 fault per unit length per year.
        """
        return BatchFloat64ArrayProxy(self, 33)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(33, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 34

        Percent of failures that become permanent. Default is 20.
        """
        return BatchFloat64ArrayProxy(self, 34)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 35

        Hours to repair. Default is 3 hr.
        """
        return BatchFloat64ArrayProxy(self, 35)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(35, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 36

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 36)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(36, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 37

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 37)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 37, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 38

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(38, value)

class VsourceBatch(DSSBatch):
    _cls_name = 'Vsource'
    _obj_cls = Vsource
    _cls_idx = 16


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which the main terminal (1) is connected.
        bus1=busname
        bus1=busname.1.2.3

        The VSOURCE object is a two-terminal voltage source (thevenin equivalent). Bus2 defaults to Bus1 with all phases connected to ground (node 0) unless previously specified. This is a Yg connection. If you want something different, define the Bus2 property ezplicitly.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def basekv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basekv
        DSS property index: 2

        Base Source kV, usually phase-phase (L-L) unless you are making a positive-sequence model or 1-phase modelin which case, it will be phase-neutral (L-N) kV.
        """
        return BatchFloat64ArrayProxy(self, 2)

    @basekv.setter
    def basekv(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def pu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pu
        DSS property index: 3

        Per unit of the base voltage that the source is actually operating at.
        "pu=1.05"
        """
        return BatchFloat64ArrayProxy(self, 3)

    @pu.setter
    def pu(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def angle(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: angle
        DSS property index: 4

        Phase angle in degrees of first phase: e.g.,Angle=10.3
        """
        return BatchFloat64ArrayProxy(self, 4)

    @angle.setter
    def angle(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def frequency(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: frequency
        DSS property index: 5

        Source frequency.  Defaults to system default base frequency.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @frequency.setter
    def frequency(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 6

        Number of phases.  Defaults to 3.
        """
        return BatchInt32ArrayProxy(self, 6)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(6, value)

    @property
    def MVAsc3(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: MVAsc3
        DSS property index: 7

        MVA Short circuit, 3-phase fault. Default = 2000. Z1 is determined by squaring the base kv and dividing by this value. For single-phase source, this value is not used.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @MVAsc3.setter
    def MVAsc3(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def MVAsc1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: MVAsc1
        DSS property index: 8

        MVA Short Circuit, 1-phase fault. Default = 2100. The "single-phase impedance", Zs, is determined by squaring the base kV and dividing by this value. Then Z0 is determined by Z0 = 3Zs - 2Z1.  For 1-phase sources, Zs is used directly. Use X0R0 to define X/R ratio for 1-phase source.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @MVAsc1.setter
    def MVAsc1(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def x1r1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: x1r1
        DSS property index: 9

        Positive-sequence  X/R ratio. Default = 4.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @x1r1.setter
    def x1r1(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def x0r0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: x0r0
        DSS property index: 10

        Zero-sequence X/R ratio.Default = 3.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @x0r0.setter
    def x0r0(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def Isc3(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Isc3
        DSS property index: 11

        Alternate method of defining the source impedance. 
        3-phase short circuit current, amps.  Default is 10000.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @Isc3.setter
    def Isc3(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def Isc1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Isc1
        DSS property index: 12

        Alternate method of defining the source impedance. 
        single-phase short circuit current, amps.  Default is 10500.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @Isc1.setter
    def Isc1(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def R1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: R1
        DSS property index: 13

        Alternate method of defining the source impedance. 
        Positive-sequence resistance, ohms.  Default is 1.65.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @R1.setter
    def R1(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def X1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X1
        DSS property index: 14

        Alternate method of defining the source impedance. 
        Positive-sequence reactance, ohms.  Default is 6.6.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @X1.setter
    def X1(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def R0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: R0
        DSS property index: 15

        Alternate method of defining the source impedance. 
        Zero-sequence resistance, ohms.  Default is 1.9.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @R0.setter
    def R0(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def X0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X0
        DSS property index: 16

        Alternate method of defining the source impedance. 
        Zero-sequence reactance, ohms.  Default is 5.7.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @X0.setter
    def X0(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def scantype(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: ScanType
        DSS property index: 17

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return BatchInt32ArrayProxy(self, 17)

    @scantype.setter
    def scantype(self, value: Union[AnyStr, int, ScanType, List[AnyStr], List[Union[int, ScanType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(17, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(17, value)

    @property
    def scantype_str(self) -> str:
        """
        DSS property name: ScanType
        DSS property index: 17

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return self._get_prop_string(17)

    @scantype_str.setter
    def scantype_str(self, value: AnyStr):
        self.scantype = value

    @property
    def Sequence(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Sequence
        DSS property index: 18

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return BatchInt32ArrayProxy(self, 18)

    @Sequence.setter
    def Sequence(self, value: Union[AnyStr, int, SequenceType, List[AnyStr], List[Union[int, SequenceType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(18, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(18, value)

    @property
    def Sequence_str(self) -> str:
        """
        DSS property name: Sequence
        DSS property index: 18

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return self._get_prop_string(18)

    @Sequence_str.setter
    def Sequence_str(self, value: AnyStr):
        self.Sequence = value

    @property
    def bus2(self) -> List[str]:
        """
        DSS property name: bus2
        DSS property index: 19

        Name of bus to which 2nd terminal is connected.
        bus2=busname
        bus2=busname.1.2.3

        Default is Bus1.0.0.0 (grounded wye connection)
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19) 

    @bus2.setter
    def bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 19, value)

    @property
    def Z1(self) -> List[complex]:
        """
        DSS property name: Z1
        DSS property index: 20

        Positive-sequence equivalent source impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z1=[1, 2]  ! represents 1 + j2 

        If defined, Z1, Z2, and Z0 are used to define the impedance matrix of the VSOURCE. Z1 MUST BE DEFINED TO USE THIS OPTION FOR DEFINING THE MATRIX.

        Side Effect: Sets Z2 and Z0 to same values unless they were previously defined.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                20,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Z1.setter
    def Z1(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 20, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 20, value_ptr, value_count)

    @property
    def Z0(self) -> List[complex]:
        """
        DSS property name: Z0
        DSS property index: 21

        Zero-sequence equivalent source impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z0=[3, 4]  ! represents 3 + j4 

        Used to define the impedance matrix of the VSOURCE if Z1 is also specified. 

        Note: Z0 defaults to Z1 if it is not specifically defined. 
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                21,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Z0.setter
    def Z0(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 21, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 21, value_ptr, value_count)

    @property
    def Z2(self) -> List[complex]:
        """
        DSS property name: Z2
        DSS property index: 22

        Negative-sequence equivalent source impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z2=[1, 2]  ! represents 1 + j2 

        Used to define the impedance matrix of the VSOURCE if Z1 is also specified. 

        Note: Z2 defaults to Z1 if it is not specifically defined. If Z2 is not equal to Z1, the impedance matrix is asymmetrical.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                22,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Z2.setter
    def Z2(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 22, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 22, value_ptr, value_count)

    @property
    def puZ1(self) -> List[complex]:
        """
        DSS property name: puZ1
        DSS property index: 23

        2-element array: e.g., [1  2]. An alternate way to specify Z1. See Z1 property. Per-unit positive-sequence impedance on base of Vsource BasekV and BaseMVA.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                23,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @puZ1.setter
    def puZ1(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 23, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 23, value_ptr, value_count)

    @property
    def puZ0(self) -> List[complex]:
        """
        DSS property name: puZ0
        DSS property index: 24

        2-element array: e.g., [1  2]. An alternate way to specify Z0. See Z0 property. Per-unit zero-sequence impedance on base of Vsource BasekV and BaseMVA.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                24,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @puZ0.setter
    def puZ0(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 24, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 24, value_ptr, value_count)

    @property
    def puZ2(self) -> List[complex]:
        """
        DSS property name: puZ2
        DSS property index: 25

        2-element array: e.g., [1  2]. An alternate way to specify Z2. See Z2 property. Per-unit negative-sequence impedance on base of Vsource BasekV and BaseMVA.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                25,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @puZ2.setter
    def puZ2(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 25, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 25, value_ptr, value_count)

    @property
    def baseMVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: baseMVA
        DSS property index: 26

        Default value is 100. Base used to convert values specifiied with puZ1, puZ0, and puZ2 properties to ohms on kV base specified by BasekV property.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @baseMVA.setter
    def baseMVA(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def Yearly(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 27

        LOADSHAPE object to use for the per-unit voltage for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 27)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(27, value)
            return

        self._set_batch_string(27, value)

    @property
    def Yearly_obj(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 27

        LOADSHAPE object to use for the per-unit voltage for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 27)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_batch_string(27, value)

    @property
    def Daily(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 28

        LOADSHAPE object to use for the per-unit voltage for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 28)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(28, value)
            return

        self._set_batch_string(28, value)

    @property
    def Daily_obj(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 28

        LOADSHAPE object to use for the per-unit voltage for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 28)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_batch_string(28, value)

    @property
    def Duty(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 29

        LOADSHAPE object to use for the per-unit voltage for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 29)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(29, value)
            return

        self._set_batch_string(29, value)

    @property
    def Duty_obj(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 29

        LOADSHAPE object to use for the per-unit voltage for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual L-N kV.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 29)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_batch_string(29, value)

    @property
    def Model(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Model
        DSS property index: 30

        {Thevenin* | Ideal}  Specifies whether the Vsource is to be considered a Thevenin short circuit model or a quasi-ideal voltage source. If Thevenin, the Vsource uses the impedances defined for all calculations. If "Ideal", the model uses a small impedance on the diagonal of the impedance matrix for the fundamental base frequency power flow only. Then switches to actual Thevenin model for other frequencies. 
        """
        return BatchInt32ArrayProxy(self, 30)

    @Model.setter
    def Model(self, value: Union[AnyStr, int, Vsource.VSourceModel, List[AnyStr], List[Union[int, Vsource.VSourceModel]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(30, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(30, value)

    @property
    def Model_str(self) -> str:
        """
        DSS property name: Model
        DSS property index: 30

        {Thevenin* | Ideal}  Specifies whether the Vsource is to be considered a Thevenin short circuit model or a quasi-ideal voltage source. If Thevenin, the Vsource uses the impedances defined for all calculations. If "Ideal", the model uses a small impedance on the diagonal of the impedance matrix for the fundamental base frequency power flow only. Then switches to actual Thevenin model for other frequencies. 
        """
        return self._get_prop_string(30)

    @Model_str.setter
    def Model_str(self, value: AnyStr):
        self.Model = value

    @property
    def puZideal(self) -> List[complex]:
        """
        DSS property name: puZideal
        DSS property index: 31

        2-element array: e.g., [1  2]. The pu impedance to use for the quasi-ideal voltage source model. Should be a very small impedances. Default is [1e-6, 0.001]. Per-unit impedance on base of Vsource BasekV and BaseMVA. If too small, solution may not work. Be sure to check the voltage values and powers.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                31,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @puZideal.setter
    def puZideal(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 31, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 31, value_ptr, value_count)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 32

        Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 32)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(32, value)
            return

        self._set_batch_string(32, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 32

        Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 32)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(32, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 33

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 33)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(33, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 34

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 34)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 34, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 35

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(35, value)

class IsourceBatch(DSSBatch):
    _cls_name = 'Isource'
    _obj_cls = Isource
    _cls_idx = 17


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which source is connected.
        bus1=busname
        bus1=busname.1.2.3
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def amps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: amps
        DSS property index: 2

        Magnitude of current source, each phase, in Amps.
        """
        return BatchFloat64ArrayProxy(self, 2)

    @amps.setter
    def amps(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def angle(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: angle
        DSS property index: 3

        Phase angle in degrees of first phase: e.g.,Angle=10.3.
        Phase shift between phases is assumed 120 degrees when number of phases <= 3
        """
        return BatchFloat64ArrayProxy(self, 3)

    @angle.setter
    def angle(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def frequency(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: frequency
        DSS property index: 4

        Source frequency.  Defaults to  circuit fundamental frequency.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @frequency.setter
    def frequency(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 5

        Number of phases.  Defaults to 3. For 3 or less, phase shift is 120 degrees.
        """
        return BatchInt32ArrayProxy(self, 5)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(5, value)

    @property
    def scantype(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: scantype
        DSS property index: 6

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return BatchInt32ArrayProxy(self, 6)

    @scantype.setter
    def scantype(self, value: Union[AnyStr, int, ScanType, List[AnyStr], List[Union[int, ScanType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(6, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(6, value)

    @property
    def scantype_str(self) -> str:
        """
        DSS property name: scantype
        DSS property index: 6

        {pos*| zero | none} Maintain specified sequence for harmonic solution. Default is positive sequence. Otherwise, angle between phases rotates with harmonic.
        """
        return self._get_prop_string(6)

    @scantype_str.setter
    def scantype_str(self, value: AnyStr):
        self.scantype = value

    @property
    def sequence(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: sequence
        DSS property index: 7

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return BatchInt32ArrayProxy(self, 7)

    @sequence.setter
    def sequence(self, value: Union[AnyStr, int, SequenceType, List[AnyStr], List[Union[int, SequenceType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(7, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(7, value)

    @property
    def sequence_str(self) -> str:
        """
        DSS property name: sequence
        DSS property index: 7

        {pos*| neg | zero} Set the phase angles for the specified symmetrical component sequence for non-harmonic solution modes. Default is positive sequence. 
        """
        return self._get_prop_string(7)

    @sequence_str.setter
    def sequence_str(self, value: AnyStr):
        self.sequence = value

    @property
    def Yearly(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 8

        LOADSHAPE object to use for the per-unit current for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual Amp.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(8, value)
            return

        self._set_batch_string(8, value)

    @property
    def Yearly_obj(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 8

        LOADSHAPE object to use for the per-unit current for YEARLY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual Amp.

        Must be previously defined as a LOADSHAPE object. 

        Is set to the Daily load shape when Daily is defined.  The daily load shape is repeated in this case. Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_batch_string(8, value)

    @property
    def Daily(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 9

        LOADSHAPE object to use for the per-unit current for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(9, value)
            return

        self._set_batch_string(9, value)

    @property
    def Daily_obj(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 9

        LOADSHAPE object to use for the per-unit current for DAILY-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Sets Yearly curve if it is not already defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_batch_string(9, value)

    @property
    def Duty(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 10

        LOADSHAPE object to use for the per-unit current for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 10)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(10, value)
            return

        self._set_batch_string(10, value)

    @property
    def Duty_obj(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 10

        LOADSHAPE object to use for the per-unit current for DUTYCYCLE-mode simulations. Set the Mult property of the LOADSHAPE to the pu curve. Qmult is not used. If UseActual=Yes then the Mult curve should be actual A.

        Must be previously defined as a LOADSHAPE object. 

        Defaults to Daily load shape when Daily is defined.   Set to NONE to reset to no loadahape for Yearly mode. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 10)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_batch_string(10, value)

    @property
    def Bus2(self) -> List[str]:
        """
        DSS property name: Bus2
        DSS property index: 11

        Name of bus to which 2nd terminal is connected.
        bus2=busname
        bus2=busname.1.2.3

        Default is Bus1.0.0.0 (grounded-wye connection)
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11) 

    @Bus2.setter
    def Bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 11, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 12

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 12)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(12, value)
            return

        self._set_batch_string(12, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 12

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 12)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(12, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 13

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 14

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 14)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 14, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 15

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(15, value)

class VCCSBatch(DSSBatch):
    _cls_name = 'VCCS'
    _obj_cls = VCCS
    _cls_idx = 18


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which source is connected.
        bus1=busname
        bus1=busname.1.2.3
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 2

        Number of phases.  Defaults to 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def prated(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: prated
        DSS property index: 3

        Total rated power, in Watts.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @prated.setter
    def prated(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def vrated(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: vrated
        DSS property index: 4

        Rated line-to-line voltage, in Volts
        """
        return BatchFloat64ArrayProxy(self, 4)

    @vrated.setter
    def vrated(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def ppct(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ppct
        DSS property index: 5

        Steady-state operating output, in percent of rated.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @ppct.setter
    def ppct(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def bp1(self) -> List[str]:
        """
        DSS property name: bp1
        DSS property index: 6

        XYCurve defining the input piece-wise linear block.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6)

    @bp1.setter
    def bp1(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(6, value)
            return

        self._set_batch_string(6, value)

    @property
    def bp1_obj(self) -> List[str]:
        """
        DSS property name: bp1
        DSS property index: 6

        XYCurve defining the input piece-wise linear block.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6)

    @bp1_obj.setter
    def bp1_obj(self, value: XYcurve):
        self._set_batch_string(6, value)

    @property
    def bp2(self) -> List[str]:
        """
        DSS property name: bp2
        DSS property index: 7

        XYCurve defining the output piece-wise linear block.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @bp2.setter
    def bp2(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(7, value)
            return

        self._set_batch_string(7, value)

    @property
    def bp2_obj(self) -> List[str]:
        """
        DSS property name: bp2
        DSS property index: 7

        XYCurve defining the output piece-wise linear block.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @bp2_obj.setter
    def bp2_obj(self, value: XYcurve):
        self._set_batch_string(7, value)

    @property
    def filter(self) -> List[str]:
        """
        DSS property name: filter
        DSS property index: 8

        XYCurve defining the digital filter coefficients (x numerator, y denominator).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @filter.setter
    def filter(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(8, value)
            return

        self._set_batch_string(8, value)

    @property
    def filter_obj(self) -> List[str]:
        """
        DSS property name: filter
        DSS property index: 8

        XYCurve defining the digital filter coefficients (x numerator, y denominator).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @filter_obj.setter
    def filter_obj(self, value: XYcurve):
        self._set_batch_string(8, value)

    @property
    def fsample(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: fsample
        DSS property index: 9

        Sample frequency [Hz} for the digital filter.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @fsample.setter
    def fsample(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def rmsmode(self) -> List[bool]:
        """
        DSS property name: rmsmode
        DSS property index: 10

        True if only Hz is used to represent a phase-locked loop (PLL), ignoring the BP1, BP2 and time-domain transformations. Default is no.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 10)
        ]
    @rmsmode.setter
    def rmsmode(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 10, value)

    @property
    def imaxpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: imaxpu
        DSS property index: 11

        Maximum output current in per-unit of rated; defaults to 1.1
        """
        return BatchFloat64ArrayProxy(self, 11)

    @imaxpu.setter
    def imaxpu(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def vrmstau(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: vrmstau
        DSS property index: 12

        Time constant in sensing Vrms for the PLL; defaults to 0.0015
        """
        return BatchFloat64ArrayProxy(self, 12)

    @vrmstau.setter
    def vrmstau(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def irmstau(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: irmstau
        DSS property index: 13

        Time constant in producing Irms from the PLL; defaults to 0.0015
        """
        return BatchFloat64ArrayProxy(self, 13)

    @irmstau.setter
    def irmstau(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 14

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 14)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(14, value)
            return

        self._set_batch_string(14, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 14

        Harmonic spectrum assumed for this source.  Default is "default".
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 14)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(14, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 15

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 16

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 16)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 16, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 17

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(17, value)

class LoadBatch(DSSBatch):
    _cls_name = 'Load'
    _obj_cls = Load
    _cls_idx = 19


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this load.  Load is evenly divided among phases.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the load is connected.  May include specific node specification.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def kV(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kV
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for load. For 2- and 3-phase loads, specify phase-phase kV. Otherwise, specify actual kV across each branch of the load. If wye (star), specify phase-neutral kV. If delta or phase-phase connected, specify phase-phase kV.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kV.setter
    def kV(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def kW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kW
        DSS property index: 4

        Total base kW for the load.  Normally, you would enter the maximum kW for the load for the first year and allow it to be adjusted by the load shapes, growth shapes, and global load multiplier.

        Legal ways to define base load:
        kW, PF
        kW, kvar
        kVA, PF
        XFKVA * Allocationfactor, PF
        kWh/(kWhdays*24) * Cfactor, PF
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kW.setter
    def kW(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def pf(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pf
        DSS property index: 5

        Load power factor.  Enter negative for leading powerfactor (when kW and kvar have opposite signs.)
        """
        return BatchFloat64ArrayProxy(self, 5)

    @pf.setter
    def pf(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def model(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: model
        DSS property index: 6

        Integer code for the model to use for load variation with voltage. Valid values are:

        1:Standard constant P+jQ load. (Default)
        2:Constant impedance load. 
        3:Const P, Quadratic Q (like a motor).
        4:Nominal Linear P, Quadratic Q (feeder mix). Use this with CVRfactor.
        5:Constant Current Magnitude
        6:Const P, Fixed Q
        7:Const P, Fixed Impedance Q
        8:ZIPV (7 values)

        For Types 6 and 7, only the P is modified by load multipliers.
        """
        return BatchInt32ArrayProxy(self, 6)

    @model.setter
    def model(self, value):
        self._set_batch_int32_array(6, value)

    @property
    def yearly(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 7

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(7, value)
            return

        self._set_batch_string(7, value)

    @property
    def yearly_obj(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 7

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_batch_string(7, value)

    @property
    def daily(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 8

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(8, value)
            return

        self._set_batch_string(8, value)

    @property
    def daily_obj(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 8

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_batch_string(8, value)

    @property
    def duty(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 9

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(9, value)
            return

        self._set_batch_string(9, value)

    @property
    def duty_obj(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 9

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_batch_string(9, value)

    @property
    def growth(self) -> List[str]:
        """
        DSS property name: growth
        DSS property index: 10

        Characteristic  to use for growth factors by years.  Must be previously defined as a Growthshape object. Defaults to circuit default growth factor (see Set Growth command).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 10)

    @growth.setter
    def growth(self, value: Union[AnyStr, GrowthShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(10, value)
            return

        self._set_batch_string(10, value)

    @property
    def growth_obj(self) -> List[str]:
        """
        DSS property name: growth
        DSS property index: 10

        Characteristic  to use for growth factors by years.  Must be previously defined as a Growthshape object. Defaults to circuit default growth factor (see Set Growth command).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 10)

    @growth_obj.setter
    def growth_obj(self, value: GrowthShape):
        self._set_batch_string(10, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 11

        ={wye or LN | delta or LL}.  Default is wye.
        """
        return BatchInt32ArrayProxy(self, 11)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(11, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(11, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 11

        ={wye or LN | delta or LL}.  Default is wye.
        """
        return self._get_prop_string(11)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvar
        DSS property index: 12

        Specify the base kvar for specifying load as kW & kvar.  Assumes kW has been already defined.  Alternative to specifying the power factor.  Side effect:  the power factor and kVA is altered to agree.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @kvar.setter
    def kvar(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def Rneut(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rneut
        DSS property index: 13

        Default is -1. Neutral resistance of wye (star)-connected load in actual ohms. If entered as a negative value, the neutral can be open, or floating, or it can be connected to node 0 (ground), which is the usual default. If >=0 be sure to explicitly specify the node connection for the neutral, or last, conductor. Otherwise, the neutral impedance will be shorted to ground.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @Rneut.setter
    def Rneut(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def Xneut(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xneut
        DSS property index: 14

        Neutral reactance of wye(star)-connected load in actual ohms.  May be + or -.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @Xneut.setter
    def Xneut(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def status(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: status
        DSS property index: 15

        ={Variable | Fixed | Exempt}.  Default is variable. If Fixed, no load multipliers apply;  however, growth multipliers do apply.  All multipliers apply to Variable loads.  Exempt loads are not modified by the global load multiplier, such as in load duration curves, etc.  Daily multipliers do apply, so setting this property to Exempt is a good way to represent industrial load that stays the same day-after-day for the period study.
        """
        return BatchInt32ArrayProxy(self, 15)

    @status.setter
    def status(self, value: Union[AnyStr, int, Load.LoadStatus, List[AnyStr], List[Union[int, Load.LoadStatus]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(15, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(15, value)

    @property
    def status_str(self) -> str:
        """
        DSS property name: status
        DSS property index: 15

        ={Variable | Fixed | Exempt}.  Default is variable. If Fixed, no load multipliers apply;  however, growth multipliers do apply.  All multipliers apply to Variable loads.  Exempt loads are not modified by the global load multiplier, such as in load duration curves, etc.  Daily multipliers do apply, so setting this property to Exempt is a good way to represent industrial load that stays the same day-after-day for the period study.
        """
        return self._get_prop_string(15)

    @status_str.setter
    def status_str(self, value: AnyStr):
        self.status = value

    @property
    def cls(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: class
        DSS property index: 16

        An arbitrary integer number representing the class of load so that load values may be segregated by load value. Default is 1; not used internally.
        """
        return BatchInt32ArrayProxy(self, 16)

    @cls.setter
    def cls(self, value):
        self._set_batch_int32_array(16, value)

    @property
    def Vminpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vminpu
        DSS property index: 17

        Default = 0.95.  Minimum per unit voltage for which the MODEL is assumed to apply. Lower end of normal voltage range.Below this value, the load model reverts to a constant impedance model that matches the model at the transition voltage. See also "Vlowpu" which causes the model to match Model=2 below the transition voltage.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @Vminpu.setter
    def Vminpu(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def Vmaxpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vmaxpu
        DSS property index: 18

        Default = 1.05.  Maximum per unit voltage for which the MODEL is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @Vmaxpu.setter
    def Vmaxpu(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def Vminnorm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vminnorm
        DSS property index: 19

        Minimum per unit voltage for load EEN evaluations, Normal limit.  Default = 0, which defaults to system "vminnorm" property (see Set Command under Executive).  If this property is specified, it ALWAYS overrides the system specification. This allows you to have different criteria for different loads. Set to zero to revert to the default system value.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @Vminnorm.setter
    def Vminnorm(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def Vminemerg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vminemerg
        DSS property index: 20

        Minimum per unit voltage for load UE evaluations, Emergency limit.  Default = 0, which defaults to system "vminemerg" property (see Set Command under Executive).  If this property is specified, it ALWAYS overrides the system specification. This allows you to have different criteria for different loads. Set to zero to revert to the default system value.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @Vminemerg.setter
    def Vminemerg(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def xfkVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: xfkVA
        DSS property index: 21

        Default = 0.0.  Rated kVA of service transformer for allocating loads based on connected kVA at a bus. Side effect:  kW, PF, and kvar are modified. See help on kVA.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @xfkVA.setter
    def xfkVA(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def allocationfactor(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: allocationfactor
        DSS property index: 22

        Default = 0.5.  Allocation factor for allocating loads based on connected kVA at a bus. Side effect:  kW, PF, and kvar are modified by multiplying this factor times the XFKVA (if > 0).
        """
        return BatchFloat64ArrayProxy(self, 22)

    @allocationfactor.setter
    def allocationfactor(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def kVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVA
        DSS property index: 23

        Specify base Load in kVA (and power factor)

        Legal ways to define base load:
        kW, PF
        kW, kvar
        kVA, PF
        XFKVA * Allocationfactor, PF
        kWh/(kWhdays*24) * Cfactor, PF
        """
        return BatchFloat64ArrayProxy(self, 23)

    @kVA.setter
    def kVA(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def pctmean(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %mean
        DSS property index: 24

        Percent mean value for load to use for monte carlo studies if no loadshape is assigned to this load. Default is 50.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @pctmean.setter
    def pctmean(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def pctstddev(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %stddev
        DSS property index: 25

        Percent Std deviation value for load to use for monte carlo studies if no loadshape is assigned to this load. Default is 10.
        """
        return BatchFloat64ArrayProxy(self, 25)

    @pctstddev.setter
    def pctstddev(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def CVRwatts(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: CVRwatts
        DSS property index: 26

        Percent reduction in active power (watts) per 1% reduction in voltage from 100% rated. Default=1. 
         Typical values range from 0.4 to 0.8. Applies to Model=4 only.
         Intended to represent conservation voltage reduction or voltage optimization measures.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @CVRwatts.setter
    def CVRwatts(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def CVRvars(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: CVRvars
        DSS property index: 27

        Percent reduction in reactive power (vars) per 1% reduction in voltage from 100% rated. Default=2. 
         Typical values range from 2 to 3. Applies to Model=4 only.
         Intended to represent conservation voltage reduction or voltage optimization measures.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @CVRvars.setter
    def CVRvars(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def kwh(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kwh
        DSS property index: 28

        kWh billed for this period. Default is 0. See help on kVA and Cfactor and kWhDays.
        """
        return BatchFloat64ArrayProxy(self, 28)

    @kwh.setter
    def kwh(self, value):
        self._set_batch_float64_array(28, value)

    @property
    def kwhdays(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kwhdays
        DSS property index: 29

        Length of kWh billing period in days (24 hr days). Default is 30. Average demand is computed using this value.
        """
        return BatchFloat64ArrayProxy(self, 29)

    @kwhdays.setter
    def kwhdays(self, value):
        self._set_batch_float64_array(29, value)

    @property
    def Cfactor(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Cfactor
        DSS property index: 30

        Factor relating average kW to peak kW. Default is 4.0. See kWh and kWhdays. See kVA.
        """
        return BatchFloat64ArrayProxy(self, 30)

    @Cfactor.setter
    def Cfactor(self, value):
        self._set_batch_float64_array(30, value)

    @property
    def CVRcurve(self) -> List[str]:
        """
        DSS property name: CVRcurve
        DSS property index: 31

        Default is NONE. Curve describing both watt and var factors as a function of time. Refers to a LoadShape object with both Mult and Qmult defined. Define a Loadshape to agree with yearly or daily curve according to the type of analysis being done. If NONE, the CVRwatts and CVRvars factors are used and assumed constant.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 31)

    @CVRcurve.setter
    def CVRcurve(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(31, value)
            return

        self._set_batch_string(31, value)

    @property
    def CVRcurve_obj(self) -> List[str]:
        """
        DSS property name: CVRcurve
        DSS property index: 31

        Default is NONE. Curve describing both watt and var factors as a function of time. Refers to a LoadShape object with both Mult and Qmult defined. Define a Loadshape to agree with yearly or daily curve according to the type of analysis being done. If NONE, the CVRwatts and CVRvars factors are used and assumed constant.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 31)

    @CVRcurve_obj.setter
    def CVRcurve_obj(self, value: LoadShape):
        self._set_batch_string(31, value)

    @property
    def NumCust(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: NumCust
        DSS property index: 32

        Number of customers, this load. Default is 1.
        """
        return BatchInt32ArrayProxy(self, 32)

    @NumCust.setter
    def NumCust(self, value):
        self._set_batch_int32_array(32, value)

    @property
    def ZIPV(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: ZIPV
        DSS property index: 33

        Array of 7 coefficients:

         First 3 are ZIP weighting factors for real power (should sum to 1)
         Next 3 are ZIP weighting factors for reactive power (should sum to 1)
         Last 1 is cut-off voltage in p.u. of base kV; load is 0 below this cut-off
         No defaults; all coefficients must be specified if using model=8.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 33)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @ZIPV.setter
    def ZIPV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(33, value)

    @property
    def pctSeriesRL(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %SeriesRL
        DSS property index: 34

        Percent of load that is series R-L for Harmonic studies. Default is 50. Remainder is assumed to be parallel R and L. This can have a significant impact on the amount of damping observed in Harmonics solutions.
        """
        return BatchFloat64ArrayProxy(self, 34)

    @pctSeriesRL.setter
    def pctSeriesRL(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def RelWeight(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: RelWeight
        DSS property index: 35

        Relative weighting factor for reliability calcs. Default = 1. Used to designate high priority loads such as hospitals, etc. 

        Is multiplied by number of customers and load kW during reliability calcs.
        """
        return BatchFloat64ArrayProxy(self, 35)

    @RelWeight.setter
    def RelWeight(self, value):
        self._set_batch_float64_array(35, value)

    @property
    def Vlowpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vlowpu
        DSS property index: 36

        Default = 0.50.  Per unit voltage at which the model switches to same as constant Z model (model=2). This allows more consistent convergence at very low voltaes due to opening switches or solving for fault situations.
        """
        return BatchFloat64ArrayProxy(self, 36)

    @Vlowpu.setter
    def Vlowpu(self, value):
        self._set_batch_float64_array(36, value)

    @property
    def puXharm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: puXharm
        DSS property index: 37

        Special reactance, pu (based on kVA, kV properties), for the series impedance branch in the load model for HARMONICS analysis. Generally used to represent motor load blocked rotor reactance. If not specified (that is, set =0, the default value), the series branch is computed from the percentage of the nominal load at fundamental frequency specified by the %SERIESRL property. 

        Applies to load model in HARMONICS mode only.

        A typical value would be approximately 0.20 pu based on kVA * %SeriesRL / 100.0.
        """
        return BatchFloat64ArrayProxy(self, 37)

    @puXharm.setter
    def puXharm(self, value):
        self._set_batch_float64_array(37, value)

    @property
    def XRharm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XRharm
        DSS property index: 38

        X/R ratio of the special harmonics mode reactance specified by the puXHARM property at fundamental frequency. Default is 6. 
        """
        return BatchFloat64ArrayProxy(self, 38)

    @XRharm.setter
    def XRharm(self, value):
        self._set_batch_float64_array(38, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 39

        Name of harmonic current spectrum for this load.  Default is "defaultload", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 39)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(39, value)
            return

        self._set_batch_string(39, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 39

        Name of harmonic current spectrum for this load.  Default is "defaultload", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 39)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(39, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 40

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 40)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(40, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 41

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 41)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 41, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 42

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(42, value)

class TransformerBatch(DSSBatch):
    _cls_name = 'Transformer'
    _obj_cls = Transformer
    _cls_idx = 20


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of phases this transformer. Default is 3.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def windings(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: windings
        DSS property index: 2

        Number of windings, this transformers. (Also is the number of terminals) Default is 2. This property triggers memory allocation for the Transformer and will cause other properties to revert to default values.
        """
        return BatchInt32ArrayProxy(self, 2)

    @windings.setter
    def windings(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def wdg(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: wdg
        DSS property index: 3

        Set this = to the number of the winding you wish to define.  Then set the values for this winding.  Repeat for each winding.  Alternatively, use the array collections (buses, kVAs, etc.) to define the windings.  Note: reactances are BETWEEN pairs of windings; they are not the property of a single winding.
        """
        return BatchInt32ArrayProxy(self, 3)

    @wdg.setter
    def wdg(self, value):
        self._set_batch_int32_array(3, value)

    @property
    def bus(self) -> List[List[str]]:
        """
        DSS property name: bus
        DSS property index: 4

        Bus connection spec for this winding.
        """
        return self._get_string_ll(4)

    @bus.setter
    def bus(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 4, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def conn(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {wye*, Delta, LN, LL}. Default is "wye" with the neutral solidly grounded. 
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 5)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @conn.setter
    def conn(self, value: Union[List[Union[int,Connection]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 5, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(5, value)

    @property
    def conn_str(self) -> List[List[str]]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {wye*, Delta, LN, LL}. Default is "wye" with the neutral solidly grounded. 
        """
        return self._get_string_ll(5)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kV(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kV
        DSS property index: 6

        For 2-or 3-phase, enter phase-phase kV rating.  Otherwise, kV rating of the actual winding
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 6)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kV.setter
    def kV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def kVA(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVA
        DSS property index: 7

        Base kVA rating of the winding. Side effect: forces change of max normal and emerg kVA ratings.If 2-winding transformer, forces other winding to same value. When winding 1 is defined, all other windings are defaulted to the same rating and the first two winding resistances are defaulted to the %loadloss value.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVA.setter
    def kVA(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def tap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: tap
        DSS property index: 8

        Per unit tap that this winding is on.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 8)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @tap.setter
    def tap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def pctR(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: %R
        DSS property index: 9

        Percent resistance this winding.  (half of total for a 2-winding).
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 9)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @pctR.setter
    def pctR(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def Rneut(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Rneut
        DSS property index: 10

        Default = -1. Neutral resistance of wye (star)-connected winding in actual ohms. If entered as a negative value, the neutral is assumed to be open, or floating. To solidly ground the neutral, connect the neutral conductor to Node 0 in the Bus property spec for this winding. For example: Bus=MyBusName.1.2.3.0, which is generally the default connection.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 10)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Rneut.setter
    def Rneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Xneut(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Xneut
        DSS property index: 11

        Neutral reactance of wye(star)-connected winding in actual ohms.  May be + or -.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 11)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Xneut.setter
    def Xneut(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def buses(self) -> List[List[str]]:
        """
        DSS property name: buses
        DSS property index: 12

        Use this to specify all the bus connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus"
        """
        return self._get_string_ll(12)

    @buses.setter
    def buses(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 12, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def conns(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 13)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @conns.setter
    def conns(self, value: Union[List[Union[int,Connection]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 13, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(13, value)

    @property
    def conns_str(self) -> List[List[str]]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ conns=(delta, wye)
        """
        return self._get_string_ll(13)

    @conns_str.setter
    def conns_str(self, value: AnyStr):
        self.conns = value

    @property
    def kVs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVs
        DSS property index: 14

        Use this to specify the kV ratings of all windings at once using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" 
        ~ conns=(delta, wye)
        ~ kvs=(115, 12.47)

        See kV= property for voltage rules.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 14)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def kVAs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVAs
        DSS property index: 15

        Use this to specify the kVA ratings of all windings at once using an array.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 15)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVAs.setter
    def kVAs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(15, value)

    @property
    def taps(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: taps
        DSS property index: 16

        Use this to specify the p.u. tap of all windings at once using an array.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 16)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @taps.setter
    def taps(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def XHL(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XHL
        DSS property index: 17

        Use this to specify the percent reactance, H-L (winding 1 to winding 2).  Use for 2- or 3-winding transformers. On the kVA base of winding 1. See also X12.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @XHL.setter
    def XHL(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def XHT(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XHT
        DSS property index: 18

        Use this to specify the percent reactance, H-T (winding 1 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1. See also X13.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @XHT.setter
    def XHT(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def XLT(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XLT
        DSS property index: 19

        Use this to specify the percent reactance, L-T (winding 2 to winding 3).  Use for 3-winding transformers only. On the kVA base of winding 1.  See also X23.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @XLT.setter
    def XLT(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def Xscarray(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Xscarray
        DSS property index: 20

        Use this to specify the percent reactance between all pairs of windings as an array. All values are on the kVA base of winding 1.  The order of the values is as follows:

        (x12 13 14... 23 24.. 34 ..)  

        There will be n(n-1)/2 values, where n=number of windings.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 20)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Xscarray.setter
    def Xscarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(20, value)

    @property
    def thermal(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: thermal
        DSS property index: 21

        Thermal time constant of the transformer in hours.  Typically about 2.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @thermal.setter
    def thermal(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def n(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: n
        DSS property index: 22

        n Exponent for thermal properties in IEEE C57.  Typically 0.8.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @n.setter
    def n(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def m(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: m
        DSS property index: 23

        m Exponent for thermal properties in IEEE C57.  Typically 0.9 - 1.0
        """
        return BatchFloat64ArrayProxy(self, 23)

    @m.setter
    def m(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def flrise(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: flrise
        DSS property index: 24

        Temperature rise, deg C, for full load.  Default is 65.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @flrise.setter
    def flrise(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def hsrise(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: hsrise
        DSS property index: 25

        Hot spot temperature rise, deg C.  Default is 15.
        """
        return BatchFloat64ArrayProxy(self, 25)

    @hsrise.setter
    def hsrise(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def pctloadloss(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %loadloss
        DSS property index: 26

        Percent load loss at full load. The %R of the High and Low windings (1 and 2) are adjusted to agree at rated kVA loading.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @pctloadloss.setter
    def pctloadloss(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def pctnoloadloss(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %noloadloss
        DSS property index: 27

        Percent no load losses at rated excitatation voltage. Default is 0. Converts to a resistance in parallel with the magnetizing impedance in each winding.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @pctnoloadloss.setter
    def pctnoloadloss(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def normhkVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normhkVA
        DSS property index: 28

        Normal maximum kVA rating of H winding (winding 1).  Usually 100% - 110% ofmaximum nameplate rating, depending on load shape. Defaults to 110% of kVA rating of Winding 1.
        """
        return BatchFloat64ArrayProxy(self, 28)

    @normhkVA.setter
    def normhkVA(self, value):
        self._set_batch_float64_array(28, value)

    @property
    def emerghkVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emerghkVA
        DSS property index: 29

        Emergency (contingency)  kVA rating of H winding (winding 1).  Usually 140% - 150% ofmaximum nameplate rating, depending on load shape. Defaults to 150% of kVA rating of Winding 1.
        """
        return BatchFloat64ArrayProxy(self, 29)

    @emerghkVA.setter
    def emerghkVA(self, value):
        self._set_batch_float64_array(29, value)

    @property
    def sub(self) -> List[bool]:
        """
        DSS property name: sub
        DSS property index: 30

        ={Yes|No}  Designates whether this transformer is to be considered a substation.Default is No.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 30)
        ]
    @sub.setter
    def sub(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 30, value)

    @property
    def MaxTap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: MaxTap
        DSS property index: 31

        Max per unit tap for the active winding.  Default is 1.10
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 31)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @MaxTap.setter
    def MaxTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(31, value)

    @property
    def MinTap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: MinTap
        DSS property index: 32

        Min per unit tap for the active winding.  Default is 0.90
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 32)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @MinTap.setter
    def MinTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(32, value)

    @property
    def NumTaps(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: NumTaps
        DSS property index: 33

        Total number of taps between min and max tap.  Default is 32 (16 raise and 16 lower taps about the neutral position). The neutral position is not counted.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 33)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @NumTaps.setter
    def NumTaps(self, value: npt.NDArray[np.int32]): #TODO: list of arrays, matrix
        self._set_batch_int32_array(33, value)

    @property
    def subname(self) -> List[str]:
        """
        DSS property name: subname
        DSS property index: 34

        Substation Name. Optional. Default is null. If specified, printed on plots
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 34) 

    @subname.setter
    def subname(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 34, value)

    @property
    def pctimag(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %imag
        DSS property index: 35

        Percent magnetizing current. Default=0.0. Magnetizing branch is in parallel with windings in each phase. Also, see "ppm_antifloat".
        """
        return BatchFloat64ArrayProxy(self, 35)

    @pctimag.setter
    def pctimag(self, value):
        self._set_batch_float64_array(35, value)

    @property
    def ppm_antifloat(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ppm_antifloat
        DSS property index: 36

        Default=1 ppm.  Parts per million of transformer winding VA rating connected to ground to protect against accidentally floating a winding without a reference. If positive then the effect is adding a very large reactance to ground.  If negative, then a capacitor.
        """
        return BatchFloat64ArrayProxy(self, 36)

    @ppm_antifloat.setter
    def ppm_antifloat(self, value):
        self._set_batch_float64_array(36, value)

    @property
    def pctRs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: %Rs
        DSS property index: 37

        Use this property to specify all the winding %resistances using an array. Example:

        New Transformer.T1 buses="Hibus, lowbus" ~ %Rs=(0.2  0.3)
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 37)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @pctRs.setter
    def pctRs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def bank(self) -> List[str]:
        """
        DSS property name: bank
        DSS property index: 38

        Name of the bank this transformer is part of, for CIM, MultiSpeak, and other interfaces.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 38) 

    @bank.setter
    def bank(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 38, value)

    @property
    def xfmrcode(self) -> List[str]:
        """
        DSS property name: XfmrCode
        DSS property index: 39

        Name of a library entry for transformer properties. The named XfmrCode must already be defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 39)

    @xfmrcode.setter
    def xfmrcode(self, value: Union[AnyStr, XfmrCode]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(39, value)
            return

        self._set_batch_string(39, value)

    @property
    def xfmrcode_obj(self) -> List[str]:
        """
        DSS property name: XfmrCode
        DSS property index: 39

        Name of a library entry for transformer properties. The named XfmrCode must already be defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 39)

    @xfmrcode_obj.setter
    def xfmrcode_obj(self, value: XfmrCode):
        self._set_batch_string(39, value)

    @property
    def XRConst(self) -> List[bool]:
        """
        DSS property name: XRConst
        DSS property index: 40

        ={Yes|No} Default is NO. Signifies whether or not the X/R is assumed contant for harmonic studies.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 40)
        ]
    @XRConst.setter
    def XRConst(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 40, value)

    @property
    def X12(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X12
        DSS property index: 41

        Alternative to XHL for specifying the percent reactance from winding 1 to winding 2.  Use for 2- or 3-winding transformers. Percent on the kVA base of winding 1. 
        """
        return BatchFloat64ArrayProxy(self, 41)

    @X12.setter
    def X12(self, value):
        self._set_batch_float64_array(41, value)

    @property
    def X13(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X13
        DSS property index: 42

        Alternative to XHT for specifying the percent reactance from winding 1 to winding 3.  Use for 3-winding transformers only. Percent on the kVA base of winding 1. 
        """
        return BatchFloat64ArrayProxy(self, 42)

    @X13.setter
    def X13(self, value):
        self._set_batch_float64_array(42, value)

    @property
    def X23(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X23
        DSS property index: 43

        Alternative to XLT for specifying the percent reactance from winding 2 to winding 3.Use for 3-winding transformers only. Percent on the kVA base of winding 1.  
        """
        return BatchFloat64ArrayProxy(self, 43)

    @X23.setter
    def X23(self, value):
        self._set_batch_float64_array(43, value)

    @property
    def LeadLag(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: LeadLag
        DSS property index: 44

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return BatchInt32ArrayProxy(self, 44)

    @LeadLag.setter
    def LeadLag(self, value: Union[AnyStr, int, PhaseSequence, List[AnyStr], List[Union[int, PhaseSequence]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(44, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(44, value)

    @property
    def LeadLag_str(self) -> str:
        """
        DSS property name: LeadLag
        DSS property index: 44

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return self._get_prop_string(44)

    @LeadLag_str.setter
    def LeadLag_str(self, value: AnyStr):
        self.LeadLag = value

    def WdgCurrents(self) -> List[str]:
        """
        DSS property name: WdgCurrents
        DSS property index: 45

        (Read only) Makes winding currents available via return on query (? Transformer.TX.WdgCurrents). Order: Phase 1, Wdg 1, Wdg 2, ..., Phase 2 ...
        """
        # []
        # StringSilentROFunction
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 45)

    @property
    def Core(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Core
        DSS property index: 46

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis
        """
        return BatchInt32ArrayProxy(self, 46)

    @Core.setter
    def Core(self, value: Union[AnyStr, int, CoreType, List[AnyStr], List[Union[int, CoreType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(46, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(46, value)

    @property
    def Core_str(self) -> str:
        """
        DSS property name: Core
        DSS property index: 46

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis
        """
        return self._get_prop_string(46)

    @Core_str.setter
    def Core_str(self, value: AnyStr):
        self.Core = value

    @property
    def RdcOhms(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: RdcOhms
        DSS property index: 47

        Winding dc resistance in OHMS. Useful for GIC analysis. From transformer test report. Defaults to 85% of %R property
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 47)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @RdcOhms.setter
    def RdcOhms(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(47, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 48

        Defines the number of ratings to be defined for the transfomer, to be used only when defining seasonal ratings using the "Ratings" property.
        """
        return BatchInt32ArrayProxy(self, 48)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(48, value)

    @property
    def Ratings(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Ratings
        DSS property index: 49

        An array of ratings to be used when the seasonal ratings flag is True. It can be used to insert
        multiple ratings to change during a QSTS simulation to evaluate different ratings in transformers. Is given in kVA
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 49)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Ratings.setter
    def Ratings(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(49, value)

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 50

        Normal rated current.
        """
        return BatchFloat64ArrayProxy(self, 50)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(50, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 51

        Maximum or emerg current.
        """
        return BatchFloat64ArrayProxy(self, 51)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(51, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 52

        Failure rate per year.
        """
        return BatchFloat64ArrayProxy(self, 52)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(52, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 53

        Percent of failures that become permanent.
        """
        return BatchFloat64ArrayProxy(self, 53)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(53, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 54

        Hours to repair.
        """
        return BatchFloat64ArrayProxy(self, 54)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(54, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 55

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 55)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(55, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 56

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 56)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 56, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 57

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(57, value)

class CapacitorBatch(DSSBatch):
    _cls_name = 'Capacitor'
    _obj_cls = Capacitor
    _cls_idx = 22


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of first bus of 2-terminal capacitor. Examples:
        bus1=busname
        bus1=busname.1.2.3

        If only one bus specified, Bus2 will default to this bus, Node 0, and the capacitor will be a Yg shunt bank.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def bus2(self) -> List[str]:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of 2nd bus. Defaults to all phases connected to first bus, node 0, (Shunt Wye Connection) except when Bus2 explicitly specified. 

        Not necessary to specify for delta (LL) connection.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus2.setter
    def bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 3

        Number of phases.
        """
        return BatchInt32ArrayProxy(self, 3)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(3, value)

    @property
    def kvar(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kvar
        DSS property index: 4

        Total kvar, if one step, or ARRAY of kvar ratings for each step.  Evenly divided among phases. See rules for NUMSTEPS.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 4)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kvar.setter
    def kvar(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(4, value)

    @property
    def kv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kv
        DSS property index: 5

        For 2, 3-phase, kV phase-phase. Otherwise specify actual can rating.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kv.setter
    def kv(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN
        """
        return BatchInt32ArrayProxy(self, 6)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(6, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(6, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN
        """
        return self._get_prop_string(6)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def cmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: cmatrix
        DSS property index: 7

        Nodal cap. matrix, lower triangle, microfarads, of the following form:

        cmatrix="c11 | -c21 c22 | -c31 -c32 c33"

        All steps are assumed the same if this property is used.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @cmatrix.setter
    def cmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def cuf(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: cuf
        DSS property index: 8

        ARRAY of Capacitance, each phase, for each step, microfarads.
        See Rules for NumSteps.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 8)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @cuf.setter
    def cuf(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def R(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: R
        DSS property index: 9

        ARRAY of series resistance in each phase (line), ohms. Default is 0.0
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 9)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @R.setter
    def R(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def XL(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: XL
        DSS property index: 10

        ARRAY of series inductive reactance(s) in each phase (line) for filter, ohms at base frequency. Use this OR "h" property to define filter. Default is 0.0.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 10)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @XL.setter
    def XL(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Harm(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Harm
        DSS property index: 11

        ARRAY of harmonics to which each step is tuned. Zero is interpreted as meaning zero reactance (no filter). Default is zero.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 11)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Harm.setter
    def Harm(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def Numsteps(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Numsteps
        DSS property index: 12

        Number of steps in this capacitor bank. Default = 1. Forces reallocation of the capacitance, reactor, and states array.  Rules: If this property was previously =1, the value in the kvar property is divided equally among the steps. The kvar property does not need to be reset if that is accurate.  If the Cuf or Cmatrix property was used previously, all steps are set to the value of the first step. The states property is set to all steps on. All filter steps are set to the same harmonic. If this property was previously >1, the arrays are reallocated, but no values are altered. You must SUBSEQUENTLY assign all array properties.
        """
        return BatchInt32ArrayProxy(self, 12)

    @Numsteps.setter
    def Numsteps(self, value):
        self._set_batch_int32_array(12, value)

    @property
    def states(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: states
        DSS property index: 13

        ARRAY of integers {1|0} states representing the state of each step (on|off). Defaults to 1 when reallocated (on). Capcontrol will modify this array as it turns steps on or off.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 13)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @states.setter
    def states(self, value: npt.NDArray[np.int32]): #TODO: list of arrays, matrix
        self._set_batch_int32_array(13, value)

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 14

        Normal rated current.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 15

        Maximum or emerg current.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 16

        Failure rate per year.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 17

        Percent of failures that become permanent.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 18

        Hours to repair.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 19

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 20

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 20)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 20, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 21

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(21, value)

class ReactorBatch(DSSBatch):
    _cls_name = 'Reactor'
    _obj_cls = Reactor
    _cls_idx = 23


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of first bus. Examples:
        bus1=busname
        bus1=busname.1.2.3

        Bus2 property will default to this bus, node 0, unless previously specified. Only Bus1 need be specified for a Yg shunt reactor.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def bus2(self) -> List[str]:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of 2nd bus. Defaults to all phases connected to first bus, node 0, (Shunt Wye Connection) except when Bus2 is specifically defined.

        Not necessary to specify for delta (LL) connection
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus2.setter
    def bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 3

        Number of phases.
        """
        return BatchInt32ArrayProxy(self, 3)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(3, value)

    @property
    def kvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvar
        DSS property index: 4

        Total kvar, all phases.  Evenly divided among phases. Only determines X. Specify R separately
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kvar.setter
    def kvar(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def kv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kv
        DSS property index: 5

        For 2, 3-phase, kV phase-phase. Otherwise specify actual coil rating.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kv.setter
    def kv(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN. If Delta, then only one terminal.
        """
        return BatchInt32ArrayProxy(self, 6)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(6, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(6, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 6

        ={wye | delta |LN |LL}  Default is wye, which is equivalent to LN. If Delta, then only one terminal.
        """
        return self._get_prop_string(6)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def Rmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Rmatrix
        DSS property index: 7

        Resistance matrix, lower triangle, ohms at base frequency. Order of the matrix is the number of phases. Mutually exclusive to specifying parameters by kvar or X.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Rmatrix.setter
    def Rmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def Xmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Xmatrix
        DSS property index: 8

        Reactance matrix, lower triangle, ohms at base frequency. Order of the matrix is the number of phases. Mutually exclusive to specifying parameters by kvar or X.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 8)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Xmatrix.setter
    def Xmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def Parallel(self) -> List[bool]:
        """
        DSS property name: Parallel
        DSS property index: 9

        {Yes | No}  Default=No. Indicates whether Rmatrix and Xmatrix are to be considered in parallel. Default is series. For other models, specify R and Rp.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 9)
        ]
    @Parallel.setter
    def Parallel(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 9, value)

    @property
    def R(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: R
        DSS property index: 10

        Resistance (in series with reactance), each phase, ohms. This property applies to REACTOR specified by either kvar or X. See also help on Z.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @R.setter
    def R(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def X(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X
        DSS property index: 11

        Reactance, each phase, ohms at base frequency. See also help on Z and LmH properties.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @X.setter
    def X(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def Rp(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rp
        DSS property index: 12

        Resistance in parallel with R and X (the entire branch). Assumed infinite if not specified.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @Rp.setter
    def Rp(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def Z1(self) -> List[complex]:
        """
        DSS property name: Z1
        DSS property index: 13

        Positive-sequence impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z1=[1, 2]  ! represents 1 + j2 

        If defined, Z1, Z2, and Z0 are used to define the impedance matrix of the REACTOR. Z1 MUST BE DEFINED TO USE THIS OPTION FOR DEFINING THE MATRIX.

        Side Effect: Sets Z2 and Z0 to same values unless they were previously defined.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                13,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Z1.setter
    def Z1(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 13, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 13, value_ptr, value_count)

    @property
    def Z2(self) -> List[complex]:
        """
        DSS property name: Z2
        DSS property index: 14

        Negative-sequence impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z2=[1, 2]  ! represents 1 + j2 

        Used to define the impedance matrix of the REACTOR if Z1 is also specified. 

        Note: Z2 defaults to Z1 if it is not specifically defined. If Z2 is not equal to Z1, the impedance matrix is asymmetrical.
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                14,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Z2.setter
    def Z2(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 14, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 14, value_ptr, value_count)

    @property
    def Z0(self) -> List[complex]:
        """
        DSS property name: Z0
        DSS property index: 15

        Zer0-sequence impedance, ohms, as a 2-element array representing a complex number. Example: 

        Z0=[3, 4]  ! represents 3 + j4 

        Used to define the impedance matrix of the REACTOR if Z1 is also specified. 

        Note: Z0 defaults to Z1 if it is not specifically defined. 
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                15,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Z0.setter
    def Z0(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 15, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 15, value_ptr, value_count)

    @property
    def Z(self) -> List[complex]:
        """
        DSS property name: Z
        DSS property index: 16

        Alternative way of defining R and X properties. Enter a 2-element array representing R +jX in ohms. Example:

        Z=[5  10]   ! equivalent to R=5  X=10 
        """
        return [   
            self._get_float64_array(
                self._lib.Obj_GetFloat64Array, 
                x,
                16,
            ).astype(complex)[0]
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Z.setter
    def Z(self, value: Union[complex, List[complex]]):
        if isinstance(value, complex):
            value, value_ptr, value_count = self._prepare_float64_array([value.real, value.imag])
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetFloat64Array(x, 16, value_ptr, value_count)
            return

        values = value
        if len(values) != self.count[0]:
            raise ValueError('Number of elements provided must match the number of objects in the batch.')

        value, value_ptr, value_count = self._prepare_float64_array([0, 0])
        for v, x in zip(values, self._ffi.unpack(self.pointer[0], self.count[0])):
            value[0] = v.real
            value[1] = v.imag
            self._lib.Obj_SetFloat64Array(x, 16, value_ptr, value_count)

    @property
    def RCurve(self) -> List[str]:
        """
        DSS property name: RCurve
        DSS property index: 17

        Name of XYCurve object, previously defined, describing per-unit variation of phase resistance, R, vs. frequency. Applies to resistance specified by R or Z property. If actual values are not known, R often increases by approximately the square root of frequency.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 17)

    @RCurve.setter
    def RCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(17, value)
            return

        self._set_batch_string(17, value)

    @property
    def RCurve_obj(self) -> List[str]:
        """
        DSS property name: RCurve
        DSS property index: 17

        Name of XYCurve object, previously defined, describing per-unit variation of phase resistance, R, vs. frequency. Applies to resistance specified by R or Z property. If actual values are not known, R often increases by approximately the square root of frequency.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 17)

    @RCurve_obj.setter
    def RCurve_obj(self, value: XYcurve):
        self._set_batch_string(17, value)

    @property
    def LCurve(self) -> List[str]:
        """
        DSS property name: LCurve
        DSS property index: 18

        Name of XYCurve object, previously defined, describing per-unit variation of phase inductance, L=X/w, vs. frequency. Applies to reactance specified by X, LmH, Z, or kvar property.L generally decreases somewhat with frequency above the base frequency, approaching a limit at a few kHz.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 18)

    @LCurve.setter
    def LCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(18, value)
            return

        self._set_batch_string(18, value)

    @property
    def LCurve_obj(self) -> List[str]:
        """
        DSS property name: LCurve
        DSS property index: 18

        Name of XYCurve object, previously defined, describing per-unit variation of phase inductance, L=X/w, vs. frequency. Applies to reactance specified by X, LmH, Z, or kvar property.L generally decreases somewhat with frequency above the base frequency, approaching a limit at a few kHz.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 18)

    @LCurve_obj.setter
    def LCurve_obj(self, value: XYcurve):
        self._set_batch_string(18, value)

    @property
    def LmH(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: LmH
        DSS property index: 19

        Inductance, mH. Alternate way to define the reactance, X, property.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @LmH.setter
    def LmH(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 20

        Normal rated current.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 21

        Maximum or emerg current.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 22

        Failure rate per year.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 23

        Percent of failures that become permanent.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 24

        Hours to repair.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 25

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 25)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 26

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 26)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 26, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 27

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(27, value)

class CapControlBatch(DSSBatch):
    _cls_name = 'CapControl'
    _obj_cls = CapControl
    _cls_idx = 24


    @property
    def element(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, to which the capacitor control's PT and/or CT are connected.There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def element_obj(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, to which the capacitor control's PT and/or CT are connected.There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def terminal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the CapControl is connected. 1 or 2, typically.  Default is 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @terminal.setter
    def terminal(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def capacitor(self) -> List[str]:
        """
        DSS property name: capacitor
        DSS property index: 3

        Name of Capacitor element which the CapControl controls. No Default; Must be specified.Do not specify the full object name; "Capacitor" is assumed for the object class.  Example:

        Capacitor=cap1
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @capacitor.setter
    def capacitor(self, value: Union[AnyStr, Capacitor]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(3, value)
            return

        self._set_batch_string(3, value)

    @property
    def capacitor_obj(self) -> List[str]:
        """
        DSS property name: capacitor
        DSS property index: 3

        Name of Capacitor element which the CapControl controls. No Default; Must be specified.Do not specify the full object name; "Capacitor" is assumed for the object class.  Example:

        Capacitor=cap1
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @capacitor_obj.setter
    def capacitor_obj(self, value: Capacitor):
        self._set_batch_string(3, value)

    @property
    def type(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: type
        DSS property index: 4

        {Current | voltage | kvar | PF | time } Control type.  Specify the ONsetting and OFFsetting appropriately with the type of control. (See help for ONsetting)
        """
        return BatchInt32ArrayProxy(self, 4)

    @type.setter
    def type(self, value: Union[AnyStr, int, CapControl.CapControlType, List[AnyStr], List[Union[int, CapControl.CapControlType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(4, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(4, value)

    @property
    def type_str(self) -> str:
        """
        DSS property name: type
        DSS property index: 4

        {Current | voltage | kvar | PF | time } Control type.  Specify the ONsetting and OFFsetting appropriately with the type of control. (See help for ONsetting)
        """
        return self._get_prop_string(4)

    @type_str.setter
    def type_str(self, value: AnyStr):
        self.type = value

    @property
    def PTratio(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: PTratio
        DSS property index: 5

        Ratio of the PT that converts the monitored voltage to the control voltage. Default is 60.  If the capacitor is Wye, the 1st phase line-to-neutral voltage is monitored.  Else, the line-to-line voltage (1st - 2nd phase) is monitored.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @PTratio.setter
    def PTratio(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def CTratio(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: CTratio
        DSS property index: 6

        Ratio of the CT from line amps to control ampere setting for current and kvar control types. 
        """
        return BatchFloat64ArrayProxy(self, 6)

    @CTratio.setter
    def CTratio(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def ONsetting(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ONsetting
        DSS property index: 7

        Value at which the control arms to switch the capacitor ON (or ratchet up a step).  

        Type of Control:

        Current: Line Amps / CTratio
        Voltage: Line-Neutral (or Line-Line for delta) Volts / PTratio
        kvar:    Total kvar, all phases (3-phase for pos seq model). This is directional. 
        PF:      Power Factor, Total power in monitored terminal. Negative for Leading. 
        Time:    Hrs from Midnight as a floating point number (decimal). 7:30am would be entered as 7.5.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @ONsetting.setter
    def ONsetting(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def OFFsetting(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: OFFsetting
        DSS property index: 8

        Value at which the control arms to switch the capacitor OFF. (See help for ONsetting)For Time control, is OK to have Off time the next day ( < On time)
        """
        return BatchFloat64ArrayProxy(self, 8)

    @OFFsetting.setter
    def OFFsetting(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def Delay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Delay
        DSS property index: 9

        Time delay, in seconds, from when the control is armed before it sends out the switching command to turn ON.  The control may reset before the action actually occurs. This is used to determine which capacity control will act first. Default is 15.  You may specify any floating point number to achieve a model of whatever condition is necessary.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @Delay.setter
    def Delay(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def VoltOverride(self) -> List[bool]:
        """
        DSS property name: VoltOverride
        DSS property index: 10

        {Yes | No}  Default is No.  Switch to indicate whether VOLTAGE OVERRIDE is to be considered. Vmax and Vmin must be set to reasonable values if this property is Yes.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 10)
        ]
    @VoltOverride.setter
    def VoltOverride(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 10, value)

    @property
    def Vmax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vmax
        DSS property index: 11

        Maximum voltage, in volts.  If the voltage across the capacitor divided by the PTRATIO is greater than this voltage, the capacitor will switch OFF regardless of other control settings. Default is 126 (goes with a PT ratio of 60 for 12.47 kV system).
        """
        return BatchFloat64ArrayProxy(self, 11)

    @Vmax.setter
    def Vmax(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def Vmin(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vmin
        DSS property index: 12

        Minimum voltage, in volts.  If the voltage across the capacitor divided by the PTRATIO is less than this voltage, the capacitor will switch ON regardless of other control settings. Default is 115 (goes with a PT ratio of 60 for 12.47 kV system).
        """
        return BatchFloat64ArrayProxy(self, 12)

    @Vmin.setter
    def Vmin(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def DelayOFF(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DelayOFF
        DSS property index: 13

        Time delay, in seconds, for control to turn OFF when present state is ON. Default is 15.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @DelayOFF.setter
    def DelayOFF(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def DeadTime(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DeadTime
        DSS property index: 14

        Dead time after capacitor is turned OFF before it can be turned back ON. Default is 300 sec.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @DeadTime.setter
    def DeadTime(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def CTPhase(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: CTPhase
        DSS property index: 15

        Number of the phase being monitored for CURRENT control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        return BatchInt32ArrayProxy(self, 15)

    @CTPhase.setter
    def CTPhase(self, value: Union[AnyStr, int, MonitoredPhase, List[AnyStr], List[Union[int, MonitoredPhase]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(15, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(15, value)

    @property
    def CTPhase_str(self) -> str:
        """
        DSS property name: CTPhase
        DSS property index: 15

        Number of the phase being monitored for CURRENT control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        return self._get_prop_string(15)

    @CTPhase_str.setter
    def CTPhase_str(self, value: AnyStr):
        self.CTPhase = value

    @property
    def PTPhase(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: PTPhase
        DSS property index: 16

        Number of the phase being monitored for VOLTAGE control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        return BatchInt32ArrayProxy(self, 16)

    @PTPhase.setter
    def PTPhase(self, value: Union[AnyStr, int, MonitoredPhase, List[AnyStr], List[Union[int, MonitoredPhase]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(16, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(16, value)

    @property
    def PTPhase_str(self) -> str:
        """
        DSS property name: PTPhase
        DSS property index: 16

        Number of the phase being monitored for VOLTAGE control or one of {AVG | MAX | MIN} for all phases. Default=1. If delta or L-L connection, enter the first or the two phases being monitored [1-2, 2-3, 3-1]. Must be less than the number of phases. Does not apply to kvar control which uses all phases by default.
        """
        return self._get_prop_string(16)

    @PTPhase_str.setter
    def PTPhase_str(self, value: AnyStr):
        self.PTPhase = value

    @property
    def VBus(self) -> List[str]:
        """
        DSS property name: VBus
        DSS property index: 17

        Name of bus to use for voltage override function. Default is bus at monitored terminal. Sometimes it is useful to monitor a bus in another location to emulate various DMS control algorithms.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 17) 

    @VBus.setter
    def VBus(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 17, value)

    @property
    def EventLog(self) -> List[bool]:
        """
        DSS property name: EventLog
        DSS property index: 18

        {Yes/True* | No/False} Default is YES for CapControl. Log control actions to Eventlog.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 18)
        ]
    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 18, value)

    @property
    def UserModel(self) -> List[str]:
        """
        DSS property name: UserModel
        DSS property index: 19

        Name of DLL containing user-written CapControl model, overriding the default model.  Set to "none" to negate previous setting. 
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19) 

    @UserModel.setter
    def UserModel(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 19, value)

    @property
    def UserData(self) -> List[str]:
        """
        DSS property name: UserData
        DSS property index: 20

        String (in quotes or parentheses if necessary) that gets passed to the user-written CapControl model Edit function for defining the data required for that model. 
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 20) 

    @UserData.setter
    def UserData(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 20, value)

    @property
    def pctMinkvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctMinkvar
        DSS property index: 21

        For PF control option, min percent of total bank kvar at which control will close capacitor switch. Default = 50.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @pctMinkvar.setter
    def pctMinkvar(self, value):
        self._set_batch_float64_array(21, value)

    def Reset(self, value: bool):
        """
        DSS property name: Reset
        DSS property index: 22

        {Yes | No} If Yes, forces Reset of this CapControl.
        """
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 22, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 23

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 24

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 24)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 24, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 25

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(25, value)

class FaultBatch(DSSBatch):
    _cls_name = 'Fault'
    _obj_cls = Fault
    _cls_idx = 25


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of first bus. Examples:

        bus1=busname
        bus1=busname.1.2.3

        Bus2 automatically defaults to busname.0,0,0 unless it was previously defined. 
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def bus2(self) -> List[str]:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of 2nd bus of the 2-terminal Fault object. Defaults to all phases connected to first bus, node 0, if not specified. (Shunt Wye Connection to ground reference)

        That is, the Fault defaults to a ground fault unless otherwise specified.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus2.setter
    def bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 3

        Number of Phases. Default is 1.
        """
        return BatchInt32ArrayProxy(self, 3)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(3, value)

    @property
    def r(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: r
        DSS property index: 4

        Resistance, each phase, ohms. Default is 0.0001. Assumed to be Mean value if gaussian random mode.Max value if uniform mode.  A Fault is actually a series resistance that defaults to a wye connection to ground on the second terminal.  You may reconnect the 2nd terminal to achieve whatever connection.  Use the Gmatrix property to specify an arbitrary conductance matrix.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @r.setter
    def r(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def pctstddev(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %stddev
        DSS property index: 5

        Percent standard deviation in resistance to assume for Monte Carlo fault (MF) solution mode for GAUSSIAN distribution. Default is 0 (no variation from mean).
        """
        return BatchFloat64ArrayProxy(self, 5)

    @pctstddev.setter
    def pctstddev(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def Gmatrix(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Gmatrix
        DSS property index: 6

        Use this to specify a nodal conductance (G) matrix to represent some arbitrary resistance network. Specify in lower triangle form as usual for DSS matrices.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 6)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Gmatrix.setter
    def Gmatrix(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def ONtime(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ONtime
        DSS property index: 7

        Time (sec) at which the fault is established for time varying simulations. Default is 0.0 (on at the beginning of the simulation)
        """
        return BatchFloat64ArrayProxy(self, 7)

    @ONtime.setter
    def ONtime(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def temporary(self) -> List[bool]:
        """
        DSS property name: temporary
        DSS property index: 8

        {Yes | No} Default is No.  Designate whether the fault is temporary.  For Time-varying simulations, the fault will be removed if the current through the fault drops below the MINAMPS criteria.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 8)
        ]
    @temporary.setter
    def temporary(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 8, value)

    @property
    def MinAmps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: MinAmps
        DSS property index: 9

        Minimum amps that can sustain a temporary fault. Default is 5.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @MinAmps.setter
    def MinAmps(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 10

        Normal rated current.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 11

        Maximum or emerg current.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 12

        Failure rate per year.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 13

        Percent of failures that become permanent.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 14

        Hours to repair.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 15

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 16

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 16)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 16, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 17

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(17, value)

class GeneratorBatch(DSSBatch):
    _cls_name = 'Generator'
    _obj_cls = Generator
    _cls_idx = 26


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this Generator.  Power is evenly divided among phases.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the Generator is connected.  May include specific node specification.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def kv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for Generator. For 2- and 3-phase Generators, specify phase-phase kV. Otherwise, for phases=1 or phases>3, specify actual kV across each branch of the Generator. If wye (star), specify phase-neutral kV. If delta or phase-phase connected, specify phase-phase kV.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kv.setter
    def kv(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def kW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kW
        DSS property index: 4

        Total base kW for the Generator.  A positive value denotes power coming OUT of the element, 
        which is the opposite of a load. This value is modified depending on the dispatch mode. Unaffected by the global load multiplier and growth curves. If you want there to be more generation, you must add more generators or change this value.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kW.setter
    def kW(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def pf(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pf
        DSS property index: 5

        Generator power factor. Default is 0.80. Enter negative for leading powerfactor (when kW and kvar have opposite signs.)
        A positive power factor for a generator signifies that the generator produces vars 
        as is typical for a synchronous generator.  Induction machines would be 
        specified with a negative power factor.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @pf.setter
    def pf(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def kvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvar
        DSS property index: 6

        Specify the base kvar.  Alternative to specifying the power factor.  Side effect:  the power factor value is altered to agree based on present value of kW.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @kvar.setter
    def kvar(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def model(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: model
        DSS property index: 7

        Integer code for the model to use for generation variation with voltage. Valid values are:

        1:Generator injects a constant kW at specified power factor.
        2:Generator is modeled as a constant admittance.
        3:Const kW, constant kV.  Somewhat like a conventional transmission power flow P-V generator.
        4:Const kW, Fixed Q (Q never varies)
        5:Const kW, Fixed Q(as a constant reactance)
        6:Compute load injection from User-written Model.(see usage of Xd, Xdp)
        7:Constant kW, kvar, but current-limited below Vminpu. Approximates a simple inverter. See also Balanced.
        """
        return BatchInt32ArrayProxy(self, 7)

    @model.setter
    def model(self, value):
        self._set_batch_int32_array(7, value)

    @property
    def Vminpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vminpu
        DSS property index: 8

        Default = 0.90.  Minimum per unit voltage for which the Model is assumed to apply. Below this value, the load model reverts to a constant impedance model. For model 7, the current is limited to the value computed for constant power at Vminpu.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @Vminpu.setter
    def Vminpu(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def Vmaxpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vmaxpu
        DSS property index: 9

        Default = 1.10.  Maximum per unit voltage for which the Model is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @Vmaxpu.setter
    def Vmaxpu(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def yearly(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 10

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, a constant value is assumed (no variation). If the generator is assumed to be ON continuously, specify Status=FIXED, or designate a curve that is 1.0 per unit at all times. Set to NONE to reset to no loadahape. Nominally for 8760 simulations.  If there are fewer points in the designated shape than the number of points in the solution, the curve is repeated.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 10)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(10, value)
            return

        self._set_batch_string(10, value)

    @property
    def yearly_obj(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 10

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, a constant value is assumed (no variation). If the generator is assumed to be ON continuously, specify Status=FIXED, or designate a curve that is 1.0 per unit at all times. Set to NONE to reset to no loadahape. Nominally for 8760 simulations.  If there are fewer points in the designated shape than the number of points in the solution, the curve is repeated.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 10)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_batch_string(10, value)

    @property
    def daily(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 11

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  If generator is assumed to be ON continuously, specify Status=FIXED, or designate a Loadshape objectthat is 1.0 perunit for all hours. Set to NONE to reset to no loadahape. 
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(11, value)
            return

        self._set_batch_string(11, value)

    @property
    def daily_obj(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 11

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  If generator is assumed to be ON continuously, specify Status=FIXED, or designate a Loadshape objectthat is 1.0 perunit for all hours. Set to NONE to reset to no loadahape. 
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_batch_string(11, value)

    @property
    def duty(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 12

        Load shape to use for duty cycle dispatch simulations such as for wind generation. Must be previously defined as a Loadshape object. Typically would have time intervals less than 1 hr -- perhaps, in seconds. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 12)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(12, value)
            return

        self._set_batch_string(12, value)

    @property
    def duty_obj(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 12

        Load shape to use for duty cycle dispatch simulations such as for wind generation. Must be previously defined as a Loadshape object. Typically would have time intervals less than 1 hr -- perhaps, in seconds. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 12)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_batch_string(12, value)

    @property
    def dispmode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: dispmode
        DSS property index: 13

        {Default* | Loadlevel | Price } Default = Default. Dispatch mode. In default mode, gen is either always on or follows dispatch curve as specified. Otherwise, the gen comes on when either the global default load level (Loadshape "default") or the price level exceeds the dispatch value.
        """
        return BatchInt32ArrayProxy(self, 13)

    @dispmode.setter
    def dispmode(self, value: Union[AnyStr, int, Generator.GeneratorDispatchMode, List[AnyStr], List[Union[int, Generator.GeneratorDispatchMode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(13, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(13, value)

    @property
    def dispmode_str(self) -> str:
        """
        DSS property name: dispmode
        DSS property index: 13

        {Default* | Loadlevel | Price } Default = Default. Dispatch mode. In default mode, gen is either always on or follows dispatch curve as specified. Otherwise, the gen comes on when either the global default load level (Loadshape "default") or the price level exceeds the dispatch value.
        """
        return self._get_prop_string(13)

    @dispmode_str.setter
    def dispmode_str(self, value: AnyStr):
        self.dispmode = value

    @property
    def dispvalue(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: dispvalue
        DSS property index: 14

        Dispatch value. 
        If = 0.0 (default) then Generator follow dispatch curves, if any. 
        If > 0  then Generator is ON only when either the price signal (in Price dispatch mode) exceeds this value or the active circuit load multiplier * "default" loadshape value * the default yearly growth factor exceeds this value.  Then the generator follows dispatch curves (duty, daily, or yearly), if any (see also Status).
        """
        return BatchFloat64ArrayProxy(self, 14)

    @dispvalue.setter
    def dispvalue(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 15

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return BatchInt32ArrayProxy(self, 15)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(15, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(15, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 15

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return self._get_prop_string(15)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def status(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: status
        DSS property index: 16

        ={Fixed | Variable*}.  If Fixed, then dispatch multipliers do not apply. The generator is alway at full power when it is ON.  Default is Variable  (follows curves).
        """
        return BatchInt32ArrayProxy(self, 16)

    @status.setter
    def status(self, value: Union[AnyStr, int, Generator.GeneratorStatus, List[AnyStr], List[Union[int, Generator.GeneratorStatus]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(16, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(16, value)

    @property
    def status_str(self) -> str:
        """
        DSS property name: status
        DSS property index: 16

        ={Fixed | Variable*}.  If Fixed, then dispatch multipliers do not apply. The generator is alway at full power when it is ON.  Default is Variable  (follows curves).
        """
        return self._get_prop_string(16)

    @status_str.setter
    def status_str(self, value: AnyStr):
        self.status = value

    @property
    def cls(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: class
        DSS property index: 17

        An arbitrary integer number representing the class of Generator so that Generator values may be segregated by class.
        """
        return BatchInt32ArrayProxy(self, 17)

    @cls.setter
    def cls(self, value):
        self._set_batch_int32_array(17, value)

    @property
    def Vpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vpu
        DSS property index: 18

        Per Unit voltage set point for Model = 3  (typical power flow model).  Default is 1.0. 
        """
        return BatchFloat64ArrayProxy(self, 18)

    @Vpu.setter
    def Vpu(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def maxkvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: maxkvar
        DSS property index: 19

        Maximum kvar limit for Model = 3.  Defaults to twice the specified load kvar.  Always reset this if you change PF or kvar properties.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @maxkvar.setter
    def maxkvar(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def minkvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: minkvar
        DSS property index: 20

        Minimum kvar limit for Model = 3. Enter a negative number if generator can absorb vars. Defaults to negative of Maxkvar.  Always reset this if you change PF or kvar properties.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @minkvar.setter
    def minkvar(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def pvfactor(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pvfactor
        DSS property index: 21

        Deceleration factor for P-V generator model (Model=3).  Default is 0.1. If the circuit converges easily, you may want to use a higher number such as 1.0. Use a lower number if solution diverges. Use Debugtrace=yes to create a file that will trace the convergence of a generator model.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @pvfactor.setter
    def pvfactor(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def forceon(self) -> List[bool]:
        """
        DSS property name: forceon
        DSS property index: 22

        {Yes | No}  Forces generator ON despite requirements of other dispatch modes. Stays ON until this property is set to NO, or an internal algorithm cancels the forced ON state.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 22)
        ]
    @forceon.setter
    def forceon(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 22, value)

    @property
    def kVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVA
        DSS property index: 23

        kVA rating of electrical machine. Defaults to 1.2* kW if not specified. Applied to machine or inverter definition for Dynamics mode solutions. 
        """
        return BatchFloat64ArrayProxy(self, 23)

    @kVA.setter
    def kVA(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def MVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: MVA
        DSS property index: 24

        MVA rating of electrical machine.  Alternative to using kVA=.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @MVA.setter
    def MVA(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def Xd(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xd
        DSS property index: 25

        Per unit synchronous reactance of machine. Presently used only for Thevinen impedance for power flow calcs of user models (model=6). Typically use a value 0.4 to 1.0. Default is 1.0
        """
        return BatchFloat64ArrayProxy(self, 25)

    @Xd.setter
    def Xd(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def Xdp(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xdp
        DSS property index: 26

        Per unit transient reactance of the machine.  Used for Dynamics mode and Fault studies.  Default is 0.27.For user models, this value is used for the Thevinen/Norton impedance for Dynamics Mode.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @Xdp.setter
    def Xdp(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def Xdpp(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xdpp
        DSS property index: 27

        Per unit subtransient reactance of the machine.  Used for Harmonics. Default is 0.20.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @Xdpp.setter
    def Xdpp(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def H(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: H
        DSS property index: 28

        Per unit mass constant of the machine.  MW-sec/MVA.  Default is 1.0.
        """
        return BatchFloat64ArrayProxy(self, 28)

    @H.setter
    def H(self, value):
        self._set_batch_float64_array(28, value)

    @property
    def D(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: D
        DSS property index: 29

        Damping constant.  Usual range is 0 to 4. Default is 1.0.  Adjust to get damping
        """
        return BatchFloat64ArrayProxy(self, 29)

    @D.setter
    def D(self, value):
        self._set_batch_float64_array(29, value)

    @property
    def UserModel(self) -> List[str]:
        """
        DSS property name: UserModel
        DSS property index: 30

        Name of DLL containing user-written model, which computes the terminal currents for Dynamics studies, overriding the default model.  Set to "none" to negate previous setting.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 30) 

    @UserModel.setter
    def UserModel(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 30, value)

    @property
    def UserData(self) -> List[str]:
        """
        DSS property name: UserData
        DSS property index: 31

        String (in quotes or parentheses) that gets passed to user-written model for defining the data required for that model.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 31) 

    @UserData.setter
    def UserData(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 31, value)

    @property
    def ShaftModel(self) -> List[str]:
        """
        DSS property name: ShaftModel
        DSS property index: 32

        Name of user-written DLL containing a Shaft model, which models the prime mover and determines the power on the shaft for Dynamics studies. Models additional mass elements other than the single-mass model in the DSS default model. Set to "none" to negate previous setting.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 32) 

    @ShaftModel.setter
    def ShaftModel(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 32, value)

    @property
    def ShaftData(self) -> List[str]:
        """
        DSS property name: ShaftData
        DSS property index: 33

        String (in quotes or parentheses) that gets passed to user-written shaft dynamic model for defining the data for that model.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 33) 

    @ShaftData.setter
    def ShaftData(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 33, value)

    @property
    def DutyStart(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DutyStart
        DSS property index: 34

        Starting time offset [hours] into the duty cycle shape for this generator, defaults to 0
        """
        return BatchFloat64ArrayProxy(self, 34)

    @DutyStart.setter
    def DutyStart(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def debugtrace(self) -> List[bool]:
        """
        DSS property name: debugtrace
        DSS property index: 35

        {Yes | No }  Default is no.  Turn this on to capture the progress of the generator model for each iteration.  Creates a separate file for each generator named "GEN_name.CSV".
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 35)
        ]
    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 35, value)

    @property
    def Balanced(self) -> List[bool]:
        """
        DSS property name: Balanced
        DSS property index: 36

        {Yes | No*} Default is No.  For Model=7, force balanced current only for 3-phase generators. Force zero- and negative-sequence to zero.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 36)
        ]
    @Balanced.setter
    def Balanced(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 36, value)

    @property
    def XRdp(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XRdp
        DSS property index: 37

        Default is 20. X/R ratio for Xdp property for FaultStudy and Dynamic modes.
        """
        return BatchFloat64ArrayProxy(self, 37)

    @XRdp.setter
    def XRdp(self, value):
        self._set_batch_float64_array(37, value)

    @property
    def UseFuel(self) -> List[bool]:
        """
        DSS property name: UseFuel
        DSS property index: 38

        {Yes | *No}. Activates the use of fuel for the operation of the generator. When the fuel level reaches the reserve level, the generator stops until it gets refueled. By default, the generator is connected to a continuous fuel supply, Use this mode to mimic dependency on fuel level for different generation technologies.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 38)
        ]
    @UseFuel.setter
    def UseFuel(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 38, value)

    @property
    def FuelkWh(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: FuelkWh
        DSS property index: 39

        {*0}Is the nominal level of fuel for the generator (kWh). It only applies if UseFuel = Yes/True
        """
        return BatchFloat64ArrayProxy(self, 39)

    @FuelkWh.setter
    def FuelkWh(self, value):
        self._set_batch_float64_array(39, value)

    @property
    def pctFuel(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Fuel
        DSS property index: 40

        It is a number between 0 and 100 representing the current amount of fuel avaiable in percentage of FuelkWh. It only applies if UseFuel = Yes/True
        """
        return BatchFloat64ArrayProxy(self, 40)

    @pctFuel.setter
    def pctFuel(self, value):
        self._set_batch_float64_array(40, value)

    @property
    def pctReserve(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Reserve
        DSS property index: 41

        It is a number between 0 and 100 representing the reserve level in percentage of FuelkWh. It only applies if UseFuel = Yes/True
        """
        return BatchFloat64ArrayProxy(self, 41)

    @pctReserve.setter
    def pctReserve(self, value):
        self._set_batch_float64_array(41, value)

    def Refuel(self, value: bool):
        """
        DSS property name: Refuel
        DSS property index: 42

        It is a boolean value (Yes/True, No/False) that can be used to manually refuel the generator when needed. It only applies if UseFuel = Yes/True
        """
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 42, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 43

        Name of harmonic voltage or current spectrum for this generator. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 43)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(43, value)
            return

        self._set_batch_string(43, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 43

        Name of harmonic voltage or current spectrum for this generator. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 43)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(43, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 44

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 44)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(44, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 45

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 45)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 45, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 46

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(46, value)

class GenDispatcherBatch(DSSBatch):
    _cls_name = 'GenDispatcher'
    _obj_cls = GenDispatcher
    _cls_idx = 27


    @property
    def Element(self) -> List[str]:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @Element.setter
    def Element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def Element_obj(self) -> List[str]:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @Element_obj.setter
    def Element_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def Terminal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the GenDispatcher control is connected. 1 or 2, typically.  Default is 1. Make sure you have the direction on the power matching the sign of kWLimit.
        """
        return BatchInt32ArrayProxy(self, 2)

    @Terminal.setter
    def Terminal(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def kWLimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWLimit
        DSS property index: 3

        kW Limit for the monitored element. The generators are dispatched to hold the power in band.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kWLimit.setter
    def kWLimit(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def kWBand(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWBand
        DSS property index: 4

        Bandwidth (kW) of the dead band around the target limit.No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kWBand.setter
    def kWBand(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def kvarlimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvarlimit
        DSS property index: 5

        Max kvar to be delivered through the element.  Uses same dead band as kW.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kvarlimit.setter
    def kvarlimit(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def GenList(self) -> List[List[str]]:
        """
        DSS property name: GenList
        DSS property index: 6

        Array list of generators to be dispatched.  If not specified, all generators in the circuit are assumed dispatchable.
        """
        return self._get_string_ll(6)

    @GenList.setter
    def GenList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 6, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def Weights(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Weights
        DSS property index: 7

        GenDispatcher.Weights
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Weights.setter
    def Weights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 8

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 9

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 9)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 9, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 10

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(10, value)

class StorageBatch(DSSBatch):
    _cls_name = 'Storage'
    _obj_cls = Storage
    _cls_idx = 28


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this Storage element.  Power is evenly divided among phases.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the Storage element is connected.  May include specific node specification.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def kv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for Storage element. For 2- and 3-phase Storage elements, specify phase-phase kV. Otherwise, specify actual kV across each branch of the Storage element. 

        If wye (star), specify phase-neutral kV. 

        If delta or phase-phase connected, specify phase-phase kV.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kv.setter
    def kv(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 4

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return BatchInt32ArrayProxy(self, 4)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(4, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(4, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 4

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return self._get_prop_string(4)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kW
        DSS property index: 5

        Get/set the requested kW value. Final kW is subjected to the inverter ratings. A positive value denotes power coming OUT of the element, which is the opposite of a Load element. A negative value indicates the Storage element is in Charging state. This value is modified internally depending on the dispatch mode.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kW.setter
    def kW(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def kvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvar
        DSS property index: 6

        Get/set the requested kvar value. Final kvar is subjected to the inverter ratings. Sets inverter to operate in constant kvar mode.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @kvar.setter
    def kvar(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def pf(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pf
        DSS property index: 7

        Get/set the requested PF value. Final PF is subjected to the inverter ratings. Sets inverter to operate in constant PF mode. Nominally, the power factor for discharging (acting as a generator). Default is 1.0. 

        Enter negative for leading power factor (when kW and kvar have opposite signs.)

        A positive power factor signifies kw and kvar at the same direction.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @pf.setter
    def pf(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def kVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVA
        DSS property index: 8

        Indicates the inverter nameplate capability (in kVA). Used as the base for Dynamics mode and Harmonics mode values.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @kVA.setter
    def kVA(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def pctCutin(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Cutin
        DSS property index: 9

        Cut-in power as a percentage of inverter kVA rating. It is the minimum DC power necessary to turn the inverter ON when it is OFF. Must be greater than or equal to %CutOut. Defaults to 2 for PVSystems and 0 for Storage elements which means that the inverter state will be always ON for this element.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @pctCutin.setter
    def pctCutin(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def pctCutout(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Cutout
        DSS property index: 10

        Cut-out power as a percentage of inverter kVA rating. It is the minimum DC power necessary to keep the inverter ON. Must be less than or equal to %CutIn. Defaults to 0, which means that, once ON, the inverter state will be always ON for this element.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @pctCutout.setter
    def pctCutout(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def EffCurve(self) -> List[str]:
        """
        DSS property name: EffCurve
        DSS property index: 11

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Power at the AC side of the inverter is discounted by the multiplier obtained from this curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @EffCurve.setter
    def EffCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(11, value)
            return

        self._set_batch_string(11, value)

    @property
    def EffCurve_obj(self) -> List[str]:
        """
        DSS property name: EffCurve
        DSS property index: 11

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Power at the AC side of the inverter is discounted by the multiplier obtained from this curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @EffCurve_obj.setter
    def EffCurve_obj(self, value: XYcurve):
        self._set_batch_string(11, value)

    @property
    def VarFollowInverter(self) -> List[bool]:
        """
        DSS property name: VarFollowInverter
        DSS property index: 12

        Boolean variable (Yes|No) or (True|False). Defaults to False, which indicates that the reactive power generation/absorption does not respect the inverter status.When set to True, the reactive power generation/absorption will cease when the inverter status is off, due to DC kW dropping below %CutOut.  The reactive power generation/absorption will begin again when the DC kW is above %CutIn.  When set to False, the Storage will generate/absorb reactive power regardless of the status of the inverter.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 12)
        ]
    @VarFollowInverter.setter
    def VarFollowInverter(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 12, value)

    @property
    def kvarMax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvarMax
        DSS property index: 13

        Indicates the maximum reactive power GENERATION (un-signed numerical variable in kvar) for the inverter. Defaults to kVA rating of the inverter.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @kvarMax.setter
    def kvarMax(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def kvarMaxAbs(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvarMaxAbs
        DSS property index: 14

        Indicates the maximum reactive power ABSORPTION (un-signed numerical variable in kvar) for the inverter. Defaults to kvarMax.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @kvarMaxAbs.setter
    def kvarMaxAbs(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def WattPriority(self) -> List[bool]:
        """
        DSS property name: WattPriority
        DSS property index: 15

        {Yes/No*/True/False} Set inverter to watt priority instead of the default var priority.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 15)
        ]
    @WattPriority.setter
    def WattPriority(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 15, value)

    @property
    def PFPriority(self) -> List[bool]:
        """
        DSS property name: PFPriority
        DSS property index: 16

        If set to true, priority is given to power factor and WattPriority is neglected. It works only if operating in either constant PF or constant kvar modes. Defaults to False.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 16)
        ]
    @PFPriority.setter
    def PFPriority(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 16, value)

    @property
    def pctPminNoVars(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %PminNoVars
        DSS property index: 17

        Minimum active power as percentage of kWrated under which there is no vars production/absorption. Defaults to 0 (disabled).
        """
        return BatchFloat64ArrayProxy(self, 17)

    @pctPminNoVars.setter
    def pctPminNoVars(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def pctPminkvarMax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %PminkvarMax
        DSS property index: 18

        Minimum active power as percentage of kWrated that allows the inverter to produce/absorb reactive power up to its maximum reactive power, which can be either kvarMax or kvarMaxAbs, depending on the current operation quadrant. Defaults to 0 (disabled).
        """
        return BatchFloat64ArrayProxy(self, 18)

    @pctPminkvarMax.setter
    def pctPminkvarMax(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def kWrated(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWrated
        DSS property index: 19

        kW rating of power output. Base for Loadshapes when DispMode=Follow. Sets kVA property if it has not been specified yet. Defaults to 25.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @kWrated.setter
    def kWrated(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def pctkWrated(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %kWrated
        DSS property index: 20

        Upper limit on active power as a percentage of kWrated. Defaults to 100 (disabled).
        """
        return BatchFloat64ArrayProxy(self, 20)

    @pctkWrated.setter
    def pctkWrated(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def kWhrated(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWhrated
        DSS property index: 21

        Rated Storage capacity in kWh. Default is 50.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @kWhrated.setter
    def kWhrated(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def kWhstored(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWhstored
        DSS property index: 22

        Present amount of energy stored, kWh. Default is same as kWhrated.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @kWhstored.setter
    def kWhstored(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def pctstored(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %stored
        DSS property index: 23

        Present amount of energy stored, % of rated kWh. Default is 100.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @pctstored.setter
    def pctstored(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def pctreserve(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %reserve
        DSS property index: 24

        Percentage of rated kWh Storage capacity to be held in reserve for normal operation. Default = 20. 
        This is treated as the minimum energy discharge level unless there is an emergency. For emergency operation set this property lower. Cannot be less than zero.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @pctreserve.setter
    def pctreserve(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def State(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: State
        DSS property index: 25

        {IDLING | CHARGING | DISCHARGING}  Get/Set present operational state. In DISCHARGING mode, the Storage element acts as a generator and the kW property is positive. The element continues discharging at the scheduled output power level until the Storage reaches the reserve value. Then the state reverts to IDLING. In the CHARGING state, the Storage element behaves like a Load and the kW property is negative. The element continues to charge until the max Storage kWh is reached and then switches to IDLING state. In IDLING state, the element draws the idling losses plus the associated inverter losses.
        """
        return BatchInt32ArrayProxy(self, 25)

    @State.setter
    def State(self, value: Union[AnyStr, int, Storage.StorageState, List[AnyStr], List[Union[int, Storage.StorageState]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(25, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(25, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 25

        {IDLING | CHARGING | DISCHARGING}  Get/Set present operational state. In DISCHARGING mode, the Storage element acts as a generator and the kW property is positive. The element continues discharging at the scheduled output power level until the Storage reaches the reserve value. Then the state reverts to IDLING. In the CHARGING state, the Storage element behaves like a Load and the kW property is negative. The element continues to charge until the max Storage kWh is reached and then switches to IDLING state. In IDLING state, the element draws the idling losses plus the associated inverter losses.
        """
        return self._get_prop_string(25)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def pctDischarge(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Discharge
        DSS property index: 26

        Discharge rate (output power) in percentage of rated kW. Default = 100.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @pctDischarge.setter
    def pctDischarge(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def pctCharge(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Charge
        DSS property index: 27

        Charging rate (input power) in percentage of rated kW. Default = 100.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @pctCharge.setter
    def pctCharge(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def pctEffCharge(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %EffCharge
        DSS property index: 28

        Percentage efficiency for CHARGING the Storage element. Default = 90.
        """
        return BatchFloat64ArrayProxy(self, 28)

    @pctEffCharge.setter
    def pctEffCharge(self, value):
        self._set_batch_float64_array(28, value)

    @property
    def pctEffDischarge(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %EffDischarge
        DSS property index: 29

        Percentage efficiency for DISCHARGING the Storage element. Default = 90.
        """
        return BatchFloat64ArrayProxy(self, 29)

    @pctEffDischarge.setter
    def pctEffDischarge(self, value):
        self._set_batch_float64_array(29, value)

    @property
    def pctIdlingkW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %IdlingkW
        DSS property index: 30

        Percentage of rated kW consumed by idling losses. Default = 1.
        """
        return BatchFloat64ArrayProxy(self, 30)

    @pctIdlingkW.setter
    def pctIdlingkW(self, value):
        self._set_batch_float64_array(30, value)

    @property
    def pctR(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %R
        DSS property index: 31

        Equivalent percentage internal resistance, ohms. Default is 0. Placed in series with internal voltage source for harmonics and dynamics modes. Use a combination of %IdlingkW, %EffCharge and %EffDischarge to account for losses in power flow modes.
        """
        return BatchFloat64ArrayProxy(self, 31)

    @pctR.setter
    def pctR(self, value):
        self._set_batch_float64_array(31, value)

    @property
    def pctX(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %X
        DSS property index: 32

        Equivalent percentage internal reactance, ohms. Default is 50%. Placed in series with internal voltage source for harmonics and dynamics modes. (Limits fault current to 2 pu.
        """
        return BatchFloat64ArrayProxy(self, 32)

    @pctX.setter
    def pctX(self, value):
        self._set_batch_float64_array(32, value)

    @property
    def model(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: model
        DSS property index: 33

        Integer code (default=1) for the model to be used for power output variation with voltage. Valid values are:

        1:Storage element injects/absorbs a CONSTANT power.
        2:Storage element is modeled as a CONSTANT IMPEDANCE.
        3:Compute load injection from User-written Model.
        """
        return BatchInt32ArrayProxy(self, 33)

    @model.setter
    def model(self, value):
        self._set_batch_int32_array(33, value)

    @property
    def Vminpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vminpu
        DSS property index: 34

        Default = 0.90.  Minimum per unit voltage for which the Model is assumed to apply. Below this value, the load model reverts to a constant impedance model.
        """
        return BatchFloat64ArrayProxy(self, 34)

    @Vminpu.setter
    def Vminpu(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def Vmaxpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vmaxpu
        DSS property index: 35

        Default = 1.10.  Maximum per unit voltage for which the Model is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return BatchFloat64ArrayProxy(self, 35)

    @Vmaxpu.setter
    def Vmaxpu(self, value):
        self._set_batch_float64_array(35, value)

    @property
    def Balanced(self) -> List[bool]:
        """
        DSS property name: Balanced
        DSS property index: 36

        {Yes | No*} Default is No. Force balanced current only for 3-phase Storage. Forces zero- and negative-sequence to zero. 
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 36)
        ]
    @Balanced.setter
    def Balanced(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 36, value)

    @property
    def LimitCurrent(self) -> List[bool]:
        """
        DSS property name: LimitCurrent
        DSS property index: 37

        Limits current magnitude to Vminpu value for both 1-phase and 3-phase Storage similar to Generator Model 7. For 3-phase, limits the positive-sequence current but not the negative-sequence.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 37)
        ]
    @LimitCurrent.setter
    def LimitCurrent(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 37, value)

    @property
    def yearly(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 38

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 38)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(38, value)
            return

        self._set_batch_string(38, value)

    @property
    def yearly_obj(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 38

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 38)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_batch_string(38, value)

    @property
    def daily(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 39

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 39)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(39, value)
            return

        self._set_batch_string(39, value)

    @property
    def daily_obj(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 39

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the Storage element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 39)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_batch_string(39, value)

    @property
    def duty(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 40

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. 

        Typically would have time intervals of 1-5 seconds. 

        Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 40)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(40, value)
            return

        self._set_batch_string(40, value)

    @property
    def duty_obj(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 40

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. 

        Typically would have time intervals of 1-5 seconds. 

        Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 40)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_batch_string(40, value)

    @property
    def DispMode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: DispMode
        DSS property index: 41

        {DEFAULT | FOLLOW | EXTERNAL | LOADLEVEL | PRICE } Default = "DEFAULT". Dispatch mode. 

        In DEFAULT mode, Storage element state is triggered to discharge or charge at the specified rate by the loadshape curve corresponding to the solution mode. 

        In FOLLOW mode the kW output of the Storage element follows the active loadshape multiplier until Storage is either exhausted or full. The element discharges for positive values and charges for negative values.  The loadshape is based on rated kW. 

        In EXTERNAL mode, Storage element state is controlled by an external Storagecontroller2. This mode is automatically set if this Storage element is included in the element list of a StorageController element. 

        For the other two dispatch modes, the Storage element state is controlled by either the global default Loadlevel value or the price level. 
        """
        return BatchInt32ArrayProxy(self, 41)

    @DispMode.setter
    def DispMode(self, value: Union[AnyStr, int, Storage.StorageDispatchMode, List[AnyStr], List[Union[int, Storage.StorageDispatchMode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(41, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(41, value)

    @property
    def DispMode_str(self) -> str:
        """
        DSS property name: DispMode
        DSS property index: 41

        {DEFAULT | FOLLOW | EXTERNAL | LOADLEVEL | PRICE } Default = "DEFAULT". Dispatch mode. 

        In DEFAULT mode, Storage element state is triggered to discharge or charge at the specified rate by the loadshape curve corresponding to the solution mode. 

        In FOLLOW mode the kW output of the Storage element follows the active loadshape multiplier until Storage is either exhausted or full. The element discharges for positive values and charges for negative values.  The loadshape is based on rated kW. 

        In EXTERNAL mode, Storage element state is controlled by an external Storagecontroller2. This mode is automatically set if this Storage element is included in the element list of a StorageController element. 

        For the other two dispatch modes, the Storage element state is controlled by either the global default Loadlevel value or the price level. 
        """
        return self._get_prop_string(41)

    @DispMode_str.setter
    def DispMode_str(self, value: AnyStr):
        self.DispMode = value

    @property
    def DischargeTrigger(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DischargeTrigger
        DSS property index: 42

        Dispatch trigger value for discharging the Storage. 
        If = 0.0 the Storage element state is changed by the State command or by a StorageController2 object. 
        If <> 0  the Storage element state is set to DISCHARGING when this trigger level is EXCEEDED by either the specified Loadshape curve value or the price signal or global Loadlevel value, depending on dispatch mode. See State property.
        """
        return BatchFloat64ArrayProxy(self, 42)

    @DischargeTrigger.setter
    def DischargeTrigger(self, value):
        self._set_batch_float64_array(42, value)

    @property
    def ChargeTrigger(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ChargeTrigger
        DSS property index: 43

        Dispatch trigger value for charging the Storage. 

        If = 0.0 the Storage element state is changed by the State command or StorageController2 object.  

        If <> 0  the Storage element state is set to CHARGING when this trigger level is GREATER than either the specified Loadshape curve value or the price signal or global Loadlevel value, depending on dispatch mode. See State property.
        """
        return BatchFloat64ArrayProxy(self, 43)

    @ChargeTrigger.setter
    def ChargeTrigger(self, value):
        self._set_batch_float64_array(43, value)

    @property
    def TimeChargeTrig(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TimeChargeTrig
        DSS property index: 44

        Time of day in fractional hours (0230 = 2.5) at which Storage element will automatically go into charge state. Default is 2.0.  Enter a negative time value to disable this feature.
        """
        return BatchFloat64ArrayProxy(self, 44)

    @TimeChargeTrig.setter
    def TimeChargeTrig(self, value):
        self._set_batch_float64_array(44, value)

    @property
    def cls(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: class
        DSS property index: 45

        An arbitrary integer number representing the class of Storage element so that Storage values may be segregated by class.
        """
        return BatchInt32ArrayProxy(self, 45)

    @cls.setter
    def cls(self, value):
        self._set_batch_int32_array(45, value)

    @property
    def DynaDLL(self) -> List[str]:
        """
        DSS property name: DynaDLL
        DSS property index: 46

        Name of DLL containing user-written dynamics model, which computes the terminal currents for Dynamics-mode simulations, overriding the default model.  Set to "none" to negate previous setting. This DLL has a simpler interface than the UserModel DLL and is only used for Dynamics mode.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 46) 

    @DynaDLL.setter
    def DynaDLL(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 46, value)

    @property
    def DynaData(self) -> List[str]:
        """
        DSS property name: DynaData
        DSS property index: 47

        String (in quotes or parentheses if necessary) that gets passed to the user-written dynamics model Edit function for defining the data required for that model.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 47) 

    @DynaData.setter
    def DynaData(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 47, value)

    @property
    def UserModel(self) -> List[str]:
        """
        DSS property name: UserModel
        DSS property index: 48

        Name of DLL containing user-written model, which computes the terminal currents for both power flow and dynamics, overriding the default model.  Set to "none" to negate previous setting.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 48) 

    @UserModel.setter
    def UserModel(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 48, value)

    @property
    def UserData(self) -> List[str]:
        """
        DSS property name: UserData
        DSS property index: 49

        String (in quotes or parentheses) that gets passed to user-written model for defining the data required for that model.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 49) 

    @UserData.setter
    def UserData(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 49, value)

    @property
    def debugtrace(self) -> List[bool]:
        """
        DSS property name: debugtrace
        DSS property index: 50

        {Yes | No }  Default is no.  Turn this on to capture the progress of the Storage model for each iteration.  Creates a separate file for each Storage element named "Storage_name.CSV".
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 50)
        ]
    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 50, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 51

        Name of harmonic voltage or current spectrum for this Storage element. Current injection is assumed for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 51)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(51, value)
            return

        self._set_batch_string(51, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 51

        Name of harmonic voltage or current spectrum for this Storage element. Current injection is assumed for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 51)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(51, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 52

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 52)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(52, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 53

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 53)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 53, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 54

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(54, value)

class StorageControllerBatch(DSSBatch):
    _cls_name = 'StorageController'
    _obj_cls = StorageController
    _cls_idx = 29


    @property
    def Element(self) -> List[str]:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; Must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @Element.setter
    def Element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def Element_obj(self) -> List[str]:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; Must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @Element_obj.setter
    def Element_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def Terminal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the StorageController2 control is connected. 1 or 2, typically.  Default is 1. Make sure to select the proper direction on the power for the respective dispatch mode.
        """
        return BatchInt32ArrayProxy(self, 2)

    @Terminal.setter
    def Terminal(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def MonPhase(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: MonPhase
        DSS property index: 3

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=MAX. Must be less than the number of phases. Used in PeakShave, Follow, Support and I-PeakShave discharging modes and in PeakShaveLow, I-PeakShaveLow charging modes. For modes based on active power measurements, the value used by the control is the monitored one multiplied by the number of phases of the monitored element.
        """
        return BatchInt32ArrayProxy(self, 3)

    @MonPhase.setter
    def MonPhase(self, value: Union[AnyStr, int, MonitoredPhase, List[AnyStr], List[Union[int, MonitoredPhase]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(3, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(3, value)

    @property
    def MonPhase_str(self) -> str:
        """
        DSS property name: MonPhase
        DSS property index: 3

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=MAX. Must be less than the number of phases. Used in PeakShave, Follow, Support and I-PeakShave discharging modes and in PeakShaveLow, I-PeakShaveLow charging modes. For modes based on active power measurements, the value used by the control is the monitored one multiplied by the number of phases of the monitored element.
        """
        return self._get_prop_string(3)

    @MonPhase_str.setter
    def MonPhase_str(self, value: AnyStr):
        self.MonPhase = value

    @property
    def kWTarget(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWTarget
        DSS property index: 4

        kW/kamps target for Discharging. The Storage element fleet is dispatched to try to hold the power/current in band at least until the Storage is depleted. The selection of power or current depends on the Discharge mode (PeakShave->kW, I-PeakShave->kamps).
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kWTarget.setter
    def kWTarget(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def kWTargetLow(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWTargetLow
        DSS property index: 5

        kW/kamps target for Charging. The Storage element fleet is dispatched to try to hold the power/current in band at least until the Storage is fully charged. The selection of power or current depends on the charge mode (PeakShavelow->kW, I-PeakShavelow->kamps).
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kWTargetLow.setter
    def kWTargetLow(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def pctkWBand(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %kWBand
        DSS property index: 6

        Bandwidth (% of Target kW/kamps) of the dead band around the kW/kamps target value. Default is 2% (+/-1%).No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @pctkWBand.setter
    def pctkWBand(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def kWBand(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWBand
        DSS property index: 7

        Alternative way of specifying the bandwidth. (kW/kamps) of the dead band around the kW/kamps target value. Default is 2% of kWTarget (+/-1%).No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @kWBand.setter
    def kWBand(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def pctkWBandLow(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %kWBandLow
        DSS property index: 8

        Bandwidth (% of kWTargetLow) of the dead band around the kW/kamps low target value. Default is 2% (+/-1%).No charging is attempted if the power in the monitored terminal stays within this band.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @pctkWBandLow.setter
    def pctkWBandLow(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def kWBandLow(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWBandLow
        DSS property index: 9

        Alternative way of specifying the bandwidth. (kW/kamps) of the dead band around the kW/kamps low target value. Default is 2% of kWTargetLow (+/-1%).No charging is attempted if the power in the monitored terminal stays within this band.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @kWBandLow.setter
    def kWBandLow(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def ElementList(self) -> List[List[str]]:
        """
        DSS property name: ElementList
        DSS property index: 10

        Array list of Storage elements to be controlled.  If not specified, all Storage elements in the circuit not presently dispatched by another controller are assumed dispatched by this controller.
        """
        return self._get_string_ll(10)

    @ElementList.setter
    def ElementList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 10, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def Weights(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Weights
        DSS property index: 11

        Array of proportional weights corresponding to each Storage element in the ElementList. The needed kW or kvar to get back to center band is dispatched to each Storage element according to these weights. Default is to set all weights to 1.0.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 11)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Weights.setter
    def Weights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def ModeDischarge(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: ModeDischarge
        DSS property index: 12

        {PeakShave* | Follow | Support | Loadshape | Time | Schedule | I-PeakShave} Mode of operation for the DISCHARGE FUNCTION of this controller. 

        In PeakShave mode (Default), the control attempts to discharge Storage to keep power in the monitored element below the kWTarget. 

        In Follow mode, the control is triggered by time and resets the kWTarget value to the present monitored element power. It then attempts to discharge Storage to keep power in the monitored element below the new kWTarget. See TimeDischargeTrigger.

        In Support mode, the control operates oppositely of PeakShave mode: Storage is discharged to keep kW power output up near the target. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is discharged when the loadshape value is positive. 

        In Time mode, the Storage discharge is turned on at the specified %RatekW at the specified discharge trigger time in fractional hours.

        In Schedule mode, the Tup, TFlat, and Tdn properties specify the up ramp duration, flat duration, and down ramp duration for the schedule. The schedule start time is set by TimeDischargeTrigger and the rate of discharge for the flat part is determined by %RatekW.

        In I-PeakShave mode, the control attempts to discharge Storage to keep current in the monitored element below the target given in k-amps (thousands of amps), when this control mode is active, the property kWTarget will be expressed in k-amps. 
        """
        return BatchInt32ArrayProxy(self, 12)

    @ModeDischarge.setter
    def ModeDischarge(self, value: Union[AnyStr, int, StorageController.StorageControllerDischargemode, List[AnyStr], List[Union[int, StorageController.StorageControllerDischargemode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(12, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(12, value)

    @property
    def ModeDischarge_str(self) -> str:
        """
        DSS property name: ModeDischarge
        DSS property index: 12

        {PeakShave* | Follow | Support | Loadshape | Time | Schedule | I-PeakShave} Mode of operation for the DISCHARGE FUNCTION of this controller. 

        In PeakShave mode (Default), the control attempts to discharge Storage to keep power in the monitored element below the kWTarget. 

        In Follow mode, the control is triggered by time and resets the kWTarget value to the present monitored element power. It then attempts to discharge Storage to keep power in the monitored element below the new kWTarget. See TimeDischargeTrigger.

        In Support mode, the control operates oppositely of PeakShave mode: Storage is discharged to keep kW power output up near the target. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is discharged when the loadshape value is positive. 

        In Time mode, the Storage discharge is turned on at the specified %RatekW at the specified discharge trigger time in fractional hours.

        In Schedule mode, the Tup, TFlat, and Tdn properties specify the up ramp duration, flat duration, and down ramp duration for the schedule. The schedule start time is set by TimeDischargeTrigger and the rate of discharge for the flat part is determined by %RatekW.

        In I-PeakShave mode, the control attempts to discharge Storage to keep current in the monitored element below the target given in k-amps (thousands of amps), when this control mode is active, the property kWTarget will be expressed in k-amps. 
        """
        return self._get_prop_string(12)

    @ModeDischarge_str.setter
    def ModeDischarge_str(self, value: AnyStr):
        self.ModeDischarge = value

    @property
    def ModeCharge(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: ModeCharge
        DSS property index: 13

        {Loadshape | Time* | PeakShaveLow | I-PeakShaveLow} Mode of operation for the CHARGE FUNCTION of this controller. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is charged when the loadshape value is negative. 

        In Time mode, the Storage charging FUNCTION is triggered at the specified %RateCharge at the specified charge trigger time in fractional hours.

        In PeakShaveLow mode, the charging operation will charge the Storage fleet when the power at amonitored element is below a specified KW target (kWTarget_low). The Storage will charge as much power as necessary to keep the power within the deadband around kWTarget_low.

        In I-PeakShaveLow mode, the charging operation will charge the Storage fleet when the current (Amps) at amonitored element is below a specified amps target (kWTarget_low). The Storage will charge as much power as necessary to keep the amps within the deadband around kWTarget_low. When this control mode is active, the property kWTarget_low will be expressed in k-amps and all the other parameters will be adjusted to match the amps (current) control criteria.
        """
        return BatchInt32ArrayProxy(self, 13)

    @ModeCharge.setter
    def ModeCharge(self, value: Union[AnyStr, int, StorageController.StorageControllerChargemode, List[AnyStr], List[Union[int, StorageController.StorageControllerChargemode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(13, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(13, value)

    @property
    def ModeCharge_str(self) -> str:
        """
        DSS property name: ModeCharge
        DSS property index: 13

        {Loadshape | Time* | PeakShaveLow | I-PeakShaveLow} Mode of operation for the CHARGE FUNCTION of this controller. 

        In Loadshape mode, both charging and discharging precisely follows the per unit loadshape. Storage is charged when the loadshape value is negative. 

        In Time mode, the Storage charging FUNCTION is triggered at the specified %RateCharge at the specified charge trigger time in fractional hours.

        In PeakShaveLow mode, the charging operation will charge the Storage fleet when the power at amonitored element is below a specified KW target (kWTarget_low). The Storage will charge as much power as necessary to keep the power within the deadband around kWTarget_low.

        In I-PeakShaveLow mode, the charging operation will charge the Storage fleet when the current (Amps) at amonitored element is below a specified amps target (kWTarget_low). The Storage will charge as much power as necessary to keep the amps within the deadband around kWTarget_low. When this control mode is active, the property kWTarget_low will be expressed in k-amps and all the other parameters will be adjusted to match the amps (current) control criteria.
        """
        return self._get_prop_string(13)

    @ModeCharge_str.setter
    def ModeCharge_str(self, value: AnyStr):
        self.ModeCharge = value

    @property
    def TimeDischargeTrigger(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TimeDischargeTrigger
        DSS property index: 14

        Default time of day (hr) for initiating Discharging of the fleet. During Follow or Time mode discharging is triggered at a fixed time each day at this hour. If Follow mode, Storage will be discharged to attempt to hold the load at or below the power level at the time of triggering. In Time mode, the discharge is based on the %RatekW property value. Set this to a negative value to ignore. Default is 12.0 for Follow mode; otherwise it is -1 (ignored). 
        """
        return BatchFloat64ArrayProxy(self, 14)

    @TimeDischargeTrigger.setter
    def TimeDischargeTrigger(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def TimeChargeTrigger(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TimeChargeTrigger
        DSS property index: 15

        Default time of day (hr) for initiating charging in Time control mode. Set this to a negative value to ignore. Default is 2.0.  (0200).When this value is >0 the Storage fleet is set to charging at this time regardless of other control criteria to make sure Storage is topped off for the next discharge cycle.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @TimeChargeTrigger.setter
    def TimeChargeTrigger(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def pctRatekW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %RatekW
        DSS property index: 16

        Sets the kW discharge rate in % of rated capacity for each element of the fleet. Applies to TIME control mode, SCHEDULE mode, or anytime discharging is triggered by time.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @pctRatekW.setter
    def pctRatekW(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def pctRateCharge(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %RateCharge
        DSS property index: 17

        Sets the kW charging rate in % of rated capacity for each element of the fleet. Applies to TIME control mode and anytime charging mode is entered due to a time trigger.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @pctRateCharge.setter
    def pctRateCharge(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def pctReserve(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Reserve
        DSS property index: 18

        Use this property to change the % reserve for each Storage element under control of this controller. This might be used, for example, to allow deeper discharges of Storage or in case of emergency operation to use the remainder of the Storage element.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @pctReserve.setter
    def pctReserve(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def kWhTotal(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWhTotal
        DSS property index: 19

        (Read only). Total rated kWh energy Storage capacity of Storage elements controlled by this controller.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @kWhTotal.setter
    def kWhTotal(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def kWTotal(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWTotal
        DSS property index: 20

        (Read only). Total rated kW power capacity of Storage elements controlled by this controller.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @kWTotal.setter
    def kWTotal(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def kWhActual(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWhActual
        DSS property index: 21

        (Read only). Actual kWh stored of all controlled Storage elements. 
        """
        return BatchFloat64ArrayProxy(self, 21)

    @kWhActual.setter
    def kWhActual(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def kWActual(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWActual
        DSS property index: 22

        (Read only). Actual kW output of all controlled Storage elements. 
        """
        return BatchFloat64ArrayProxy(self, 22)

    @kWActual.setter
    def kWActual(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def kWneed(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWneed
        DSS property index: 23

        (Read only). KW needed to meet target.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @kWneed.setter
    def kWneed(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def Yearly(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 24

        Dispatch loadshape object, If any, for Yearly solution Mode.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 24)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(24, value)
            return

        self._set_batch_string(24, value)

    @property
    def Yearly_obj(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 24

        Dispatch loadshape object, If any, for Yearly solution Mode.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 24)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_batch_string(24, value)

    @property
    def Daily(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 25

        Dispatch loadshape object, If any, for Daily solution mode.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 25)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(25, value)
            return

        self._set_batch_string(25, value)

    @property
    def Daily_obj(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 25

        Dispatch loadshape object, If any, for Daily solution mode.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 25)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_batch_string(25, value)

    @property
    def Duty(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 26

        Dispatch loadshape object, If any, for Dutycycle solution mode.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 26)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(26, value)
            return

        self._set_batch_string(26, value)

    @property
    def Duty_obj(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 26

        Dispatch loadshape object, If any, for Dutycycle solution mode.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 26)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_batch_string(26, value)

    @property
    def EventLog(self) -> List[bool]:
        """
        DSS property name: EventLog
        DSS property index: 27

        {Yes/True | No/False} Default is No. Log control actions to Eventlog.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 27)
        ]
    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 27, value)

    @property
    def InhibitTime(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: InhibitTime
        DSS property index: 28

        Hours (integer) to inhibit Discharging after going into Charge mode. Default is 5.
        """
        return BatchInt32ArrayProxy(self, 28)

    @InhibitTime.setter
    def InhibitTime(self, value):
        self._set_batch_int32_array(28, value)

    @property
    def Tup(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Tup
        DSS property index: 29

        Duration, hrs, of upramp part for SCHEDULE mode. Default is 0.25.
        """
        return BatchFloat64ArrayProxy(self, 29)

    @Tup.setter
    def Tup(self, value):
        self._set_batch_float64_array(29, value)

    @property
    def TFlat(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TFlat
        DSS property index: 30

        Duration, hrs, of flat part for SCHEDULE mode. Default is 2.0.
        """
        return BatchFloat64ArrayProxy(self, 30)

    @TFlat.setter
    def TFlat(self, value):
        self._set_batch_float64_array(30, value)

    @property
    def Tdn(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Tdn
        DSS property index: 31

        Duration, hrs, of downramp part for SCHEDULE mode. Default is 0.25.
        """
        return BatchFloat64ArrayProxy(self, 31)

    @Tdn.setter
    def Tdn(self, value):
        self._set_batch_float64_array(31, value)

    @property
    def kWThreshold(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWThreshold
        DSS property index: 32

        Threshold, kW, for Follow mode. kW has to be above this value for the Storage element to be dispatched on. Defaults to 75% of the kWTarget value. Must reset this property after setting kWTarget if you want a different value.
        """
        return BatchFloat64ArrayProxy(self, 32)

    @kWThreshold.setter
    def kWThreshold(self, value):
        self._set_batch_float64_array(32, value)

    @property
    def DispFactor(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DispFactor
        DSS property index: 33

        Defaults to 1 (disabled). Set to any value between 0 and 1 to enable this parameter.

        Use this parameter to reduce the amount of power requested by the controller in each control iteration. It can be useful when maximum control iterations are exceeded due to numerical instability such as fleet being set to charging and idling in subsequent control iterations (check the Eventlog). 
        """
        return BatchFloat64ArrayProxy(self, 33)

    @DispFactor.setter
    def DispFactor(self, value):
        self._set_batch_float64_array(33, value)

    @property
    def ResetLevel(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ResetLevel
        DSS property index: 34

        The level of charge required for allowing the storage to discharge again after reaching the reserve storage level. After reaching this level, the storage control  will not allow the storage device to discharge, forcing the storage to charge. Once the storage reaches thislevel, the storage will be able to discharge again. This value is a number between 0.2 and 1
        """
        return BatchFloat64ArrayProxy(self, 34)

    @ResetLevel.setter
    def ResetLevel(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def Seasons(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Seasons
        DSS property index: 35

        With this property the user can specify the number of targets to be used by the controller using the list given at "SeasonTargets"/"SeasonTargetsLow", which can be used to dynamically adjust the storage controller during a QSTS simulation. The default value is 1. This property needs to be defined before defining SeasonTargets/SeasonTargetsLow.
        """
        return BatchInt32ArrayProxy(self, 35)

    @Seasons.setter
    def Seasons(self, value):
        self._set_batch_int32_array(35, value)

    @property
    def SeasonTargets(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: SeasonTargets
        DSS property index: 36

        An array of doubles specifying the targets to be used during a QSTS simulation. These targets will take effect only if SeasonRating=true. The number of targets cannot exceed the number of seasons defined at the SeasonSignal.The difference between the targets defined at SeasonTargets and SeasonTargetsLow is that SeasonTargets applies to discharging modes, while SeasonTargetsLow applies to charging modes.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 36)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @SeasonTargets.setter
    def SeasonTargets(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(36, value)

    @property
    def SeasonTargetsLow(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: SeasonTargetsLow
        DSS property index: 37

        An array of doubles specifying the targets to be used during a QSTS simulation. These targets will take effect only if SeasonRating=true. The number of targets cannot exceed the number of seasons defined at the SeasonSignal.The difference between the targets defined at SeasonTargets and SeasonTargetsLow is that SeasonTargets applies to discharging modes, while SeasonTargetsLow applies to charging modes.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 37)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @SeasonTargetsLow.setter
    def SeasonTargetsLow(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 38

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 38)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(38, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 39

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 39)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 39, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 40

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(40, value)

class RelayBatch(DSSBatch):
    _cls_name = 'Relay'
    _obj_cls = Relay
    _cls_idx = 30


    @property
    def MonitoredObj(self) -> List[str]:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the relay's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @MonitoredObj.setter
    def MonitoredObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def MonitoredObj_obj(self) -> List[str]:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the relay's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @MonitoredObj_obj.setter
    def MonitoredObj_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def MonitoredTerm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: MonitoredTerm
        DSS property index: 2

        Number of the terminal of the circuit element to which the Relay is connected. 1 or 2, typically.  Default is 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @MonitoredTerm.setter
    def MonitoredTerm(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def SwitchedObj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Relay controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(3, value)
            return

        self._set_batch_string(3, value)

    @property
    def SwitchedObj_obj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Relay controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_batch_string(3, value)

    @property
    def SwitchedTerm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: SwitchedTerm
        DSS property index: 4

        Number of the terminal of the controlled element in which the switch is controlled by the Relay. 1 or 2, typically.  Default is 1.
        """
        return BatchInt32ArrayProxy(self, 4)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value):
        self._set_batch_int32_array(4, value)

    @property
    def type(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: type
        DSS property index: 5

        One of a legal relay type:
          Current
          Voltage
          Reversepower
          46 (neg seq current)
          47 (neg seq voltage)
          Generic (generic over/under relay)
          Distance
          TD21
          DOC (directional overcurrent)

        Default is overcurrent relay (Current) Specify the curve and pickup settings appropriate for each type. Generic relays monitor PC Element Control variables and trip on out of over/under range in definite time.
        """
        return BatchInt32ArrayProxy(self, 5)

    @type.setter
    def type(self, value: Union[AnyStr, int, Relay.RelayType, List[AnyStr], List[Union[int, Relay.RelayType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(5, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(5, value)

    @property
    def type_str(self) -> str:
        """
        DSS property name: type
        DSS property index: 5

        One of a legal relay type:
          Current
          Voltage
          Reversepower
          46 (neg seq current)
          47 (neg seq voltage)
          Generic (generic over/under relay)
          Distance
          TD21
          DOC (directional overcurrent)

        Default is overcurrent relay (Current) Specify the curve and pickup settings appropriate for each type. Generic relays monitor PC Element Control variables and trip on out of over/under range in definite time.
        """
        return self._get_prop_string(5)

    @type_str.setter
    def type_str(self, value: AnyStr):
        self.type = value

    @property
    def Phasecurve(self) -> List[str]:
        """
        DSS property name: Phasecurve
        DSS property index: 6

        Name of the TCC Curve object that determines the phase trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). For overcurrent relay, multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6)

    @Phasecurve.setter
    def Phasecurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(6, value)
            return

        self._set_batch_string(6, value)

    @property
    def Phasecurve_obj(self) -> List[str]:
        """
        DSS property name: Phasecurve
        DSS property index: 6

        Name of the TCC Curve object that determines the phase trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). For overcurrent relay, multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6)

    @Phasecurve_obj.setter
    def Phasecurve_obj(self, value: TCC_Curve):
        self._set_batch_string(6, value)

    @property
    def Groundcurve(self) -> List[str]:
        """
        DSS property name: Groundcurve
        DSS property index: 7

        Name of the TCC Curve object that determines the ground trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).For overcurrent relay, multiplying the current values in the curve by the "groundtrip" valuw gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @Groundcurve.setter
    def Groundcurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(7, value)
            return

        self._set_batch_string(7, value)

    @property
    def Groundcurve_obj(self) -> List[str]:
        """
        DSS property name: Groundcurve
        DSS property index: 7

        Name of the TCC Curve object that determines the ground trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).For overcurrent relay, multiplying the current values in the curve by the "groundtrip" valuw gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @Groundcurve_obj.setter
    def Groundcurve_obj(self, value: TCC_Curve):
        self._set_batch_string(7, value)

    @property
    def PhaseTrip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: PhaseTrip
        DSS property index: 8

        Multiplier or actual phase amps for the phase TCC curve.  Defaults to 1.0.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @PhaseTrip.setter
    def PhaseTrip(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def GroundTrip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GroundTrip
        DSS property index: 9

        Multiplier or actual ground amps (3I0) for the ground TCC curve.  Defaults to 1.0.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @GroundTrip.setter
    def GroundTrip(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def TDPhase(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TDPhase
        DSS property index: 10

        Time dial for Phase trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @TDPhase.setter
    def TDPhase(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def TDGround(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TDGround
        DSS property index: 11

        Time dial for Ground trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @TDGround.setter
    def TDGround(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def PhaseInst(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: PhaseInst
        DSS property index: 12

        Actual  amps (Current relay) or kW (reverse power relay) for instantaneous phase trip which is assumed to happen in 0.01 sec + Delay Time. Default is 0.0, which signifies no inst trip. Use this value for specifying the Reverse Power threshold (kW) for reverse power relays.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @PhaseInst.setter
    def PhaseInst(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def GroundInst(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GroundInst
        DSS property index: 13

        Actual  amps for instantaneous ground trip which is assumed to happen in 0.01 sec + Delay Time.Default is 0.0, which signifies no inst trip.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @GroundInst.setter
    def GroundInst(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def Reset(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Reset
        DSS property index: 14

        Reset time in sec for relay.  Default is 15. If this much time passes between the last pickup event, and the relay has not locked out, the operation counter resets.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @Reset.setter
    def Reset(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def Shots(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Shots
        DSS property index: 15

        Number of shots to lockout.  Default is 4. This is one more than the number of reclose intervals.
        """
        return BatchInt32ArrayProxy(self, 15)

    @Shots.setter
    def Shots(self, value):
        self._set_batch_int32_array(15, value)

    @property
    def RecloseIntervals(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: RecloseIntervals
        DSS property index: 16

        Array of reclose intervals. If none, specify "NONE". Default for overcurrent relay is (0.5, 2.0, 2.0) seconds. Default for a voltage relay is (5.0). In a voltage relay, this is  seconds after restoration of voltage that the reclose occurs. Reverse power relay is one shot to lockout, so this is ignored.  A locked out relay must be closed manually (set action=close).
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 16)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @RecloseIntervals.setter
    def RecloseIntervals(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def Delay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Delay
        DSS property index: 17

        Trip time delay (sec) for DEFINITE TIME relays. Default is 0.0 for current and voltage relays.  If >0 then this value is used instead of curves.  Used by Generic, RevPower, 46 and 47 relays. Defaults to 0.1 s for these relays.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @Delay.setter
    def Delay(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def Overvoltcurve(self) -> List[str]:
        """
        DSS property name: Overvoltcurve
        DSS property index: 18

        TCC Curve object to use for overvoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 18)

    @Overvoltcurve.setter
    def Overvoltcurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(18, value)
            return

        self._set_batch_string(18, value)

    @property
    def Overvoltcurve_obj(self) -> List[str]:
        """
        DSS property name: Overvoltcurve
        DSS property index: 18

        TCC Curve object to use for overvoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 18)

    @Overvoltcurve_obj.setter
    def Overvoltcurve_obj(self, value: TCC_Curve):
        self._set_batch_string(18, value)

    @property
    def Undervoltcurve(self) -> List[str]:
        """
        DSS property name: Undervoltcurve
        DSS property index: 19

        TCC Curve object to use for undervoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19)

    @Undervoltcurve.setter
    def Undervoltcurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(19, value)
            return

        self._set_batch_string(19, value)

    @property
    def Undervoltcurve_obj(self) -> List[str]:
        """
        DSS property name: Undervoltcurve
        DSS property index: 19

        TCC Curve object to use for undervoltage relay.  Curve is assumed to be defined with per unit voltage values. Voltage base should be defined for the relay. Default is none (ignored).
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19)

    @Undervoltcurve_obj.setter
    def Undervoltcurve_obj(self, value: TCC_Curve):
        self._set_batch_string(19, value)

    @property
    def kvbase(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvbase
        DSS property index: 20

        Voltage base (kV) for the relay. Specify line-line for 3 phase devices); line-neutral for 1-phase devices.  Relay assumes the number of phases of the monitored element.  Default is 0.0, which results in assuming the voltage values in the "TCC" curve are specified in actual line-to-neutral volts.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @kvbase.setter
    def kvbase(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def pctPickup47(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: 47%Pickup
        DSS property index: 21

        Percent voltage pickup for 47 relay (Neg seq voltage). Default is 2. Specify also base voltage (kvbase) and delay time value.   
        """
        return BatchFloat64ArrayProxy(self, 21)

    @pctPickup47.setter
    def pctPickup47(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def BaseAmps46(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: 46BaseAmps
        DSS property index: 22

        Base current, Amps, for 46 relay (neg seq current).  Used for establishing pickup and per unit I-squared-t.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @BaseAmps46.setter
    def BaseAmps46(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def pctPickup46(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: 46%Pickup
        DSS property index: 23

        Percent pickup current for 46 relay (neg seq current).  Default is 20.0.   When current exceeds this value * BaseAmps, I-squared-t calc starts.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @pctPickup46.setter
    def pctPickup46(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def isqt46(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: 46isqt
        DSS property index: 24

        Negative Sequence I-squared-t trip value for 46 relay (neg seq current).  Default is 1 (trips in 1 sec for 1 per unit neg seq current).  Should be 1 to 99.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @isqt46.setter
    def isqt46(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def Variable(self) -> List[str]:
        """
        DSS property name: Variable
        DSS property index: 25

        Name of variable in PC Elements being monitored.  Only applies to Generic relay.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 25) 

    @Variable.setter
    def Variable(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 25, value)

    @property
    def overtrip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: overtrip
        DSS property index: 26

        Trip setting (high value) for Generic relay variable.  Relay trips in definite time if value of variable exceeds this value.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @overtrip.setter
    def overtrip(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def undertrip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: undertrip
        DSS property index: 27

        Trip setting (low value) for Generic relay variable.  Relay trips in definite time if value of variable is less than this value.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @undertrip.setter
    def undertrip(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def Breakertime(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Breakertime
        DSS property index: 28

        Fixed delay time (sec) added to relay time. Default is 0.0. Designed to represent breaker time or some other delay after a trip decision is made.Use Delay property for setting a fixed trip time delay.Added to trip time of current and voltage relays. Could use in combination with inst trip value to obtain a definite time overcurrent relay.
        """
        return BatchFloat64ArrayProxy(self, 28)

    @Breakertime.setter
    def Breakertime(self, value):
        self._set_batch_float64_array(28, value)

    @property
    def action(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: action
        DSS property index: 29

        DEPRECATED. See "State" property
        """
        return BatchInt32ArrayProxy(self, 29)

    @action.setter
    def action(self, value: Union[AnyStr, int, Relay.RelayAction, List[AnyStr], List[Union[int, Relay.RelayAction]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(29, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(29, value)

    @property
    def action_str(self) -> str:
        """
        DSS property name: action
        DSS property index: 29

        DEPRECATED. See "State" property
        """
        return self._get_prop_string(29)

    @action_str.setter
    def action_str(self, value: AnyStr):
        self.action = value

    @property
    def Z1mag(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Z1mag
        DSS property index: 30

        Positive sequence reach impedance in primary ohms for Distance and TD21 functions. Default=0.7
        """
        return BatchFloat64ArrayProxy(self, 30)

    @Z1mag.setter
    def Z1mag(self, value):
        self._set_batch_float64_array(30, value)

    @property
    def Z1ang(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Z1ang
        DSS property index: 31

        Positive sequence reach impedance angle in degrees for Distance and TD21 functions. Default=64.0
        """
        return BatchFloat64ArrayProxy(self, 31)

    @Z1ang.setter
    def Z1ang(self, value):
        self._set_batch_float64_array(31, value)

    @property
    def Z0mag(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Z0mag
        DSS property index: 32

        Zero sequence reach impedance in primary ohms for Distance and TD21 functions. Default=2.1
        """
        return BatchFloat64ArrayProxy(self, 32)

    @Z0mag.setter
    def Z0mag(self, value):
        self._set_batch_float64_array(32, value)

    @property
    def Z0ang(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Z0ang
        DSS property index: 33

        Zero sequence reach impedance angle in degrees for Distance and TD21 functions. Default=68.0
        """
        return BatchFloat64ArrayProxy(self, 33)

    @Z0ang.setter
    def Z0ang(self, value):
        self._set_batch_float64_array(33, value)

    @property
    def Mphase(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Mphase
        DSS property index: 34

        Phase reach multiplier in per-unit for Distance and TD21 functions. Default=0.7
        """
        return BatchFloat64ArrayProxy(self, 34)

    @Mphase.setter
    def Mphase(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def Mground(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Mground
        DSS property index: 35

        Ground reach multiplier in per-unit for Distance and TD21 functions. Default=0.7
        """
        return BatchFloat64ArrayProxy(self, 35)

    @Mground.setter
    def Mground(self, value):
        self._set_batch_float64_array(35, value)

    @property
    def EventLog(self) -> List[bool]:
        """
        DSS property name: EventLog
        DSS property index: 36

        {Yes/True* | No/False} Default is Yes for Relay. Write trips, reclose and reset events to EventLog.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 36)
        ]
    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 36, value)

    @property
    def DebugTrace(self) -> List[bool]:
        """
        DSS property name: DebugTrace
        DSS property index: 37

        {Yes/True* | No/False} Default is No for Relay. Write extra details to Eventlog.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 37)
        ]
    @DebugTrace.setter
    def DebugTrace(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 37, value)

    @property
    def DistReverse(self) -> List[bool]:
        """
        DSS property name: DistReverse
        DSS property index: 38

        {Yes/True* | No/False} Default is No; reverse direction for distance and td21 types.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 38)
        ]
    @DistReverse.setter
    def DistReverse(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 38, value)

    @property
    def Normal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Normal
        DSS property index: 39

        {Open | Closed} Normal state of the relay. The relay reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return BatchInt32ArrayProxy(self, 39)

    @Normal.setter
    def Normal(self, value: Union[AnyStr, int, Relay.RelayState, List[AnyStr], List[Union[int, Relay.RelayState]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(39, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(39, value)

    @property
    def Normal_str(self) -> str:
        """
        DSS property name: Normal
        DSS property index: 39

        {Open | Closed} Normal state of the relay. The relay reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return self._get_prop_string(39)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: State
        DSS property index: 40

        {Open | Closed} Actual state of the relay. Upon setting, immediately forces state of the relay, overriding the Relay control. Simulates manual control on relay. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the relay to reset to its first operation.
        """
        return BatchInt32ArrayProxy(self, 40)

    @State.setter
    def State(self, value: Union[AnyStr, int, Relay.RelayState, List[AnyStr], List[Union[int, Relay.RelayState]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(40, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(40, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 40

        {Open | Closed} Actual state of the relay. Upon setting, immediately forces state of the relay, overriding the Relay control. Simulates manual control on relay. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the relay to reset to its first operation.
        """
        return self._get_prop_string(40)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def DOC_TiltAngleLow(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_TiltAngleLow
        DSS property index: 41

        Tilt angle for lower current magnitudes. Default is 90.
        """
        return BatchFloat64ArrayProxy(self, 41)

    @DOC_TiltAngleLow.setter
    def DOC_TiltAngleLow(self, value):
        self._set_batch_float64_array(41, value)

    @property
    def DOC_TiltAngleHigh(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_TiltAngleHigh
        DSS property index: 42

        Tilt angle for higher current magnitudes. Default is 90.
        """
        return BatchFloat64ArrayProxy(self, 42)

    @DOC_TiltAngleHigh.setter
    def DOC_TiltAngleHigh(self, value):
        self._set_batch_float64_array(42, value)

    @property
    def DOC_TripSettingLow(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_TripSettingLow
        DSS property index: 43

        Trip setting for lower current magnitude.  Default is 0.
        """
        return BatchFloat64ArrayProxy(self, 43)

    @DOC_TripSettingLow.setter
    def DOC_TripSettingLow(self, value):
        self._set_batch_float64_array(43, value)

    @property
    def DOC_TripSettingHigh(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_TripSettingHigh
        DSS property index: 44

        Trip setting for higher current magnitude.  Default is -1 (deactivated). To activate, set a positive value. Must be greater than "DOC_TripSettingLow".
        """
        return BatchFloat64ArrayProxy(self, 44)

    @DOC_TripSettingHigh.setter
    def DOC_TripSettingHigh(self, value):
        self._set_batch_float64_array(44, value)

    @property
    def DOC_TripSettingMag(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_TripSettingMag
        DSS property index: 45

        Trip setting for current magnitude (define a circle for the relay characteristics). Default is -1 (deactivated). To activate, set a positive value.
        """
        return BatchFloat64ArrayProxy(self, 45)

    @DOC_TripSettingMag.setter
    def DOC_TripSettingMag(self, value):
        self._set_batch_float64_array(45, value)

    @property
    def DOC_DelayInner(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_DelayInner
        DSS property index: 46

        Trip time delay (sec) for operation in inner zone for DOC relay, defined when "DOC_TripSettingMag" or "DOC_TripSettingHigh" are activate. Default is -1.0 (deactivated), meaning that the relay characteristic is insensitive in the inner zone (no trip). Set to 0 for instantaneous trip and >0 for a definite time delay. If "DOC_PhaseCurveInner" is specified, time delay from curve is utilized instead.
        """
        return BatchFloat64ArrayProxy(self, 46)

    @DOC_DelayInner.setter
    def DOC_DelayInner(self, value):
        self._set_batch_float64_array(46, value)

    @property
    def DOC_PhaseCurveInner(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_PhaseCurveInner
        DSS property index: 47

        Name of the TCC Curve object that determines the phase trip for operation in inner zone for DOC relay. Must have been previously defined as a TCC_Curve object. Default is none (ignored). Multiplying the current values in the curve by the "DOC_PhaseTripInner" value gives the actual current.
        """
        return BatchFloat64ArrayProxy(self, 47)

    @DOC_PhaseCurveInner.setter
    def DOC_PhaseCurveInner(self, value):
        self._set_batch_float64_array(47, value)

    @property
    def DOC_PhaseTripInner(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DOC_PhaseTripInner
        DSS property index: 48

        Multiplier for the "DOC_PhaseCurveInner" TCC curve.  Defaults to 1.0.
        """
        return BatchFloat64ArrayProxy(self, 48)

    @DOC_PhaseTripInner.setter
    def DOC_PhaseTripInner(self, value):
        self._set_batch_float64_array(48, value)

    @property
    def DOC_TDPhaseInner(self) -> List[str]:
        """
        DSS property name: DOC_TDPhaseInner
        DSS property index: 49

        Time dial for "DOC_PhaseCurveInner" TCC curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 49)

    @DOC_TDPhaseInner.setter
    def DOC_TDPhaseInner(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(49, value)
            return

        self._set_batch_string(49, value)

    @property
    def DOC_TDPhaseInner_obj(self) -> List[str]:
        """
        DSS property name: DOC_TDPhaseInner
        DSS property index: 49

        Time dial for "DOC_PhaseCurveInner" TCC curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 49)

    @DOC_TDPhaseInner_obj.setter
    def DOC_TDPhaseInner_obj(self, value: TCC_Curve):
        self._set_batch_string(49, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 50

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 50)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(50, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 51

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 51)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 51, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 52

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(52, value)

class RecloserBatch(DSSBatch):
    _cls_name = 'Recloser'
    _obj_cls = Recloser
    _cls_idx = 31


    @property
    def MonitoredObj(self) -> List[str]:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Recloser's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @MonitoredObj.setter
    def MonitoredObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def MonitoredObj_obj(self) -> List[str]:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Recloser's PT and/or CT are connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @MonitoredObj_obj.setter
    def MonitoredObj_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def MonitoredTerm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: MonitoredTerm
        DSS property index: 2

        Number of the terminal of the circuit element to which the Recloser is connected. 1 or 2, typically.  Default is 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @MonitoredTerm.setter
    def MonitoredTerm(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def SwitchedObj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Recloser controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(3, value)
            return

        self._set_batch_string(3, value)

    @property
    def SwitchedObj_obj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Recloser controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_batch_string(3, value)

    @property
    def SwitchedTerm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: SwitchedTerm
        DSS property index: 4

        Number of the terminal of the controlled element in which the switch is controlled by the Recloser. 1 or 2, typically.  Default is 1.
        """
        return BatchInt32ArrayProxy(self, 4)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value):
        self._set_batch_int32_array(4, value)

    @property
    def NumFast(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: NumFast
        DSS property index: 5

        Number of Fast (fuse saving) operations.  Default is 1. (See "Shots")
        """
        return BatchInt32ArrayProxy(self, 5)

    @NumFast.setter
    def NumFast(self, value):
        self._set_batch_int32_array(5, value)

    @property
    def PhaseFast(self) -> List[str]:
        """
        DSS property name: PhaseFast
        DSS property index: 6

        Name of the TCC Curve object that determines the Phase Fast trip.  Must have been previously defined as a TCC_Curve object. Default is "A". Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6)

    @PhaseFast.setter
    def PhaseFast(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(6, value)
            return

        self._set_batch_string(6, value)

    @property
    def PhaseFast_obj(self) -> List[str]:
        """
        DSS property name: PhaseFast
        DSS property index: 6

        Name of the TCC Curve object that determines the Phase Fast trip.  Must have been previously defined as a TCC_Curve object. Default is "A". Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 6)

    @PhaseFast_obj.setter
    def PhaseFast_obj(self, value: TCC_Curve):
        self._set_batch_string(6, value)

    @property
    def PhaseDelayed(self) -> List[str]:
        """
        DSS property name: PhaseDelayed
        DSS property index: 7

        Name of the TCC Curve object that determines the Phase Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is "D".Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @PhaseDelayed.setter
    def PhaseDelayed(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(7, value)
            return

        self._set_batch_string(7, value)

    @property
    def PhaseDelayed_obj(self) -> List[str]:
        """
        DSS property name: PhaseDelayed
        DSS property index: 7

        Name of the TCC Curve object that determines the Phase Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is "D".Multiplying the current values in the curve by the "phasetrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 7)

    @PhaseDelayed_obj.setter
    def PhaseDelayed_obj(self, value: TCC_Curve):
        self._set_batch_string(7, value)

    @property
    def GroundFast(self) -> List[str]:
        """
        DSS property name: GroundFast
        DSS property index: 8

        Name of the TCC Curve object that determines the Ground Fast trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @GroundFast.setter
    def GroundFast(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(8, value)
            return

        self._set_batch_string(8, value)

    @property
    def GroundFast_obj(self) -> List[str]:
        """
        DSS property name: GroundFast
        DSS property index: 8

        Name of the TCC Curve object that determines the Ground Fast trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored). Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @GroundFast_obj.setter
    def GroundFast_obj(self, value: TCC_Curve):
        self._set_batch_string(8, value)

    @property
    def GroundDelayed(self) -> List[str]:
        """
        DSS property name: GroundDelayed
        DSS property index: 9

        Name of the TCC Curve object that determines the Ground Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9)

    @GroundDelayed.setter
    def GroundDelayed(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(9, value)
            return

        self._set_batch_string(9, value)

    @property
    def GroundDelayed_obj(self) -> List[str]:
        """
        DSS property name: GroundDelayed
        DSS property index: 9

        Name of the TCC Curve object that determines the Ground Delayed trip.  Must have been previously defined as a TCC_Curve object. Default is none (ignored).Multiplying the current values in the curve by the "groundtrip" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9)

    @GroundDelayed_obj.setter
    def GroundDelayed_obj(self, value: TCC_Curve):
        self._set_batch_string(9, value)

    @property
    def PhaseTrip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: PhaseTrip
        DSS property index: 10

        Multiplier or actual phase amps for the phase TCC curve.  Defaults to 1.0.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @PhaseTrip.setter
    def PhaseTrip(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def GroundTrip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GroundTrip
        DSS property index: 11

        Multiplier or actual ground amps (3I0) for the ground TCC curve.  Defaults to 1.0.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @GroundTrip.setter
    def GroundTrip(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def PhaseInst(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: PhaseInst
        DSS property index: 12

        Actual amps for instantaneous phase trip which is assumed to happen in 0.01 sec + Delay Time. Default is 0.0, which signifies no inst trip. 
        """
        return BatchFloat64ArrayProxy(self, 12)

    @PhaseInst.setter
    def PhaseInst(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def GroundInst(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: GroundInst
        DSS property index: 13

        Actual amps for instantaneous ground trip which is assumed to happen in 0.01 sec + Delay Time.Default is 0.0, which signifies no inst trip.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @GroundInst.setter
    def GroundInst(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def Reset(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Reset
        DSS property index: 14

        Reset time in sec for Recloser.  Default is 15. 
        """
        return BatchFloat64ArrayProxy(self, 14)

    @Reset.setter
    def Reset(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def Shots(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Shots
        DSS property index: 15

        Total Number of fast and delayed shots to lockout.  Default is 4. This is one more than the number of reclose intervals.
        """
        return BatchInt32ArrayProxy(self, 15)

    @Shots.setter
    def Shots(self, value):
        self._set_batch_int32_array(15, value)

    @property
    def RecloseIntervals(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: RecloseIntervals
        DSS property index: 16

        Array of reclose intervals.  Default for Recloser is (0.5, 2.0, 2.0) seconds. A locked out Recloser must be closed manually (action=close).
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 16)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @RecloseIntervals.setter
    def RecloseIntervals(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def Delay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Delay
        DSS property index: 17

        Fixed delay time (sec) added to Recloser trip time. Default is 0.0. Used to represent breaker time or any other delay.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @Delay.setter
    def Delay(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def Action(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Action
        DSS property index: 18

        DEPRECATED. See "State" property
        """
        return BatchInt32ArrayProxy(self, 18)

    @Action.setter
    def Action(self, value: Union[AnyStr, int, Recloser.RecloserAction, List[AnyStr], List[Union[int, Recloser.RecloserAction]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(18, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(18, value)

    @property
    def Action_str(self) -> str:
        """
        DSS property name: Action
        DSS property index: 18

        DEPRECATED. See "State" property
        """
        return self._get_prop_string(18)

    @Action_str.setter
    def Action_str(self, value: AnyStr):
        self.Action = value

    @property
    def TDPhFast(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TDPhFast
        DSS property index: 19

        Time dial for Phase Fast trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @TDPhFast.setter
    def TDPhFast(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def TDGrFast(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TDGrFast
        DSS property index: 20

        Time dial for Ground Fast trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @TDGrFast.setter
    def TDGrFast(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def TDPhDelayed(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TDPhDelayed
        DSS property index: 21

        Time dial for Phase Delayed trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @TDPhDelayed.setter
    def TDPhDelayed(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def TDGrDelayed(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: TDGrDelayed
        DSS property index: 22

        Time dial for Ground Delayed trip curve. Multiplier on time axis of specified curve. Default=1.0.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @TDGrDelayed.setter
    def TDGrDelayed(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def Normal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Normal
        DSS property index: 23

        {Open | Closed} Normal state of the recloser. The recloser reverts to this state for reset, change of mode, etc. Defaults to "State" if not specificallt declared.
        """
        return BatchInt32ArrayProxy(self, 23)

    @Normal.setter
    def Normal(self, value: Union[AnyStr, int, Recloser.RecloserState, List[AnyStr], List[Union[int, Recloser.RecloserState]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(23, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(23, value)

    @property
    def Normal_str(self) -> str:
        """
        DSS property name: Normal
        DSS property index: 23

        {Open | Closed} Normal state of the recloser. The recloser reverts to this state for reset, change of mode, etc. Defaults to "State" if not specificallt declared.
        """
        return self._get_prop_string(23)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: State
        DSS property index: 24

        {Open | Closed} Actual state of the recloser. Upon setting, immediately forces state of the recloser, overriding the Recloser control. Simulates manual control on recloser. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the recloser to reset to its first operation.
        """
        return BatchInt32ArrayProxy(self, 24)

    @State.setter
    def State(self, value: Union[AnyStr, int, Recloser.RecloserState, List[AnyStr], List[Union[int, Recloser.RecloserState]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(24, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(24, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 24

        {Open | Closed} Actual state of the recloser. Upon setting, immediately forces state of the recloser, overriding the Recloser control. Simulates manual control on recloser. Defaults to Closed. "Open" causes the controlled element to open and lock out. "Closed" causes the controlled element to close and the recloser to reset to its first operation.
        """
        return self._get_prop_string(24)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 25

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 25)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 26

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 26)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 26, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 27

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(27, value)

class FuseBatch(DSSBatch):
    _cls_name = 'Fuse'
    _obj_cls = Fuse
    _cls_idx = 32


    @property
    def MonitoredObj(self) -> List[str]:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Fuse is connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @MonitoredObj.setter
    def MonitoredObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def MonitoredObj_obj(self) -> List[str]:
        """
        DSS property name: MonitoredObj
        DSS property index: 1

        Full object name of the circuit element, typically a line, transformer, load, or generator, to which the Fuse is connected. This is the "monitored" element. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @MonitoredObj_obj.setter
    def MonitoredObj_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def MonitoredTerm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: MonitoredTerm
        DSS property index: 2

        Number of the terminal of the circuit element to which the Fuse is connected. 1 or 2, typically.  Default is 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @MonitoredTerm.setter
    def MonitoredTerm(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def SwitchedObj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Fuse controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(3, value)
            return

        self._set_batch_string(3, value)

    @property
    def SwitchedObj_obj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 3

        Name of circuit element switch that the Fuse controls. Specify the full object name.Defaults to the same as the Monitored element. This is the "controlled" element.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_batch_string(3, value)

    @property
    def SwitchedTerm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: SwitchedTerm
        DSS property index: 4

        Number of the terminal of the controlled element in which the switch is controlled by the Fuse. 1 or 2, typically.  Default is 1.  Assumes all phases of the element have a fuse of this type.
        """
        return BatchInt32ArrayProxy(self, 4)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value):
        self._set_batch_int32_array(4, value)

    @property
    def FuseCurve(self) -> List[str]:
        """
        DSS property name: FuseCurve
        DSS property index: 5

        Name of the TCC Curve object that determines the fuse blowing.  Must have been previously defined as a TCC_Curve object. Default is "Tlink". Multiplying the current values in the curve by the "RatedCurrent" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 5)

    @FuseCurve.setter
    def FuseCurve(self, value: Union[AnyStr, TCC_Curve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(5, value)
            return

        self._set_batch_string(5, value)

    @property
    def FuseCurve_obj(self) -> List[str]:
        """
        DSS property name: FuseCurve
        DSS property index: 5

        Name of the TCC Curve object that determines the fuse blowing.  Must have been previously defined as a TCC_Curve object. Default is "Tlink". Multiplying the current values in the curve by the "RatedCurrent" value gives the actual current.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 5)

    @FuseCurve_obj.setter
    def FuseCurve_obj(self, value: TCC_Curve):
        self._set_batch_string(5, value)

    @property
    def RatedCurrent(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: RatedCurrent
        DSS property index: 6

        Multiplier or actual phase amps for the phase TCC curve.  Defaults to 1.0.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @RatedCurrent.setter
    def RatedCurrent(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def Delay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Delay
        DSS property index: 7

        Fixed delay time (sec) added to Fuse blowing time determined from the TCC curve. Default is 0.0. Used to represent fuse clearing time or any other delay.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @Delay.setter
    def Delay(self, value):
        self._set_batch_float64_array(7, value)

    def Action(self, value: Union[str, bytes, int]):
        """
        DSS property name: Action
        DSS property index: 8

        DEPRECATED. See "State" property.
        """
        if isinstance(value, int):
            self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 8, value)
        else:
            self._set_batch_string(8, value)

    @property
    def Normal(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: Normal
        DSS property index: 9

        ARRAY of strings {Open | Closed} representing the Normal state of the fuse in each phase of the controlled element. The fuse reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 9)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Normal.setter
    def Normal(self, value: Union[List[Union[int,Fuse.FuseState]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 9, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(9, value)

    @property
    def Normal_str(self) -> List[List[str]]:
        """
        DSS property name: Normal
        DSS property index: 9

        ARRAY of strings {Open | Closed} representing the Normal state of the fuse in each phase of the controlled element. The fuse reverts to this state for reset, change of mode, etc. Defaults to "State" if not specifically declared.
        """
        return self._get_string_ll(9)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: State
        DSS property index: 10

        ARRAY of strings {Open | Closed} representing the Actual state of the fuse in each phase of the controlled element. Upon setting, immediately forces state of fuse(s). Simulates manual control on Fuse. Defaults to Closed for all phases.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 10)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @State.setter
    def State(self, value: Union[List[Union[int,Fuse.FuseState]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 10, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(10, value)

    @property
    def State_str(self) -> List[List[str]]:
        """
        DSS property name: State
        DSS property index: 10

        ARRAY of strings {Open | Closed} representing the Actual state of the fuse in each phase of the controlled element. Upon setting, immediately forces state of fuse(s). Simulates manual control on Fuse. Defaults to Closed for all phases.
        """
        return self._get_string_ll(10)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 11

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 12

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 12)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 12, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 13

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(13, value)

class SwtControlBatch(DSSBatch):
    _cls_name = 'SwtControl'
    _obj_cls = SwtControl
    _cls_idx = 33


    @property
    def SwitchedObj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 1

        Name of circuit element switch that the SwtControl operates. Specify the full object class and name.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @SwitchedObj.setter
    def SwitchedObj(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def SwitchedObj_obj(self) -> List[str]:
        """
        DSS property name: SwitchedObj
        DSS property index: 1

        Name of circuit element switch that the SwtControl operates. Specify the full object class and name.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @SwitchedObj_obj.setter
    def SwitchedObj_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def SwitchedTerm(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: SwitchedTerm
        DSS property index: 2

        Terminal number of the controlled element switch. 1 or 2, typically.  Default is 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @SwitchedTerm.setter
    def SwitchedTerm(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def Action(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Action
        DSS property index: 3

        {Open | Close}  After specified delay time, and if not locked, causes the controlled switch to open or close. 
        """
        return BatchInt32ArrayProxy(self, 3)

    @Action.setter
    def Action(self, value: Union[AnyStr, int, SwtControl.SwtControlAction, List[AnyStr], List[Union[int, SwtControl.SwtControlAction]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(3, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(3, value)

    @property
    def Action_str(self) -> str:
        """
        DSS property name: Action
        DSS property index: 3

        {Open | Close}  After specified delay time, and if not locked, causes the controlled switch to open or close. 
        """
        return self._get_prop_string(3)

    @Action_str.setter
    def Action_str(self, value: AnyStr):
        self.Action = value

    @property
    def Lock(self) -> List[bool]:
        """
        DSS property name: Lock
        DSS property index: 4

        {Yes | No} Delayed action. Sends CTRL_LOCK or CTRL_UNLOCK message to control queue. After delay time, controlled switch is locked in its present open / close state or unlocked. Switch will not respond to either manual (Action) or automatic (COM interface) control or internal OpenDSS Reset when locked.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 4)
        ]
    @Lock.setter
    def Lock(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 4, value)

    @property
    def Delay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Delay
        DSS property index: 5

        Operating time delay (sec) of the switch. Defaults to 120.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @Delay.setter
    def Delay(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def Normal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Normal
        DSS property index: 6

        {Open | Closed] Normal state of the switch. If not Locked, the switch reverts to this state for reset, change of mode, etc. Defaults to first Action or State specified if not specifically declared.
        """
        return BatchInt32ArrayProxy(self, 6)

    @Normal.setter
    def Normal(self, value: Union[AnyStr, int, SwtControl.SwtControlState, List[AnyStr], List[Union[int, SwtControl.SwtControlState]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(6, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(6, value)

    @property
    def Normal_str(self) -> str:
        """
        DSS property name: Normal
        DSS property index: 6

        {Open | Closed] Normal state of the switch. If not Locked, the switch reverts to this state for reset, change of mode, etc. Defaults to first Action or State specified if not specifically declared.
        """
        return self._get_prop_string(6)

    @Normal_str.setter
    def Normal_str(self, value: AnyStr):
        self.Normal = value

    @property
    def State(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: State
        DSS property index: 7

        {Open | Closed] Present state of the switch. Upon setting, immediately forces state of switch.
        """
        return BatchInt32ArrayProxy(self, 7)

    @State.setter
    def State(self, value: Union[AnyStr, int, SwtControl.SwtControlState, List[AnyStr], List[Union[int, SwtControl.SwtControlState]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(7, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(7, value)

    @property
    def State_str(self) -> str:
        """
        DSS property name: State
        DSS property index: 7

        {Open | Closed] Present state of the switch. Upon setting, immediately forces state of switch.
        """
        return self._get_prop_string(7)

    @State_str.setter
    def State_str(self, value: AnyStr):
        self.State = value

    def Reset(self, value: bool):
        """
        DSS property name: Reset
        DSS property index: 8

        {Yes | No} If Yes, forces Reset of switch to Normal state and removes Lock independently of any internal reset command for mode change, etc.
        """
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 8, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 9

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 10

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 10)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 10, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 11

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(11, value)

class PVSystemBatch(DSSBatch):
    _cls_name = 'PVSystem'
    _obj_cls = PVSystem
    _cls_idx = 34


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this PVSystem element.  Power is evenly divided among phases.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the PVSystem element is connected.  May include specific node specification.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def kv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV, for PVSystem element. For 2- and 3-phase PVSystem elements, specify phase-phase kV. Otherwise, specify actual kV across each branch of the PVSystem element. If 1-phase wye (star or LN), specify phase-neutral kV. If 1-phase delta or phase-phase connected, specify phase-phase kV.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kv.setter
    def kv(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def irradiance(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: irradiance
        DSS property index: 4

        Get/set the present irradiance value in kW/sq-m. Used as base value for shape multipliers. Generally entered as peak value for the time period of interest and the yearly, daily, and duty load shape objects are defined as per unit multipliers (just like Loads/Generators).
        """
        return BatchFloat64ArrayProxy(self, 4)

    @irradiance.setter
    def irradiance(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def Pmpp(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Pmpp
        DSS property index: 5

        Get/set the rated max power of the PV array for 1.0 kW/sq-m irradiance and a user-selected array temperature. The P-TCurve should be defined relative to the selected array temperature.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @Pmpp.setter
    def Pmpp(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def pctPmpp(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Pmpp
        DSS property index: 6

        Upper limit on active power as a percentage of Pmpp.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @pctPmpp.setter
    def pctPmpp(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def Temperature(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Temperature
        DSS property index: 7

        Get/set the present Temperature. Used as fixed value corresponding to PTCurve property. A multiplier is obtained from the Pmpp-Temp curve and applied to the nominal Pmpp from the irradiance to determine the net array output.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @Temperature.setter
    def Temperature(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def pf(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pf
        DSS property index: 8

        Nominally, the power factor for the output power. Default is 1.0. Setting this property will cause the inverter to operate in constant power factor mode.Enter negative when kW and kvar have opposite signs.
        A positive power factor signifies that the PVSystem element produces vars 
        as is typical for a generator.  
        """
        return BatchFloat64ArrayProxy(self, 8)

    @pf.setter
    def pf(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 9

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return BatchInt32ArrayProxy(self, 9)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(9, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(9, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 9

        ={wye|LN|delta|LL}.  Default is wye.
        """
        return self._get_prop_string(9)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kvar(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvar
        DSS property index: 10

        Get/set the present kvar value.  Setting this property forces the inverter to operate in constant kvar mode.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @kvar.setter
    def kvar(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def kVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVA
        DSS property index: 11

        kVA rating of inverter. Used as the base for Dynamics mode and Harmonics mode values.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @kVA.setter
    def kVA(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def pctCutin(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Cutin
        DSS property index: 12

        % cut-in power -- % of kVA rating of inverter. When the inverter is OFF, the power from the array must be greater than this for the inverter to turn on.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @pctCutin.setter
    def pctCutin(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def pctCutout(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Cutout
        DSS property index: 13

        % cut-out power -- % of kVA rating of inverter. When the inverter is ON, the inverter turns OFF when the power from the array drops below this value.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @pctCutout.setter
    def pctCutout(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def EffCurve(self) -> List[str]:
        """
        DSS property name: EffCurve
        DSS property index: 14

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Inverter output power is discounted by the multiplier obtained from this curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 14)

    @EffCurve.setter
    def EffCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(14, value)
            return

        self._set_batch_string(14, value)

    @property
    def EffCurve_obj(self) -> List[str]:
        """
        DSS property name: EffCurve
        DSS property index: 14

        An XYCurve object, previously defined, that describes the PER UNIT efficiency vs PER UNIT of rated kVA for the inverter. Inverter output power is discounted by the multiplier obtained from this curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 14)

    @EffCurve_obj.setter
    def EffCurve_obj(self, value: XYcurve):
        self._set_batch_string(14, value)

    @property
    def PTCurve(self) -> List[str]:
        """
        DSS property name: P-TCurve
        DSS property index: 15

        An XYCurve object, previously defined, that describes the PV array PER UNIT Pmpp vs Temperature curve. Temperature units must agree with the Temperature property and the Temperature shapes used for simulations. The Pmpp values are specified in per unit of the Pmpp value for 1 kW/sq-m irradiance. The value for the temperature at which Pmpp is defined should be 1.0. The net array power is determined by the irradiance * Pmpp * f(Temperature)
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 15)

    @PTCurve.setter
    def PTCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(15, value)
            return

        self._set_batch_string(15, value)

    @property
    def PTCurve_obj(self) -> List[str]:
        """
        DSS property name: P-TCurve
        DSS property index: 15

        An XYCurve object, previously defined, that describes the PV array PER UNIT Pmpp vs Temperature curve. Temperature units must agree with the Temperature property and the Temperature shapes used for simulations. The Pmpp values are specified in per unit of the Pmpp value for 1 kW/sq-m irradiance. The value for the temperature at which Pmpp is defined should be 1.0. The net array power is determined by the irradiance * Pmpp * f(Temperature)
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 15)

    @PTCurve_obj.setter
    def PTCurve_obj(self, value: XYcurve):
        self._set_batch_string(15, value)

    @property
    def pctR(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %R
        DSS property index: 16

        Equivalent percent internal resistance, ohms. Default is 50%. Placed in series with internal voltage source for harmonics and dynamics modes. (Limits fault current to about 2 pu if not current limited -- see LimitCurrent) 
        """
        return BatchFloat64ArrayProxy(self, 16)

    @pctR.setter
    def pctR(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def pctX(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %X
        DSS property index: 17

        Equivalent percent internal reactance, ohms. Default is 0%. Placed in series with internal voltage source for harmonics and dynamics modes. 
        """
        return BatchFloat64ArrayProxy(self, 17)

    @pctX.setter
    def pctX(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def model(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: model
        DSS property index: 18

        Integer code (default=1) for the model to use for power output variation with voltage. Valid values are:

        1:PVSystem element injects a CONSTANT kW at specified power factor.
        2:PVSystem element is modeled as a CONSTANT ADMITTANCE.
        3:Compute load injection from User-written Model.
        """
        return BatchInt32ArrayProxy(self, 18)

    @model.setter
    def model(self, value):
        self._set_batch_int32_array(18, value)

    @property
    def Vminpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vminpu
        DSS property index: 19

        Default = 0.90.  Minimum per unit voltage for which the Model is assumed to apply. Below this value, the load model reverts to a constant impedance model except for Dynamics model. In Dynamics mode, the current magnitude is limited to the value the power flow would compute for this voltage.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @Vminpu.setter
    def Vminpu(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def Vmaxpu(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vmaxpu
        DSS property index: 20

        Default = 1.10.  Maximum per unit voltage for which the Model is assumed to apply. Above this value, the load model reverts to a constant impedance model.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @Vmaxpu.setter
    def Vmaxpu(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def Balanced(self) -> List[bool]:
        """
        DSS property name: Balanced
        DSS property index: 21

        {Yes | No*} Default is No.  Force balanced current only for 3-phase PVSystems. Forces zero- and negative-sequence to zero. 
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 21)
        ]
    @Balanced.setter
    def Balanced(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 21, value)

    @property
    def LimitCurrent(self) -> List[bool]:
        """
        DSS property name: LimitCurrent
        DSS property index: 22

        Limits current magnitude to Vminpu value for both 1-phase and 3-phase PVSystems similar to Generator Model 7. For 3-phase, limits the positive-sequence current but not the negative-sequence.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 22)
        ]
    @LimitCurrent.setter
    def LimitCurrent(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 22, value)

    @property
    def yearly(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 23

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 23)

    @yearly.setter
    def yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(23, value)
            return

        self._set_batch_string(23, value)

    @property
    def yearly_obj(self) -> List[str]:
        """
        DSS property name: yearly
        DSS property index: 23

        Dispatch shape to use for yearly simulations.  Must be previously defined as a Loadshape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 23)

    @yearly_obj.setter
    def yearly_obj(self, value: LoadShape):
        self._set_batch_string(23, value)

    @property
    def daily(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 24

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 24)

    @daily.setter
    def daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(24, value)
            return

        self._set_batch_string(24, value)

    @property
    def daily_obj(self) -> List[str]:
        """
        DSS property name: daily
        DSS property index: 24

        Dispatch shape to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically.  In the default dispatch mode, the PVSystem element uses this loadshape to trigger State changes.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 24)

    @daily_obj.setter
    def daily_obj(self, value: LoadShape):
        self._set_batch_string(24, value)

    @property
    def duty(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 25

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 25)

    @duty.setter
    def duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(25, value)
            return

        self._set_batch_string(25, value)

    @property
    def duty_obj(self) -> List[str]:
        """
        DSS property name: duty
        DSS property index: 25

        Load shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a Loadshape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 25)

    @duty_obj.setter
    def duty_obj(self, value: LoadShape):
        self._set_batch_string(25, value)

    @property
    def Tyearly(self) -> List[str]:
        """
        DSS property name: Tyearly
        DSS property index: 26

        Temperature shape to use for yearly simulations.  Must be previously defined as a TShape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 26)

    @Tyearly.setter
    def Tyearly(self, value: Union[AnyStr, TShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(26, value)
            return

        self._set_batch_string(26, value)

    @property
    def Tyearly_obj(self) -> List[str]:
        """
        DSS property name: Tyearly
        DSS property index: 26

        Temperature shape to use for yearly simulations.  Must be previously defined as a TShape object. If this is not specified, the Daily dispatch shape, if any, is repeated during Yearly solution modes. The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 26)

    @Tyearly_obj.setter
    def Tyearly_obj(self, value: TShape):
        self._set_batch_string(26, value)

    @property
    def Tdaily(self) -> List[str]:
        """
        DSS property name: Tdaily
        DSS property index: 27

        Temperature shape to use for daily simulations.  Must be previously defined as a TShape object of 24 hrs, typically.  The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 27)

    @Tdaily.setter
    def Tdaily(self, value: Union[AnyStr, TShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(27, value)
            return

        self._set_batch_string(27, value)

    @property
    def Tdaily_obj(self) -> List[str]:
        """
        DSS property name: Tdaily
        DSS property index: 27

        Temperature shape to use for daily simulations.  Must be previously defined as a TShape object of 24 hrs, typically.  The PVSystem element uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 27)

    @Tdaily_obj.setter
    def Tdaily_obj(self, value: TShape):
        self._set_batch_string(27, value)

    @property
    def Tduty(self) -> List[str]:
        """
        DSS property name: Tduty
        DSS property index: 28

        Temperature shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a TShape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat. The PVSystem model uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 28)

    @Tduty.setter
    def Tduty(self, value: Union[AnyStr, TShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(28, value)
            return

        self._set_batch_string(28, value)

    @property
    def Tduty_obj(self) -> List[str]:
        """
        DSS property name: Tduty
        DSS property index: 28

        Temperature shape to use for duty cycle dispatch simulations such as for solar ramp rate studies. Must be previously defined as a TShape object. Typically would have time intervals of 1-5 seconds. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat. The PVSystem model uses this TShape to determine the Pmpp from the Pmpp vs T curve. Units must agree with the Pmpp vs T curve.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 28)

    @Tduty_obj.setter
    def Tduty_obj(self, value: TShape):
        self._set_batch_string(28, value)

    @property
    def cls(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: class
        DSS property index: 29

        An arbitrary integer number representing the class of PVSystem element so that PVSystem values may be segregated by class.
        """
        return BatchInt32ArrayProxy(self, 29)

    @cls.setter
    def cls(self, value):
        self._set_batch_int32_array(29, value)

    @property
    def UserModel(self) -> List[str]:
        """
        DSS property name: UserModel
        DSS property index: 30

        Name of DLL containing user-written model, which computes the terminal currents for Dynamics studies, overriding the default model.  Set to "none" to negate previous setting.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 30) 

    @UserModel.setter
    def UserModel(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 30, value)

    @property
    def UserData(self) -> List[str]:
        """
        DSS property name: UserData
        DSS property index: 31

        String (in quotes or parentheses) that gets passed to user-written model for defining the data required for that model.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 31) 

    @UserData.setter
    def UserData(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 31, value)

    @property
    def debugtrace(self) -> List[bool]:
        """
        DSS property name: debugtrace
        DSS property index: 32

        {Yes | No }  Default is no.  Turn this on to capture the progress of the PVSystem model for each iteration.  Creates a separate file for each PVSystem element named "PVSystem_name.CSV".
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 32)
        ]
    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 32, value)

    @property
    def VarFollowInverter(self) -> List[bool]:
        """
        DSS property name: VarFollowInverter
        DSS property index: 33

        Boolean variable (Yes|No) or (True|False). Defaults to False which indicates that the reactive power generation/absorption does not respect the inverter status.When set to True, the PVSystem reactive power generation/absorption will cease when the inverter status is off, due to panel kW dropping below %Cutout.  The reactive power generation/absorption will begin again when the panel kW is above %Cutin.  When set to False, the PVSystem will generate/absorb reactive power regardless of the status of the inverter.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 33)
        ]
    @VarFollowInverter.setter
    def VarFollowInverter(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 33, value)

    @property
    def DutyStart(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DutyStart
        DSS property index: 34

        Starting time offset [hours] into the duty cycle shape for this PVSystem, defaults to 0
        """
        return BatchFloat64ArrayProxy(self, 34)

    @DutyStart.setter
    def DutyStart(self, value):
        self._set_batch_float64_array(34, value)

    @property
    def WattPriority(self) -> List[bool]:
        """
        DSS property name: WattPriority
        DSS property index: 35

        {Yes/No*/True/False} Set inverter to watt priority instead of the default var priority
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 35)
        ]
    @WattPriority.setter
    def WattPriority(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 35, value)

    @property
    def PFPriority(self) -> List[bool]:
        """
        DSS property name: PFPriority
        DSS property index: 36

        {Yes/No*/True/False} Set inverter to operate with PF priority when in constant PF mode. If "Yes", value assigned to "WattPriority" is neglected. If controlled by an InvControl with either Volt-Var or DRC or both functions activated, PF priority is neglected and "WattPriority" is considered. Default = No.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 36)
        ]
    @PFPriority.setter
    def PFPriority(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 36, value)

    @property
    def pctPminNoVars(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %PminNoVars
        DSS property index: 37

        Minimum active power as percentage of Pmpp under which there is no vars production/absorption.
        """
        return BatchFloat64ArrayProxy(self, 37)

    @pctPminNoVars.setter
    def pctPminNoVars(self, value):
        self._set_batch_float64_array(37, value)

    @property
    def pctPminkvarMax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %PminkvarMax
        DSS property index: 38

        Minimum active power as percentage of Pmpp that allows the inverter to produce/absorb reactive power up to its kvarMax or kvarMaxAbs.
        """
        return BatchFloat64ArrayProxy(self, 38)

    @pctPminkvarMax.setter
    def pctPminkvarMax(self, value):
        self._set_batch_float64_array(38, value)

    @property
    def kvarMax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvarMax
        DSS property index: 39

        Indicates the maximum reactive power GENERATION (un-signed numerical variable in kvar) for the inverter (as an un-signed value). Defaults to kVA rating of the inverter.
        """
        return BatchFloat64ArrayProxy(self, 39)

    @kvarMax.setter
    def kvarMax(self, value):
        self._set_batch_float64_array(39, value)

    @property
    def kvarMaxAbs(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvarMaxAbs
        DSS property index: 40

        Indicates the maximum reactive power ABSORPTION (un-signed numerical variable in kvar) for the inverter (as an un-signed value). Defaults to kVA rating of the inverter.
        """
        return BatchFloat64ArrayProxy(self, 40)

    @kvarMaxAbs.setter
    def kvarMaxAbs(self, value):
        self._set_batch_float64_array(40, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 41

        Name of harmonic voltage or current spectrum for this PVSystem element. A harmonic voltage source is assumed for the inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 41)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(41, value)
            return

        self._set_batch_string(41, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 41

        Name of harmonic voltage or current spectrum for this PVSystem element. A harmonic voltage source is assumed for the inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 41)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(41, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 42

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 42)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(42, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 43

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 43)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 43, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 44

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(44, value)

class UPFCBatch(DSSBatch):
    _cls_name = 'UPFC'
    _obj_cls = UPFC
    _cls_idx = 35


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which the input terminal (1) is connected.
        bus1=busname.1.3
        bus1=busname.1.2.3
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def bus2(self) -> List[str]:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of bus to which the output terminal (2) is connected.
        bus2=busname.1.2
        bus2=busname.1.2.3
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus2.setter
    def bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def refkv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: refkv
        DSS property index: 3

        Base Voltage expected at the output of the UPFC

        "refkv=0.24"
        """
        return BatchFloat64ArrayProxy(self, 3)

    @refkv.setter
    def refkv(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def pf(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pf
        DSS property index: 4

        Power factor target at the input terminal.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @pf.setter
    def pf(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def frequency(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: frequency
        DSS property index: 5

        UPFC working frequency.  Defaults to system default base frequency.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @frequency.setter
    def frequency(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 6

        Number of phases.  Defaults to 1 phase (2 terminals, 1 conductor per terminal).
        """
        return BatchInt32ArrayProxy(self, 6)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(6, value)

    @property
    def Xs(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xs
        DSS property index: 7

        Reactance of the series transformer of the UPFC, ohms (default=0.7540 ... 2 mH)
        """
        return BatchFloat64ArrayProxy(self, 7)

    @Xs.setter
    def Xs(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def Tol1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Tol1
        DSS property index: 8

        Tolerance in pu for the series PI controller
        Tol1=0.02 is the format used to define 2% tolerance (Default=2%)
        """
        return BatchFloat64ArrayProxy(self, 8)

    @Tol1.setter
    def Tol1(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def Mode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Mode
        DSS property index: 9

        Integer used to define the control mode of the UPFC: 

        0 = Off, 
        1 = Voltage regulator, 
        2 = Phase angle regulator, 
        3 = Dual mode
        4 = It is a control mode where the user can set two different set points to create a secure GAP, these references must be defined in the parameters RefkV and RefkV2. The only restriction when setting these values is that RefkV must be higher than RefkV2. 
        5 = In this mode the user can define the same GAP using two set points as in control mode 4. The only difference between mode 5 and mode 4 is that in mode 5, the UPFC controller performs dual control actions just as in control mode 3
        """
        return BatchInt32ArrayProxy(self, 9)

    @Mode.setter
    def Mode(self, value):
        self._set_batch_int32_array(9, value)

    @property
    def VpqMax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VpqMax
        DSS property index: 10

        Maximum voltage (in volts) delivered by the series voltage source (Default = 24 V)
        """
        return BatchFloat64ArrayProxy(self, 10)

    @VpqMax.setter
    def VpqMax(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def LossCurve(self) -> List[str]:
        """
        DSS property name: LossCurve
        DSS property index: 11

        Name of the XYCurve for describing the losses behavior as a function of the voltage at the input of the UPFC
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @LossCurve.setter
    def LossCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(11, value)
            return

        self._set_batch_string(11, value)

    @property
    def LossCurve_obj(self) -> List[str]:
        """
        DSS property name: LossCurve
        DSS property index: 11

        Name of the XYCurve for describing the losses behavior as a function of the voltage at the input of the UPFC
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @LossCurve_obj.setter
    def LossCurve_obj(self, value: XYcurve):
        self._set_batch_string(11, value)

    @property
    def VHLimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VHLimit
        DSS property index: 12

        High limit for the voltage at the input of the UPFC, if the voltage is above this value the UPFC turns off. This value is specified in Volts (default 300 V)
        """
        return BatchFloat64ArrayProxy(self, 12)

    @VHLimit.setter
    def VHLimit(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def VLLimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VLLimit
        DSS property index: 13

        low limit for the voltage at the input of the UPFC, if voltage is below this value the UPFC turns off. This value is specified in Volts (default 125 V)
        """
        return BatchFloat64ArrayProxy(self, 13)

    @VLLimit.setter
    def VLLimit(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def CLimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: CLimit
        DSS property index: 14

        Current Limit for the UPFC, if the current passing through the UPFC is higher than this value the UPFC turns off. This value is specified in Amps (Default 265 A)
        """
        return BatchFloat64ArrayProxy(self, 14)

    @CLimit.setter
    def CLimit(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def refkv2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: refkv2
        DSS property index: 15

        Base Voltage expected at the output of the UPFC for control modes 4 and 5.

        This reference must be lower than refkv, see control modes 4 and 5 for details
        """
        return BatchFloat64ArrayProxy(self, 15)

    @refkv2.setter
    def refkv2(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def kvarLimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvarLimit
        DSS property index: 16

        Maximum amount of reactive power (kvar) that can be absorved by the UPFC (Default = 5)
        """
        return BatchFloat64ArrayProxy(self, 16)

    @kvarLimit.setter
    def kvarLimit(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 17

        Name of harmonic spectrum for this source.  Default is "defaultUPFC", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 17)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(17, value)
            return

        self._set_batch_string(17, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 17

        Name of harmonic spectrum for this source.  Default is "defaultUPFC", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 17)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(17, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 18

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 19

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 19)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 19, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 20

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(20, value)

class UPFCControlBatch(DSSBatch):
    _cls_name = 'UPFCControl'
    _obj_cls = UPFCControl
    _cls_idx = 36


    @property
    def UPFCList(self) -> List[List[str]]:
        """
        DSS property name: UPFCList
        DSS property index: 1

        The list of all the UPFC devices to be controlled by this controller, If left empty, this control will apply for all UPFCs in the model.
        """
        return self._get_string_ll(1)

    @UPFCList.setter
    def UPFCList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 1, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 2

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 2)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 3

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 3)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 3, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 4

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(4, value)

class ESPVLControlBatch(DSSBatch):
    _cls_name = 'ESPVLControl'
    _obj_cls = ESPVLControl
    _cls_idx = 37


    @property
    def Element(self) -> List[str]:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @Element.setter
    def Element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def Element_obj(self) -> List[str]:
        """
        DSS property name: Element
        DSS property index: 1

        Full object name of the circuit element, typically a line or transformer, which the control is monitoring. There is no default; must be specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @Element_obj.setter
    def Element_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def Terminal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the ESPVLControl control is connected. 1 or 2, typically.  Default is 1. Make sure you have the direction on the power matching the sign of kWLimit.
        """
        return BatchInt32ArrayProxy(self, 2)

    @Terminal.setter
    def Terminal(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def Type(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Type
        DSS property index: 3

        Type of controller.  1= System Controller; 2= Local controller. 
        """
        return BatchInt32ArrayProxy(self, 3)

    @Type.setter
    def Type(self, value: Union[AnyStr, int, ESPVLControl.ESPVLControlType, List[AnyStr], List[Union[int, ESPVLControl.ESPVLControlType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(3, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(3, value)

    @property
    def Type_str(self) -> str:
        """
        DSS property name: Type
        DSS property index: 3

        Type of controller.  1= System Controller; 2= Local controller. 
        """
        return self._get_prop_string(3)

    @Type_str.setter
    def Type_str(self, value: AnyStr):
        self.Type = value

    @property
    def kWBand(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kWBand
        DSS property index: 4

        Bandwidth (kW) of the dead band around the target limit.No dispatch changes are attempted if the power in the monitored terminal stays within this band.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kWBand.setter
    def kWBand(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def kvarlimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvarlimit
        DSS property index: 5

        Max kvar to be delivered through the element.  Uses same dead band as kW.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kvarlimit.setter
    def kvarlimit(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def LocalControlList(self) -> List[List[str]]:
        """
        DSS property name: LocalControlList
        DSS property index: 6

        Array list of ESPVLControl local controller objects to be dispatched by System Controller. If not specified, all ESPVLControl devices with type=local in the circuit not attached to another controller are assumed to be part of this controller's fleet.
        """
        return self._get_string_ll(6)

    @LocalControlList.setter
    def LocalControlList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 6, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def LocalControlWeights(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: LocalControlWeights
        DSS property index: 7

        Array of proportional weights corresponding to each ESPVLControl local controller in the LocalControlList.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @LocalControlWeights.setter
    def LocalControlWeights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def PVSystemList(self) -> List[List[str]]:
        """
        DSS property name: PVSystemList
        DSS property index: 8

        Array list of PVSystem objects to be dispatched by a Local Controller. 
        """
        return self._get_string_ll(8)

    @PVSystemList.setter
    def PVSystemList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 8, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def PVSystemWeights(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: PVSystemWeights
        DSS property index: 9

        Array of proportional weights corresponding to each PVSystem in the PVSystemList.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 9)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @PVSystemWeights.setter
    def PVSystemWeights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def StorageList(self) -> List[List[str]]:
        """
        DSS property name: StorageList
        DSS property index: 10

        Array list of Storage objects to be dispatched by Local Controller. 
        """
        return self._get_string_ll(10)

    @StorageList.setter
    def StorageList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 10, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def StorageWeights(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: StorageWeights
        DSS property index: 11

        Array of proportional weights corresponding to each Storage object in the StorageControlList.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 11)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @StorageWeights.setter
    def StorageWeights(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(11, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 12

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 13

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 13)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:                    New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(14, value)

class IndMach012Batch(DSSBatch):
    _cls_name = 'IndMach012'
    _obj_cls = IndMach012
    _cls_idx = 38


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of Phases, this Induction Machine.  
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 2

        Bus to which the Induction Machine is connected.  May include specific node specification.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def kv(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kv
        DSS property index: 3

        Nominal rated (1.0 per unit) voltage, kV. For 2- and 3-phase machines, specify phase-phase kV. Otherwise, specify actual kV across each branch of the machine. If wye (star), specify phase-neutral kV. If delta or phase-phase connected, specify phase-phase kV.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kv.setter
    def kv(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def kW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kW
        DSS property index: 4

        Shaft Power, kW, for the Induction Machine.  A positive value denotes power for a load. 
        Negative value denotes an induction generator. 
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kW.setter
    def kW(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def pf(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pf
        DSS property index: 5

        [Read Only] Present power factor for the machine. 
        """
        return BatchFloat64ArrayProxy(self, 5)

    @pf.setter
    def pf(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 6

        Connection of stator: Delta or Wye. Default is Delta.
        """
        return BatchInt32ArrayProxy(self, 6)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(6, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(6, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 6

        Connection of stator: Delta or Wye. Default is Delta.
        """
        return self._get_prop_string(6)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVA
        DSS property index: 7

        Rated kVA for the machine.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @kVA.setter
    def kVA(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def H(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: H
        DSS property index: 8

        Per unit mass constant of the machine.  MW-sec/MVA.  Default is 1.0.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @H.setter
    def H(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def D(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: D
        DSS property index: 9

        Damping constant.  Usual range is 0 to 4. Default is 1.0.  Adjust to get damping in Dynamics mode,
        """
        return BatchFloat64ArrayProxy(self, 9)

    @D.setter
    def D(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def puRs(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: puRs
        DSS property index: 10

        Per unit stator resistance. Default is 0.0053.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @puRs.setter
    def puRs(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def puXs(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: puXs
        DSS property index: 11

        Per unit stator leakage reactance. Default is 0.106.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @puXs.setter
    def puXs(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def puRr(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: puRr
        DSS property index: 12

        Per unit rotor  resistance. Default is 0.007.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @puRr.setter
    def puRr(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def puXr(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: puXr
        DSS property index: 13

        Per unit rotor leakage reactance. Default is 0.12.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @puXr.setter
    def puXr(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def puXm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: puXm
        DSS property index: 14

        Per unit magnetizing reactance.Default is 4.0.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @puXm.setter
    def puXm(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def Slip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Slip
        DSS property index: 15

        Initial slip value. Default is 0.007
        """
        return BatchFloat64ArrayProxy(self, 15)

    @Slip.setter
    def Slip(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def MaxSlip(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: MaxSlip
        DSS property index: 16

        Max slip value to allow. Default is 0.1. Set this before setting slip.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @MaxSlip.setter
    def MaxSlip(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def SlipOption(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: SlipOption
        DSS property index: 17

        Option for slip model. One of {fixedslip | variableslip*  }
        """
        return BatchInt32ArrayProxy(self, 17)

    @SlipOption.setter
    def SlipOption(self, value: Union[AnyStr, int, IndMach012.IndMach012SlipOption, List[AnyStr], List[Union[int, IndMach012.IndMach012SlipOption]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(17, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(17, value)

    @property
    def SlipOption_str(self) -> str:
        """
        DSS property name: SlipOption
        DSS property index: 17

        Option for slip model. One of {fixedslip | variableslip*  }
        """
        return self._get_prop_string(17)

    @SlipOption_str.setter
    def SlipOption_str(self, value: AnyStr):
        self.SlipOption = value

    @property
    def Yearly(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 18

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 18)

    @Yearly.setter
    def Yearly(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(18, value)
            return

        self._set_batch_string(18, value)

    @property
    def Yearly_obj(self) -> List[str]:
        """
        DSS property name: Yearly
        DSS property index: 18

        LOADSHAPE object to use for yearly simulations.  Must be previously defined as a Loadshape object. Is set to the Daily load shape  when Daily is defined.  The daily load shape is repeated in this case. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. The default is no variation.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 18)

    @Yearly_obj.setter
    def Yearly_obj(self, value: LoadShape):
        self._set_batch_string(18, value)

    @property
    def Daily(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 19

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19)

    @Daily.setter
    def Daily(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(19, value)
            return

        self._set_batch_string(19, value)

    @property
    def Daily_obj(self) -> List[str]:
        """
        DSS property name: Daily
        DSS property index: 19

        LOADSHAPE object to use for daily simulations.  Must be previously defined as a Loadshape object of 24 hrs, typically. Set Status=Fixed to ignore Loadshape designation. Set to NONE to reset to no loadahape. Default is no variation (constant) if not defined. Side effect: Sets Yearly load shape if not already defined.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 19)

    @Daily_obj.setter
    def Daily_obj(self, value: LoadShape):
        self._set_batch_string(19, value)

    @property
    def Duty(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 20

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 20)

    @Duty.setter
    def Duty(self, value: Union[AnyStr, LoadShape]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(20, value)
            return

        self._set_batch_string(20, value)

    @property
    def Duty_obj(self) -> List[str]:
        """
        DSS property name: Duty
        DSS property index: 20

        LOADSHAPE object to use for duty cycle simulations.  Must be previously defined as a Loadshape object.  Typically would have time intervals less than 1 hr. Designate the number of points to solve using the Set Number=xxxx command. If there are fewer points in the actual shape, the shape is assumed to repeat.Set to NONE to reset to no loadahape. Set Status=Fixed to ignore Loadshape designation.  Defaults to Daily curve If not specified.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 20)

    @Duty_obj.setter
    def Duty_obj(self, value: LoadShape):
        self._set_batch_string(20, value)

    @property
    def Debugtrace(self) -> List[bool]:
        """
        DSS property name: Debugtrace
        DSS property index: 21

        [Yes | No*] Write DebugTrace file.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 21)
        ]
    @Debugtrace.setter
    def Debugtrace(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 21, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 22

        Name of harmonic voltage or current spectrum for this IndMach012. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 22)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(22, value)
            return

        self._set_batch_string(22, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 22

        Name of harmonic voltage or current spectrum for this IndMach012. Voltage behind Xd" for machine - default. Current injection for inverter. Default value is "default", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 22)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(22, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 23

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 24

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 24)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 24, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 25

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(25, value)

class GICsourceBatch(DSSBatch):
    _cls_name = 'GICsource'
    _obj_cls = GICsource
    _cls_idx = 39


    @property
    def Volts(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Volts
        DSS property index: 1

        Voltage magnitude, in volts, of the GIC voltage induced across the associated line. When specified, induced voltage is assumed defined by Voltage and Angle properties. 

        Specify this value

        OR

        EN, EE, lat1, lon1, lat2, lon2. 

        Not both!!  Last one entered will take precedence. Assumed identical in each phase of the Line object.
        """
        return BatchFloat64ArrayProxy(self, 1)

    @Volts.setter
    def Volts(self, value):
        self._set_batch_float64_array(1, value)

    @property
    def angle(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: angle
        DSS property index: 2

        Phase angle in degrees of first phase. Default=0.0.  See Voltage property
        """
        return BatchFloat64ArrayProxy(self, 2)

    @angle.setter
    def angle(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def frequency(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: frequency
        DSS property index: 3

        Source frequency.  Defaults to  0.1 Hz. So GICSource=0 at power frequency.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @frequency.setter
    def frequency(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 4

        Number of phases.  Defaults to 3. All three phases are assumed in phase (zero sequence)
        """
        return BatchInt32ArrayProxy(self, 4)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(4, value)

    @property
    def EN(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: EN
        DSS property index: 5

        Northward Electric field (V/km). If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @EN.setter
    def EN(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def EE(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: EE
        DSS property index: 6

        Eastward Electric field (V/km).  If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @EE.setter
    def EE(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def Lat1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lat1
        DSS property index: 7

        Latitude of Bus1 of the line(degrees)
        """
        return BatchFloat64ArrayProxy(self, 7)

    @Lat1.setter
    def Lat1(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def Lon1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lon1
        DSS property index: 8

        Longitude of Bus1 of the line (degrees)
        """
        return BatchFloat64ArrayProxy(self, 8)

    @Lon1.setter
    def Lon1(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def Lat2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lat2
        DSS property index: 9

        Latitude of Bus2 of the line (degrees)
        """
        return BatchFloat64ArrayProxy(self, 9)

    @Lat2.setter
    def Lat2(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def Lon2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lon2
        DSS property index: 10

        Longitude of Bus2 of the line (degrees)
        """
        return BatchFloat64ArrayProxy(self, 10)

    @Lon2.setter
    def Lon2(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 11

        Not used.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(11, value)
            return

        self._set_batch_string(11, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 11

        Not used.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 11)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(11, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 12

        Not used.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 13

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 13)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 13, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 14

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(14, value)

class AutoTransBatch(DSSBatch):
    _cls_name = 'AutoTrans'
    _obj_cls = AutoTrans
    _cls_idx = 40


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of phases this AutoTrans. Default is 3.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def windings(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: windings
        DSS property index: 2

        Number of windings, this AutoTranss. (Also is the number of terminals) Default is 2. This property triggers memory allocation for the AutoTrans and will cause other properties to revert to default values.
        """
        return BatchInt32ArrayProxy(self, 2)

    @windings.setter
    def windings(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def wdg(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: wdg
        DSS property index: 3

        Set this = to the number of the winding you wish to define.  Then set the values for this winding.  Winding 1 is always the Series winding. Winding 2 is always Common winding (wye connected). Repeat for each winding.  Alternatively, use the array collections (buses, kVAs, etc.) to define the windings.  Note: reactances are BETWEEN pairs of windings; they are not the property of a single winding.
        """
        return BatchInt32ArrayProxy(self, 3)

    @wdg.setter
    def wdg(self, value):
        self._set_batch_int32_array(3, value)

    @property
    def bus(self) -> List[List[str]]:
        """
        DSS property name: bus
        DSS property index: 4

        Bus connection spec for this winding.
        """
        return self._get_string_ll(4)

    @bus.setter
    def bus(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 4, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def conn(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {Series, wye*, Delta, LN, LL }. Default is "wye" with the neutral solidly grounded. 
        For AutoTrans, Winding 1 is always Series and Winding 2 (the Common winding) is always Wye. 
        If only 2 windings, no need to specify connections.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 5)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @conn.setter
    def conn(self, value: Union[List[Union[int,AutoTrans.AutoTransConnection]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 5, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(5, value)

    @property
    def conn_str(self) -> List[List[str]]:
        """
        DSS property name: conn
        DSS property index: 5

        Connection of this winding {Series, wye*, Delta, LN, LL }. Default is "wye" with the neutral solidly grounded. 
        For AutoTrans, Winding 1 is always Series and Winding 2 (the Common winding) is always Wye. 
        If only 2 windings, no need to specify connections.
        """
        return self._get_string_ll(5)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def kV(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kV
        DSS property index: 6

        For 2-or 3-phase, enter phase-phase kV rating.  Otherwise, kV rating of the actual winding. Specify H terminal kV rating for Series winding.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 6)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kV.setter
    def kV(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def kVA(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVA
        DSS property index: 7

        Base kVA rating of the winding. Side effect: forces change of max normal and emerg kVA ratings.If 2-winding AutoTrans, forces other winding to same value. When winding 1 is defined, all other windings are defaulted to the same rating and the first two winding resistances are defaulted to the %loadloss value.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVA.setter
    def kVA(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def tap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: tap
        DSS property index: 8

        Per unit tap that this winding is on.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 8)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @tap.setter
    def tap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def pctR(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: %R
        DSS property index: 9

        Percent ac resistance this winding.  This value is for the power flow model.Is derived from the full load losses in the transformer test report.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 9)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @pctR.setter
    def pctR(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(9, value)

    @property
    def Rdcohms(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Rdcohms
        DSS property index: 10

        Winding dc resistance in OHMS. Specify this for GIC analysis. From transformer test report (divide by number of phases). Defaults to 85% of %R property (the ac value that includes stray losses).
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 10)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Rdcohms.setter
    def Rdcohms(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Core(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Core
        DSS property index: 11

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis in auxiliary programs. Not used inside OpenDSS.
        """
        return BatchInt32ArrayProxy(self, 11)

    @Core.setter
    def Core(self, value: Union[AnyStr, int, CoreType, List[AnyStr], List[Union[int, CoreType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(11, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(11, value)

    @property
    def Core_str(self) -> str:
        """
        DSS property name: Core
        DSS property index: 11

        {Shell*|5-leg|3-Leg|1-phase|core-1-phase|4-leg} Core Type. Used for GIC analysis in auxiliary programs. Not used inside OpenDSS.
        """
        return self._get_prop_string(11)

    @Core_str.setter
    def Core_str(self, value: AnyStr):
        self.Core = value

    @property
    def buses(self) -> List[List[str]]:
        """
        DSS property name: buses
        DSS property index: 12

        Use this to specify all the bus connections at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus]
        """
        return self._get_string_ll(12)

    @buses.setter
    def buses(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 12, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def conns(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus] ~ conns=(series, wye)
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 13)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @conns.setter
    def conns(self, value: Union[List[Union[int,AutoTrans.AutoTransConnection]], List[AnyStr]]): #TODO: list of lists
        if len(value) and not isinstance(value[0], int):
            value, value_ptr, value_count = self._prepare_string_array(value)
            for x in self._ffi.unpack(self.pointer[0], self.count[0]):
                self._lib.Obj_SetStringArray(x, 13, value_ptr, value_count)

            self._check_for_error()
            return

        self._set_batch_int32_array(13, value)

    @property
    def conns_str(self) -> List[List[str]]:
        """
        DSS property name: conns
        DSS property index: 13

        Use this to specify all the Winding connections at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus] ~ conns=(series, wye)
        """
        return self._get_string_ll(13)

    @conns_str.setter
    def conns_str(self, value: AnyStr):
        self.conns = value

    @property
    def kVs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVs
        DSS property index: 14

        Use this to specify the kV ratings of all windings at once using an array. Example:

        New AutoTrans.T1 buses=[Hbus, Xbus] 
        ~ conns=(series, wye)
        ~ kvs=(115, 12.47)

        See kV= property for voltage rules.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 14)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(14, value)

    @property
    def kVAs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVAs
        DSS property index: 15

        Use this to specify the kVA ratings of all windings at once using an array.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 15)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVAs.setter
    def kVAs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(15, value)

    @property
    def taps(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: taps
        DSS property index: 16

        Use this to specify the p.u. tap of all windings at once using an array.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 16)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @taps.setter
    def taps(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(16, value)

    @property
    def XHX(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XHX
        DSS property index: 17

        Use this to specify the percent reactance, H-L (winding 1 to winding 2).  Use for 2- or 3-winding AutoTranss. On the kVA base of winding 1(H-X). 
        """
        return BatchFloat64ArrayProxy(self, 17)

    @XHX.setter
    def XHX(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def XHT(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XHT
        DSS property index: 18

        Use this to specify the percent reactance, H-T (winding 1 to winding 3).  Use for 3-winding AutoTranss only. On the kVA base of winding 1(H-X). 
        """
        return BatchFloat64ArrayProxy(self, 18)

    @XHT.setter
    def XHT(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def XXT(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: XXT
        DSS property index: 19

        Use this to specify the percent reactance, L-T (winding 2 to winding 3).  Use for 3-winding AutoTranss only. On the kVA base of winding 1(H-X).  
        """
        return BatchFloat64ArrayProxy(self, 19)

    @XXT.setter
    def XXT(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def XSCarray(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: XSCarray
        DSS property index: 20

        Use this to specify the percent reactance between all pairs of windings as an array. All values are on the kVA base of winding 1.  The order of the values is as follows:

        (x12 13 14... 23 24.. 34 ..)  

        There will be n(n-1)/2 values, where n=number of windings.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 20)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @XSCarray.setter
    def XSCarray(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(20, value)

    @property
    def thermal(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: thermal
        DSS property index: 21

        Thermal time constant of the AutoTrans in hours.  Typically about 2.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @thermal.setter
    def thermal(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def n(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: n
        DSS property index: 22

        n Exponent for thermal properties in IEEE C57.  Typically 0.8.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @n.setter
    def n(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def m(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: m
        DSS property index: 23

        m Exponent for thermal properties in IEEE C57.  Typically 0.9 - 1.0
        """
        return BatchFloat64ArrayProxy(self, 23)

    @m.setter
    def m(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def flrise(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: flrise
        DSS property index: 24

        Temperature rise, deg C, for full load.  Default is 65.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @flrise.setter
    def flrise(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def hsrise(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: hsrise
        DSS property index: 25

        Hot spot temperature rise, deg C.  Default is 15.
        """
        return BatchFloat64ArrayProxy(self, 25)

    @hsrise.setter
    def hsrise(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def pctloadloss(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %loadloss
        DSS property index: 26

        Percent load loss at full load. The %R of the High and Low windings (1 and 2) are adjusted to agree at rated kVA loading.
        """
        return BatchFloat64ArrayProxy(self, 26)

    @pctloadloss.setter
    def pctloadloss(self, value):
        self._set_batch_float64_array(26, value)

    @property
    def pctnoloadloss(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %noloadloss
        DSS property index: 27

        Percent no load losses at rated excitatation voltage. Default is 0. Converts to a resistance in parallel with the magnetizing impedance in each winding.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @pctnoloadloss.setter
    def pctnoloadloss(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def normhkVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normhkVA
        DSS property index: 28

        Normal maximum kVA rating of H winding (winding 1+2).  Usually 100% - 110% ofmaximum nameplate rating, depending on load shape. Defaults to 110% of kVA rating of Winding 1.
        """
        return BatchFloat64ArrayProxy(self, 28)

    @normhkVA.setter
    def normhkVA(self, value):
        self._set_batch_float64_array(28, value)

    @property
    def emerghkVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emerghkVA
        DSS property index: 29

        Emergency (contingency)  kVA rating of H winding (winding 1+2).  Usually 140% - 150% ofmaximum nameplate rating, depending on load shape. Defaults to 150% of kVA rating of Winding 1.
        """
        return BatchFloat64ArrayProxy(self, 29)

    @emerghkVA.setter
    def emerghkVA(self, value):
        self._set_batch_float64_array(29, value)

    @property
    def sub(self) -> List[bool]:
        """
        DSS property name: sub
        DSS property index: 30

        ={Yes|No}  Designates whether this AutoTrans is to be considered a substation.Default is No.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 30)
        ]
    @sub.setter
    def sub(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 30, value)

    @property
    def MaxTap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: MaxTap
        DSS property index: 31

        Max per unit tap for the active winding.  Default is 1.10
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 31)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @MaxTap.setter
    def MaxTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(31, value)

    @property
    def MinTap(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: MinTap
        DSS property index: 32

        Min per unit tap for the active winding.  Default is 0.90
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 32)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @MinTap.setter
    def MinTap(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(32, value)

    @property
    def NumTaps(self) -> List[npt.NDArray[np.int32]]:
        """
        DSS property name: NumTaps
        DSS property index: 33

        Total number of taps between min and max tap.  Default is 32 (16 raise and 16 lower taps about the neutral position). The neutral position is not counted.
        """
        return [
            self._get_int32_array(self._lib.Obj_GetInt32Array, x, 33)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @NumTaps.setter
    def NumTaps(self, value: npt.NDArray[np.int32]): #TODO: list of arrays, matrix
        self._set_batch_int32_array(33, value)

    @property
    def subname(self) -> List[str]:
        """
        DSS property name: subname
        DSS property index: 34

        Substation Name. Optional. Default is null. If specified, printed on plots
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 34) 

    @subname.setter
    def subname(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 34, value)

    @property
    def pctimag(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %imag
        DSS property index: 35

        Percent magnetizing current. Default=0.0. Magnetizing branch is in parallel with windings in each phase. Also, see "ppm_antifloat".
        """
        return BatchFloat64ArrayProxy(self, 35)

    @pctimag.setter
    def pctimag(self, value):
        self._set_batch_float64_array(35, value)

    @property
    def ppm_antifloat(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ppm_antifloat
        DSS property index: 36

        Default=1 ppm.  Parts per million of AutoTrans winding VA rating connected to ground to protect against accidentally floating a winding without a reference. If positive then the effect is adding a very large reactance to ground.  If negative, then a capacitor.
        """
        return BatchFloat64ArrayProxy(self, 36)

    @ppm_antifloat.setter
    def ppm_antifloat(self, value):
        self._set_batch_float64_array(36, value)

    @property
    def pctRs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: %Rs
        DSS property index: 37

        Use this property to specify all the winding ac %resistances using an array. Example:

        New AutoTrans.T1 buses=[Hibus, lowbus] ~ %Rs=(0.2  0.3)
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 37)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @pctRs.setter
    def pctRs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(37, value)

    @property
    def XRConst(self) -> List[bool]:
        """
        DSS property name: XRConst
        DSS property index: 38

        ={Yes|No} Default is NO. Signifies whether or not the X/R is assumed contant for harmonic studies.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 38)
        ]
    @XRConst.setter
    def XRConst(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 38, value)

    @property
    def LeadLag(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: LeadLag
        DSS property index: 39

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return BatchInt32ArrayProxy(self, 39)

    @LeadLag.setter
    def LeadLag(self, value: Union[AnyStr, int, PhaseSequence, List[AnyStr], List[Union[int, PhaseSequence]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(39, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(39, value)

    @property
    def LeadLag_str(self) -> str:
        """
        DSS property name: LeadLag
        DSS property index: 39

        {Lead | Lag (default) | ANSI (default) | Euro } Designation in mixed Delta-wye connections the relationship between HV to LV winding. Default is ANSI 30 deg lag, e.g., Dy1 of Yd1 vector group. To get typical European Dy11 connection, specify either "lead" or "Euro"
        """
        return self._get_prop_string(39)

    @LeadLag_str.setter
    def LeadLag_str(self, value: AnyStr):
        self.LeadLag = value

    def WdgCurrents(self) -> List[str]:
        """
        DSS property name: WdgCurrents
        DSS property index: 40

        (Read only) Makes winding currents available via return on query (? AutoTrans.TX.WdgCurrents). Order: Phase 1, Wdg 1, Wdg 2, ..., Phase 2 ...
        """
        # []
        # StringSilentROFunction
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 40)

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 41

        Normal rated current.
        """
        return BatchFloat64ArrayProxy(self, 41)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(41, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 42

        Maximum or emerg current.
        """
        return BatchFloat64ArrayProxy(self, 42)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(42, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 43

        Failure rate per year.
        """
        return BatchFloat64ArrayProxy(self, 43)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(43, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 44

        Percent of failures that become permanent.
        """
        return BatchFloat64ArrayProxy(self, 44)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(44, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 45

        Hours to repair.
        """
        return BatchFloat64ArrayProxy(self, 45)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(45, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 46

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 46)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(46, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 47

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 47)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 47, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 48

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(48, value)

class RegControlBatch(DSSBatch):
    _cls_name = 'RegControl'
    _obj_cls = RegControl
    _cls_idx = 21


    @property
    def transformer(self) -> List[str]:
        """
        DSS property name: transformer
        DSS property index: 1

        Name of Transformer or AutoTrans element to which the RegControl is connected. Do not specify the full object name; "Transformer" or "AutoTrans" is assumed for the object class.  Example:

        Transformer=Xfmr1
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @transformer.setter
    def transformer(self, value: Union[AnyStr, Transformer, AutoTrans]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def transformer_obj(self) -> List[str]:
        """
        DSS property name: transformer
        DSS property index: 1

        Name of Transformer or AutoTrans element to which the RegControl is connected. Do not specify the full object name; "Transformer" or "AutoTrans" is assumed for the object class.  Example:

        Transformer=Xfmr1
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @transformer_obj.setter
    def transformer_obj(self, value: Union[Transformer, AutoTrans]):
        self._set_batch_string(1, value)

    @property
    def winding(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: winding
        DSS property index: 2

        Number of the winding of the transformer element that the RegControl is monitoring. 1 or 2, typically.  Side Effect: Sets TAPWINDING property to the same winding.
        """
        return BatchInt32ArrayProxy(self, 2)

    @winding.setter
    def winding(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def vreg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: vreg
        DSS property index: 3

        Voltage regulator setting, in VOLTS, for the winding being controlled.  Multiplying this value times the ptratio should yield the voltage across the WINDING of the controlled transformer. Default is 120.0
        """
        return BatchFloat64ArrayProxy(self, 3)

    @vreg.setter
    def vreg(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def band(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: band
        DSS property index: 4

        Bandwidth in VOLTS for the controlled bus (see help for ptratio property).  Default is 3.0
        """
        return BatchFloat64ArrayProxy(self, 4)

    @band.setter
    def band(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def ptratio(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ptratio
        DSS property index: 5

        Ratio of the PT that converts the controlled winding voltage to the regulator control voltage. Default is 60.  If the winding is Wye, the line-to-neutral voltage is used.  Else, the line-to-line voltage is used. SIDE EFFECT: Also sets RemotePTRatio property.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @ptratio.setter
    def ptratio(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def CTprim(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: CTprim
        DSS property index: 6

        Rating, in Amperes, of the primary CT rating for which the line amps convert to control rated amps.The typical default secondary ampere rating is 0.2 Amps (check with manufacturer specs). Current at which the LDC voltages match the R and X settings.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @CTprim.setter
    def CTprim(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def R(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: R
        DSS property index: 7

        R setting on the line drop compensator in the regulator, expressed in VOLTS.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @R.setter
    def R(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def X(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X
        DSS property index: 8

        X setting on the line drop compensator in the regulator, expressed in VOLTS.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @X.setter
    def X(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def bus(self) -> List[str]:
        """
        DSS property name: bus
        DSS property index: 9

        Name of a bus (busname.nodename) in the system to use as the controlled bus instead of the bus to which the transformer winding is connected or the R and X line drop compensator settings.  Do not specify this value if you wish to use the line drop compensator settings.  Default is null string. Assumes the base voltage for this bus is the same as the transformer winding base specified above. Note: This bus (1-phase) WILL BE CREATED by the regulator control upon SOLVE if not defined by some other device. You can specify the node of the bus you wish to sample (defaults to 1). If specified, the RegControl is redefined as a 1-phase device since only one voltage is used.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 9) 

    @bus.setter
    def bus(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 9, value)

    @property
    def delay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: delay
        DSS property index: 10

        Time delay, in seconds, from when the voltage goes out of band to when the tap changing begins. This is used to determine which regulator control will act first. Default is 15.  You may specify any floating point number to achieve a model of whatever condition is necessary.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @delay.setter
    def delay(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def reversible(self) -> List[bool]:
        """
        DSS property name: reversible
        DSS property index: 11

        {Yes |No*} Indicates whether or not the regulator can be switched to regulate in the reverse direction. Default is No.Typically applies only to line regulators and not to LTC on a substation transformer.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 11)
        ]
    @reversible.setter
    def reversible(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 11, value)

    @property
    def revvreg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: revvreg
        DSS property index: 12

        Voltage setting in volts for operation in the reverse direction.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @revvreg.setter
    def revvreg(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def revband(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: revband
        DSS property index: 13

        Bandwidth for operating in the reverse direction.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @revband.setter
    def revband(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def revR(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: revR
        DSS property index: 14

        R line drop compensator setting for reverse direction.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @revR.setter
    def revR(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def revX(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: revX
        DSS property index: 15

        X line drop compensator setting for reverse direction.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @revX.setter
    def revX(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def tapdelay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: tapdelay
        DSS property index: 16

        Delay in sec between tap changes. Default is 2. This is how long it takes between changes after the first change.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @tapdelay.setter
    def tapdelay(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def debugtrace(self) -> List[bool]:
        """
        DSS property name: debugtrace
        DSS property index: 17

        {Yes | No* }  Default is no.  Turn this on to capture the progress of the regulator model for each control iteration.  Creates a separate file for each RegControl named "REG_name.CSV".
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 17)
        ]
    @debugtrace.setter
    def debugtrace(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 17, value)

    @property
    def maxtapchange(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: maxtapchange
        DSS property index: 18

        Maximum allowable tap change per control iteration in STATIC control mode.  Default is 16. 

        Set this to 1 to better approximate actual control action. 

        Set this to 0 to fix the tap in the current position.
        """
        return BatchInt32ArrayProxy(self, 18)

    @maxtapchange.setter
    def maxtapchange(self, value):
        self._set_batch_int32_array(18, value)

    @property
    def inversetime(self) -> List[bool]:
        """
        DSS property name: inversetime
        DSS property index: 19

        {Yes | No* } Default is no.  The time delay is adjusted inversely proportional to the amount the voltage is outside the band down to 10%.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 19)
        ]
    @inversetime.setter
    def inversetime(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 19, value)

    @property
    def tapwinding(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: tapwinding
        DSS property index: 20

        Winding containing the actual taps, if different than the WINDING property. Defaults to the same winding as specified by the WINDING property.
        """
        return BatchInt32ArrayProxy(self, 20)

    @tapwinding.setter
    def tapwinding(self, value):
        self._set_batch_int32_array(20, value)

    @property
    def vlimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: vlimit
        DSS property index: 21

        Voltage Limit for bus to which regulated winding is connected (e.g. first customer). Default is 0.0. Set to a value greater then zero to activate this function.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @vlimit.setter
    def vlimit(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def PTphase(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: PTphase
        DSS property index: 22

        For multi-phase transformers, the number of the phase being monitored or one of { MAX | MIN} for all phases. Default=1. Must be less than or equal to the number of phases. Ignored for regulated bus.
        """
        return BatchInt32ArrayProxy(self, 22)

    @PTphase.setter
    def PTphase(self, value: Union[AnyStr, int, RegControl.RegControlPhaseSelection, List[AnyStr], List[Union[int, RegControl.RegControlPhaseSelection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(22, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(22, value)

    @property
    def PTphase_str(self) -> str:
        """
        DSS property name: PTphase
        DSS property index: 22

        For multi-phase transformers, the number of the phase being monitored or one of { MAX | MIN} for all phases. Default=1. Must be less than or equal to the number of phases. Ignored for regulated bus.
        """
        return self._get_prop_string(22)

    @PTphase_str.setter
    def PTphase_str(self, value: AnyStr):
        self.PTphase = value

    @property
    def revThreshold(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: revThreshold
        DSS property index: 23

        kW reverse power threshold for reversing the direction of the regulator. Default is 100.0 kw.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @revThreshold.setter
    def revThreshold(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def revDelay(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: revDelay
        DSS property index: 24

        Time Delay in seconds (s) for executing the reversing action once the threshold for reversing has been exceeded. Default is 60 s.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @revDelay.setter
    def revDelay(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def revNeutral(self) -> List[bool]:
        """
        DSS property name: revNeutral
        DSS property index: 25

        {Yes | No*} Default is no. Set this to Yes if you want the regulator to go to neutral in the reverse direction or in cogen operation.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 25)
        ]
    @revNeutral.setter
    def revNeutral(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 25, value)

    @property
    def EventLog(self) -> List[bool]:
        """
        DSS property name: EventLog
        DSS property index: 26

        {Yes/True* | No/False} Default is YES for regulator control. Log control actions to Eventlog.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 26)
        ]
    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 26, value)

    @property
    def RemotePTRatio(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: RemotePTRatio
        DSS property index: 27

        When regulating a bus (the Bus= property is set), the PT ratio required to convert actual voltage at the remote bus to control voltage. Is initialized to PTratio property. Set this property after setting PTratio.
        """
        return BatchFloat64ArrayProxy(self, 27)

    @RemotePTRatio.setter
    def RemotePTRatio(self, value):
        self._set_batch_float64_array(27, value)

    @property
    def TapNum(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: TapNum
        DSS property index: 28

        An integer number indicating the tap position that the controlled transformer winding tap position is currently at, or is being set to.  If being set, and the value is outside the range of the transformer min or max tap, then set to the min or max tap position as appropriate. Default is 0
        """
        return BatchInt32ArrayProxy(self, 28)

    @TapNum.setter
    def TapNum(self, value):
        self._set_batch_int32_array(28, value)

    def Reset(self, value: bool):
        """
        DSS property name: Reset
        DSS property index: 29

        {Yes | No} If Yes, forces Reset of this RegControl.
        """
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 29, value)

    @property
    def LDC_Z(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: LDC_Z
        DSS property index: 30

        Z value for Beckwith LDC_Z control option. Volts adjustment at rated control current.
        """
        return BatchFloat64ArrayProxy(self, 30)

    @LDC_Z.setter
    def LDC_Z(self, value):
        self._set_batch_float64_array(30, value)

    @property
    def rev_Z(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: rev_Z
        DSS property index: 31

        Reverse Z value for Beckwith LDC_Z control option.
        """
        return BatchFloat64ArrayProxy(self, 31)

    @rev_Z.setter
    def rev_Z(self, value):
        self._set_batch_float64_array(31, value)

    @property
    def Cogen(self) -> List[bool]:
        """
        DSS property name: Cogen
        DSS property index: 32

        {Yes|No*} Default is No. The Cogen feature is activated. Continues looking forward if power reverses, but switches to reverse-mode LDC, vreg and band values.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 32)
        ]
    @Cogen.setter
    def Cogen(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 32, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 33

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 33)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(33, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 34

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 34)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 34, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 35

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(35, value)

class InvControlBatch(DSSBatch):
    _cls_name = 'InvControl'
    _obj_cls = InvControl
    _cls_idx = 41


    @property
    def DERList(self) -> List[List[str]]:
        """
        DSS property name: DERList
        DSS property index: 1

        Array list of PVSystem and/or Storage elements to be controlled. If not specified, all PVSystem and Storage in the circuit are assumed to be controlled by this control. 

        No capability of hierarchical control between two controls for a single element is implemented at this time.
        """
        return self._get_string_ll(1)

    @DERList.setter
    def DERList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 1, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def Mode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Mode
        DSS property index: 2

        Smart inverter function in which the InvControl will control the PC elements specified in DERList, according to the options below:

        Must be one of: {VOLTVAR* | VOLTWATT | DYNAMICREACCURR | WATTPF | WATTVAR} 
        if the user desires to use modes simultaneously, then set the CombiMode property. Setting the Mode to any valid value disables combination mode.

        In volt-var mode (Default). This mode attempts to CONTROL the vars, according to one or two volt-var curves, depending on the monitored voltages, present active power output, and the capabilities of the PVSystem/Storage. 

        In volt-watt mode. This mode attempts to LIMIT the watts, according to one defined volt-watt curve, depending on the monitored voltages and the capabilities of the PVSystem/Storage. 

        In dynamic reactive current mode. This mode attempts to increasingly counter deviations by CONTROLLING vars, depending on the monitored voltages, present active power output, and the capabilities of the of the PVSystem/Storage.

        In watt-pf mode. This mode attempts to CONTROL the vars, according to a watt-pf curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 

        In watt-var mode. This mode attempts to CONTROL the vars, according to a watt-var curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 
        """
        return BatchInt32ArrayProxy(self, 2)

    @Mode.setter
    def Mode(self, value: Union[AnyStr, int, InvControl.InvControlControlMode, List[AnyStr], List[Union[int, InvControl.InvControlControlMode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(2, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(2, value)

    @property
    def Mode_str(self) -> str:
        """
        DSS property name: Mode
        DSS property index: 2

        Smart inverter function in which the InvControl will control the PC elements specified in DERList, according to the options below:

        Must be one of: {VOLTVAR* | VOLTWATT | DYNAMICREACCURR | WATTPF | WATTVAR} 
        if the user desires to use modes simultaneously, then set the CombiMode property. Setting the Mode to any valid value disables combination mode.

        In volt-var mode (Default). This mode attempts to CONTROL the vars, according to one or two volt-var curves, depending on the monitored voltages, present active power output, and the capabilities of the PVSystem/Storage. 

        In volt-watt mode. This mode attempts to LIMIT the watts, according to one defined volt-watt curve, depending on the monitored voltages and the capabilities of the PVSystem/Storage. 

        In dynamic reactive current mode. This mode attempts to increasingly counter deviations by CONTROLLING vars, depending on the monitored voltages, present active power output, and the capabilities of the of the PVSystem/Storage.

        In watt-pf mode. This mode attempts to CONTROL the vars, according to a watt-pf curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 

        In watt-var mode. This mode attempts to CONTROL the vars, according to a watt-var curve, depending on the present active power output, and the capabilities of the PVSystem/Storage. 
        """
        return self._get_prop_string(2)

    @Mode_str.setter
    def Mode_str(self, value: AnyStr):
        self.Mode = value

    @property
    def CombiMode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: CombiMode
        DSS property index: 3

        Combination of smart inverter functions in which the InvControl will control the PC elements in DERList, according to the options below: 

        Must be a combination of the following: {VV_VW | VV_DRC}. Default is to not set this property, in which case the single control mode in Mode is active.  

        In combined VV_VW mode, both volt-var and volt-watt control modes are active simultaneously.  See help individually for volt-var mode and volt-watt mode in Mode property.
        Note that the PVSystem/Storage will attempt to achieve both the volt-watt and volt-var set-points based on the capabilities of the inverter in the PVSystem/Storage (kVA rating, etc), any limits set on maximum active power,

        In combined VV_DRC, both the volt-var and the dynamic reactive current modes are simultaneously active.
        """
        return BatchInt32ArrayProxy(self, 3)

    @CombiMode.setter
    def CombiMode(self, value: Union[AnyStr, int, InvControl.InvControlCombiMode, List[AnyStr], List[Union[int, InvControl.InvControlCombiMode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(3, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(3, value)

    @property
    def CombiMode_str(self) -> str:
        """
        DSS property name: CombiMode
        DSS property index: 3

        Combination of smart inverter functions in which the InvControl will control the PC elements in DERList, according to the options below: 

        Must be a combination of the following: {VV_VW | VV_DRC}. Default is to not set this property, in which case the single control mode in Mode is active.  

        In combined VV_VW mode, both volt-var and volt-watt control modes are active simultaneously.  See help individually for volt-var mode and volt-watt mode in Mode property.
        Note that the PVSystem/Storage will attempt to achieve both the volt-watt and volt-var set-points based on the capabilities of the inverter in the PVSystem/Storage (kVA rating, etc), any limits set on maximum active power,

        In combined VV_DRC, both the volt-var and the dynamic reactive current modes are simultaneously active.
        """
        return self._get_prop_string(3)

    @CombiMode_str.setter
    def CombiMode_str(self, value: AnyStr):
        self.CombiMode = value

    @property
    def vvc_curve1(self) -> List[str]:
        """
        DSS property name: vvc_curve1
        DSS property index: 4

        Required for VOLTVAR mode. 

        Name of the XYCurve object containing the volt-var curve. The positive values of the y-axis of the volt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 4)

    @vvc_curve1.setter
    def vvc_curve1(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(4, value)
            return

        self._set_batch_string(4, value)

    @property
    def vvc_curve1_obj(self) -> List[str]:
        """
        DSS property name: vvc_curve1
        DSS property index: 4

        Required for VOLTVAR mode. 

        Name of the XYCurve object containing the volt-var curve. The positive values of the y-axis of the volt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 4)

    @vvc_curve1_obj.setter
    def vvc_curve1_obj(self, value: XYcurve):
        self._set_batch_string(4, value)

    @property
    def hysteresis_offset(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: hysteresis_offset
        DSS property index: 5

        Required for VOLTVAR mode, and defaults to 0. 

        for the times when the terminal voltage is decreasing, this is the off-set in per-unit voltage of a curve whose shape is the same as vvc_curve. It is offset by a certain negative value of per-unit voltage, which is defined by the base quantity for the x-axis of the volt-var curve (see help for voltage_curvex_ref)

        if the PVSystem/Storage terminal voltage has been increasing, and has not changed directions, utilize vvc_curve1 for the volt-var response. 

        if the PVSystem/Storage terminal voltage has been increasing and changes directions and begins to decrease, then move from utilizing vvc_curve1 to a volt-var curve of the same shape, but offset by a certain per-unit voltage value. 

        Maintain the same per-unit available var output level (unless head-room has changed due to change in active power or kva rating of PVSystem/Storage).  Per-unit var values remain the same for this internally constructed second curve (hysteresis curve). 

        if the terminal voltage has been decreasing and changes directions and begins to increase , then move from utilizing the offset curve, back to the vvc_curve1 for volt-var response, but stay at the same per-unit available vars output level.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @hysteresis_offset.setter
    def hysteresis_offset(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def voltage_curvex_ref(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: voltage_curvex_ref
        DSS property index: 6

        Required for VOLTVAR and VOLTWATT modes, and defaults to rated.  Possible values are: {rated|avg|ravg}.  

        Defines whether the x-axis values (voltage in per unit) for vvc_curve1 and the volt-watt curve corresponds to:

        rated. The rated voltage for the PVSystem/Storage object (1.0 in the volt-var curve equals rated voltage).

        avg. The average terminal voltage recorded over a certain number of prior power-flow solutions.
        with the avg setting, 1.0 per unit on the x-axis of the volt-var curve(s) corresponds to the average voltage.
        from a certain number of prior intervals.  See avgwindowlen parameter.

        ravg. Same as avg, with the exception that the avgerage terminal voltage is divided by the rated voltage.
        """
        return BatchInt32ArrayProxy(self, 6)

    @voltage_curvex_ref.setter
    def voltage_curvex_ref(self, value: Union[AnyStr, int, InvControl.InvControlVoltageCurveXRef, List[AnyStr], List[Union[int, InvControl.InvControlVoltageCurveXRef]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(6, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(6, value)

    @property
    def voltage_curvex_ref_str(self) -> str:
        """
        DSS property name: voltage_curvex_ref
        DSS property index: 6

        Required for VOLTVAR and VOLTWATT modes, and defaults to rated.  Possible values are: {rated|avg|ravg}.  

        Defines whether the x-axis values (voltage in per unit) for vvc_curve1 and the volt-watt curve corresponds to:

        rated. The rated voltage for the PVSystem/Storage object (1.0 in the volt-var curve equals rated voltage).

        avg. The average terminal voltage recorded over a certain number of prior power-flow solutions.
        with the avg setting, 1.0 per unit on the x-axis of the volt-var curve(s) corresponds to the average voltage.
        from a certain number of prior intervals.  See avgwindowlen parameter.

        ravg. Same as avg, with the exception that the avgerage terminal voltage is divided by the rated voltage.
        """
        return self._get_prop_string(6)

    @voltage_curvex_ref_str.setter
    def voltage_curvex_ref_str(self, value: AnyStr):
        self.voltage_curvex_ref = value

    @property
    def avgwindowlen(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: avgwindowlen
        DSS property index: 7

        Required for VOLTVAR mode and VOLTWATT mode, and defaults to 0 seconds (0s). 

        Sets the length of the averaging window over which the average PVSystem/Storage terminal voltage is calculated. 

        Units are indicated by appending s, m, or h to the integer value. 

        The averaging window will calculate the average PVSystem/Storage terminal voltage over the specified period of time, up to and including the last power flow solution. 

        Note, if the solution stepsize is larger than the window length, then the voltage will be assumed to have been constant over the time-frame specified by the window length.
        """
        return BatchInt32ArrayProxy(self, 7)

    @avgwindowlen.setter
    def avgwindowlen(self, value):
        self._set_batch_int32_array(7, value)

    @property
    def voltwatt_curve(self) -> List[str]:
        """
        DSS property name: voltwatt_curve
        DSS property index: 8

        Required for VOLTWATT mode. 

        Name of the XYCurve object containing the volt-watt curve. 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in one of the options described in the VoltwattYAxis property. 
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @voltwatt_curve.setter
    def voltwatt_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(8, value)
            return

        self._set_batch_string(8, value)

    @property
    def voltwatt_curve_obj(self) -> List[str]:
        """
        DSS property name: voltwatt_curve
        DSS property index: 8

        Required for VOLTWATT mode. 

        Name of the XYCurve object containing the volt-watt curve. 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the PVSystem/Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in one of the options described in the VoltwattYAxis property. 
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 8)

    @voltwatt_curve_obj.setter
    def voltwatt_curve_obj(self, value: XYcurve):
        self._set_batch_string(8, value)

    @property
    def DbVMin(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DbVMin
        DSS property index: 9

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 0.95 per-unit voltage (referenced to the PVSystem/Storage object rated voltage or a windowed average value). 

        This parameter is the minimum voltage that defines the voltage dead-band within which no reactive power is allowed to be generated. 
        """
        return BatchFloat64ArrayProxy(self, 9)

    @DbVMin.setter
    def DbVMin(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def DbVMax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DbVMax
        DSS property index: 10

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 1.05 per-unit voltage (referenced to the PVSystem object rated voltage or a windowed average value). 

        This parameter is the maximum voltage that defines the voltage dead-band within which no reactive power is allowed to be generated. 
        """
        return BatchFloat64ArrayProxy(self, 10)

    @DbVMax.setter
    def DbVMax(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def ArGraLowV(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ArGraLowV
        DSS property index: 11

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 0.1  

        This is a gradient, expressed in unit-less terms of %/%, to establish the ratio by which percentage capacitive reactive power production is increased as the  percent delta-voltage decreases below DbVMin. 

        Percent delta-voltage is defined as the present PVSystem/Storage terminal voltage minus the moving average voltage, expressed as a percentage of the rated voltage for the PVSystem/Storage object. 

        Note, the moving average voltage for the dynamic reactive current mode is different than the moving average voltage for the volt-watt and volt-var modes.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @ArGraLowV.setter
    def ArGraLowV(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def ArGraHiV(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ArGraHiV
        DSS property index: 12

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 0.1  

        This is a gradient, expressed in unit-less terms of %/%, to establish the ratio by which percentage inductive reactive power production is increased as the  percent delta-voltage decreases above DbVMax. 

        Percent delta-voltage is defined as the present PVSystem/Storage terminal voltage minus the moving average voltage, expressed as a percentage of the rated voltage for the PVSystem/Storage object. 

        Note, the moving average voltage for the dynamic reactive current mode is different than the mmoving average voltage for the volt-watt and volt-var modes.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @ArGraHiV.setter
    def ArGraHiV(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def DynReacavgwindowlen(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: DynReacavgwindowlen
        DSS property index: 13

        Required for the dynamic reactive current mode (DYNAMICREACCURR), and defaults to 1 seconds (1s). do not use a value smaller than 1.0 

        Sets the length of the averaging window over which the average PVSystem/Storage terminal voltage is calculated for the dynamic reactive current mode. 

        Units are indicated by appending s, m, or h to the integer value. 

        Typically this will be a shorter averaging window than the volt-var and volt-watt averaging window.

        The averaging window will calculate the average PVSystem/Storage terminal voltage over the specified period of time, up to and including the last power flow solution.  Note, if the solution stepsize is larger than the window length, then the voltage will be assumed to have been constant over the time-frame specified by the window length.
        """
        return BatchInt32ArrayProxy(self, 13)

    @DynReacavgwindowlen.setter
    def DynReacavgwindowlen(self, value):
        self._set_batch_int32_array(13, value)

    @property
    def deltaQ_Factor(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: deltaQ_Factor
        DSS property index: 14

        Required for the VOLTVAR and DYNAMICREACCURR modes.  Defaults to -1.0. 

        Defining -1.0, OpenDSS takes care internally of delta_Q itself. It tries to improve convergence as well as speed up process

        Sets the maximum change (in per unit) from the prior var output level to the desired var output level during each control iteration. 


        if numerical instability is noticed in solutions such as var sign changing from one control iteration to the next and voltages oscillating between two values with some separation, this is an indication of numerical instability (use the EventLog to diagnose). 

        if the maximum control iterations are exceeded, and no numerical instability is seen in the EventLog of via monitors, then try increasing the value of this parameter to reduce the number of control iterations needed to achieve the control criteria, and move to the power flow solution.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @deltaQ_Factor.setter
    def deltaQ_Factor(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def VoltageChangeTolerance(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VoltageChangeTolerance
        DSS property index: 15

        Defaults to 0.0001 per-unit voltage.  This parameter should only be modified by advanced users of the InvControl.  

        Tolerance in pu of the control loop convergence associated to the monitored voltage in pu. This value is compared with the difference of the monitored voltage in pu of the current and previous control iterations of the control loop

        This voltage tolerance value plus the var/watt tolerance value (VarChangeTolerance/ActivePChangeTolerance) determine, together, when to stop control iterations by the InvControl. 

        If an InvControl is controlling more than one PVSystem/Storage, each PVSystem/Storage has this quantity calculated independently, and so an individual PVSystem/Storage may reach the tolerance within different numbers of control iterations.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @VoltageChangeTolerance.setter
    def VoltageChangeTolerance(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def VarChangeTolerance(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VarChangeTolerance
        DSS property index: 16

        Required for VOLTVAR and DYNAMICREACCURR modes.  Defaults to 0.025 per unit of the base provided or absorbed reactive power described in the RefReactivePower property This parameter should only be modified by advanced users of the InvControl. 

        Tolerance in pu of the convergence of the control loop associated with reactive power. For the same control iteration, this value is compared to the difference, as an absolute value (without sign), between the desired reactive power value in pu and the output reactive power in pu of the controlled element.

        This reactive power tolerance value plus the voltage tolerance value (VoltageChangeTolerance) determine, together, when to stop control iterations by the InvControl.  

        If an InvControl is controlling more than one PVSystem/Storage, each PVSystem/Storage has this quantity calculated independently, and so an individual PVSystem/Storage may reach the tolerance within different numbers of control iterations.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @VarChangeTolerance.setter
    def VarChangeTolerance(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def VoltwattYAxis(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: VoltwattYAxis
        DSS property index: 17

        Required for VOLTWATT mode.  Must be one of: {PMPPPU* | PAVAILABLEPU| PCTPMPPPU | KVARATINGPU}.  The default is PMPPPU.  

        Units for the y-axis of the volt-watt curve while in volt-watt mode. 

        When set to PMPPPU. The y-axis corresponds to the value in pu of Pmpp property of the PVSystem. 

        When set to PAVAILABLEPU. The y-axis corresponds to the value in pu of the available active power of the PVSystem. 

        When set to PCTPMPPPU. The y-axis corresponds to the value in pu of the power Pmpp multiplied by 1/100 of the %Pmpp property of the PVSystem.

        When set to KVARATINGPU. The y-axis corresponds to the value in pu of the kVA property of the PVSystem.
        """
        return BatchInt32ArrayProxy(self, 17)

    @VoltwattYAxis.setter
    def VoltwattYAxis(self, value: Union[AnyStr, int, InvControl.InvControlVoltWattYAxis, List[AnyStr], List[Union[int, InvControl.InvControlVoltWattYAxis]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(17, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(17, value)

    @property
    def VoltwattYAxis_str(self) -> str:
        """
        DSS property name: VoltwattYAxis
        DSS property index: 17

        Required for VOLTWATT mode.  Must be one of: {PMPPPU* | PAVAILABLEPU| PCTPMPPPU | KVARATINGPU}.  The default is PMPPPU.  

        Units for the y-axis of the volt-watt curve while in volt-watt mode. 

        When set to PMPPPU. The y-axis corresponds to the value in pu of Pmpp property of the PVSystem. 

        When set to PAVAILABLEPU. The y-axis corresponds to the value in pu of the available active power of the PVSystem. 

        When set to PCTPMPPPU. The y-axis corresponds to the value in pu of the power Pmpp multiplied by 1/100 of the %Pmpp property of the PVSystem.

        When set to KVARATINGPU. The y-axis corresponds to the value in pu of the kVA property of the PVSystem.
        """
        return self._get_prop_string(17)

    @VoltwattYAxis_str.setter
    def VoltwattYAxis_str(self, value: AnyStr):
        self.VoltwattYAxis = value

    @property
    def RateofChangeMode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: RateofChangeMode
        DSS property index: 18

        Required for VOLTWATT and VOLTVAR mode.  Must be one of: {INACTIVE* | LPF | RISEFALL }.  The default is INACTIVE.  

        Auxiliary option that aims to limit the changes of the desired reactive power and the active power limit between time steps, the alternatives are listed below: 

        INACTIVE. It indicates there is no limit on rate of change imposed for either active or reactive power output. 

        LPF. A low-pass RC filter is applied to the desired reactive power and/or the active power limit to determine the output power as a function of a time constant defined in the LPFTau property. 

        RISEFALL. A rise and fall limit in the change of active and/or reactive power expressed in terms of pu power per second, defined in the RiseFallLimit, is applied to the desired reactive power and/or the active power limit. 
        """
        return BatchInt32ArrayProxy(self, 18)

    @RateofChangeMode.setter
    def RateofChangeMode(self, value: Union[AnyStr, int, InvControl.InvControlRateOfChangeMode, List[AnyStr], List[Union[int, InvControl.InvControlRateOfChangeMode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(18, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(18, value)

    @property
    def RateofChangeMode_str(self) -> str:
        """
        DSS property name: RateofChangeMode
        DSS property index: 18

        Required for VOLTWATT and VOLTVAR mode.  Must be one of: {INACTIVE* | LPF | RISEFALL }.  The default is INACTIVE.  

        Auxiliary option that aims to limit the changes of the desired reactive power and the active power limit between time steps, the alternatives are listed below: 

        INACTIVE. It indicates there is no limit on rate of change imposed for either active or reactive power output. 

        LPF. A low-pass RC filter is applied to the desired reactive power and/or the active power limit to determine the output power as a function of a time constant defined in the LPFTau property. 

        RISEFALL. A rise and fall limit in the change of active and/or reactive power expressed in terms of pu power per second, defined in the RiseFallLimit, is applied to the desired reactive power and/or the active power limit. 
        """
        return self._get_prop_string(18)

    @RateofChangeMode_str.setter
    def RateofChangeMode_str(self, value: AnyStr):
        self.RateofChangeMode = value

    @property
    def LPFTau(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: LPFTau
        DSS property index: 19

        Not required. Defaults to 0 seconds. 

        Filter time constant of the LPF option of the RateofChangeMode property. The time constant will cause the low-pass filter to achieve 95% of the target value in 3 time constants.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @LPFTau.setter
    def LPFTau(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def RiseFallLimit(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: RiseFallLimit
        DSS property index: 20

        Not required.  Defaults to no limit (-1). Must be -1 (no limit) or a positive value.  

        Limit in power in pu per second used by the RISEFALL option of the RateofChangeMode property.The base value for this ramp is defined in the RefReactivePower property and/or in VoltwattYAxis.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @RiseFallLimit.setter
    def RiseFallLimit(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def deltaP_Factor(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: deltaP_Factor
        DSS property index: 21

        Required for the VOLTWATT modes.  Defaults to -1.0. 

        Defining -1.0, OpenDSS takes care internally of delta_P itself. It tries to improve convergence as well as speed up process

        Defining between 0.05 and 1.0, it sets the maximum change (in unit of the y-axis) from the prior active power output level to the desired active power output level during each control iteration. 


        If numerical instability is noticed in solutions such as active power changing substantially from one control iteration to the next and/or voltages oscillating between two values with some separation, this is an indication of numerical instability (use the EventLog to diagnose). 

        If the maximum control iterations are exceeded, and no numerical instability is seen in the EventLog of via monitors, then try increasing the value of this parameter to reduce the number of control iterations needed to achieve the control criteria, and move to the power flow solution.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @deltaP_Factor.setter
    def deltaP_Factor(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def EventLog(self) -> List[bool]:
        """
        DSS property name: EventLog
        DSS property index: 22

        {Yes/True* | No/False} Default is YES for InvControl. Log control actions to Eventlog.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 22)
        ]
    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 22, value)

    @property
    def RefReactivePower(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: RefReactivePower
        DSS property index: 23

        Required for any mode that has VOLTVAR, DYNAMICREACCURR and WATTVAR. Defaults to VARAVAL.

        Defines the base reactive power for both the provided and absorbed reactive power, according to one of the following options: 

        VARAVAL. The base values for the provided and absorbed reactive power are equal to the available reactive power.

        VARMAX: The base values of the provided and absorbed reactive power are equal to the value defined in the kvarMax and kvarMaxAbs properties, respectively.
        """
        return BatchInt32ArrayProxy(self, 23)

    @RefReactivePower.setter
    def RefReactivePower(self, value: Union[AnyStr, int, InvControl.InvControlReactivePowerReference, List[AnyStr], List[Union[int, InvControl.InvControlReactivePowerReference]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(23, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(23, value)

    @property
    def RefReactivePower_str(self) -> str:
        """
        DSS property name: RefReactivePower
        DSS property index: 23

        Required for any mode that has VOLTVAR, DYNAMICREACCURR and WATTVAR. Defaults to VARAVAL.

        Defines the base reactive power for both the provided and absorbed reactive power, according to one of the following options: 

        VARAVAL. The base values for the provided and absorbed reactive power are equal to the available reactive power.

        VARMAX: The base values of the provided and absorbed reactive power are equal to the value defined in the kvarMax and kvarMaxAbs properties, respectively.
        """
        return self._get_prop_string(23)

    @RefReactivePower_str.setter
    def RefReactivePower_str(self, value: AnyStr):
        self.RefReactivePower = value

    @property
    def ActivePChangeTolerance(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: ActivePChangeTolerance
        DSS property index: 24

        Required for VOLTWATT. Default is 0.01

        Tolerance in pu of the convergence of the control loop associated with active power. For the same control iteration, this value is compared to the difference between the active power limit in pu resulted from the convergence process and the one resulted from the volt-watt function.

        This reactive power tolerance value plus the voltage tolerance value (VoltageChangeTolerance) determine, together, when to stop control iterations by the InvControl.  

        If an InvControl is controlling more than one PVSystem/Storage, each PVSystem/Storage has this quantity calculated independently, and so an individual PVSystem/Storage may reach the tolerance within different numbers of control iterations.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @ActivePChangeTolerance.setter
    def ActivePChangeTolerance(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def monVoltageCalc(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: monVoltageCalc
        DSS property index: 25

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=AVG. 
        """
        return BatchInt32ArrayProxy(self, 25)

    @monVoltageCalc.setter
    def monVoltageCalc(self, value: Union[AnyStr, int, MonitoredPhase, List[AnyStr], List[Union[int, MonitoredPhase]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(25, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(25, value)

    @property
    def monVoltageCalc_str(self) -> str:
        """
        DSS property name: monVoltageCalc
        DSS property index: 25

        Number of the phase being monitored or one of {AVG | MAX | MIN} for all phases. Default=AVG. 
        """
        return self._get_prop_string(25)

    @monVoltageCalc_str.setter
    def monVoltageCalc_str(self, value: AnyStr):
        self.monVoltageCalc = value

    @property
    def monBus(self) -> List[List[str]]:
        """
        DSS property name: monBus
        DSS property index: 26

        Name of monitored bus used by the voltage-dependente control modes. Default is bus of the controlled PVSystem/Storage or Storage.
        """
        return self._get_string_ll(26)

    @monBus.setter
    def monBus(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 26, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def MonBusesVbase(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: MonBusesVbase
        DSS property index: 27

        Array list of rated voltages of the buses and their nodes presented in the monBus property. This list may have different line-to-line and/or line-to-ground voltages.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 27)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @MonBusesVbase.setter
    def MonBusesVbase(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(27, value)

    @property
    def voltwattCH_curve(self) -> List[str]:
        """
        DSS property name: voltwattCH_curve
        DSS property index: 28

        Required for VOLTWATT mode for Storage element in CHARGING state. 

        The name of an XYCurve object that describes the variation in active power output (in per unit of maximum active power outut for the Storage). 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in: (1) per unit of maximum active power output capability of the Storage, or (2) maximum available active power output capability (defined by the parameter: VoltwattYAxis), corresponding to the terminal voltage (x-axis value in per unit). 

        No default -- must be specified for VOLTWATT mode for Storage element in CHARGING state.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 28)

    @voltwattCH_curve.setter
    def voltwattCH_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(28, value)
            return

        self._set_batch_string(28, value)

    @property
    def voltwattCH_curve_obj(self) -> List[str]:
        """
        DSS property name: voltwattCH_curve
        DSS property index: 28

        Required for VOLTWATT mode for Storage element in CHARGING state. 

        The name of an XYCurve object that describes the variation in active power output (in per unit of maximum active power outut for the Storage). 

        Units for the x-axis are per-unit voltage, which may be in per unit of the rated voltage for the Storage, or may be in per unit of the average voltage at the terminals over a user-defined number of prior solutions. 

        Units for the y-axis are either in: (1) per unit of maximum active power output capability of the Storage, or (2) maximum available active power output capability (defined by the parameter: VoltwattYAxis), corresponding to the terminal voltage (x-axis value in per unit). 

        No default -- must be specified for VOLTWATT mode for Storage element in CHARGING state.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 28)

    @voltwattCH_curve_obj.setter
    def voltwattCH_curve_obj(self, value: XYcurve):
        self._set_batch_string(28, value)

    @property
    def wattpf_curve(self) -> List[str]:
        """
        DSS property name: wattpf_curve
        DSS property index: 29

        Required for WATTPF mode.

        Name of the XYCurve object containing the watt-pf curve.
        The positive values of the y-axis are positive power factor values. The negative values of the the y-axis are negative power factor values. When positive, the output reactive power has the same direction of the output active power, and when negative, it has the opposite direction.
        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.

        The y-axis represents the power factor and the reference is power factor equal to 0. 

        For example, if the user wants to define the following XY coordinates: (0, 0.9); (0.2, 0.9); (0.5, -0.9); (1, -0.9).
        Try to plot them considering the y-axis reference equal to unity power factor.

        The user needs to translate this curve into a plot in which the y-axis reference is equal to 0 power factor.It means that two new XY coordinates need to be included, in this case they are: (0.35, 1); (0.35, -1).
        Try to plot them considering the y-axis reference equal to 0 power factor.
        The discontinity in 0.35pu is not a problem since var is zero for either power factor equal to 1 or -1.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 29)

    @wattpf_curve.setter
    def wattpf_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(29, value)
            return

        self._set_batch_string(29, value)

    @property
    def wattpf_curve_obj(self) -> List[str]:
        """
        DSS property name: wattpf_curve
        DSS property index: 29

        Required for WATTPF mode.

        Name of the XYCurve object containing the watt-pf curve.
        The positive values of the y-axis are positive power factor values. The negative values of the the y-axis are negative power factor values. When positive, the output reactive power has the same direction of the output active power, and when negative, it has the opposite direction.
        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.

        The y-axis represents the power factor and the reference is power factor equal to 0. 

        For example, if the user wants to define the following XY coordinates: (0, 0.9); (0.2, 0.9); (0.5, -0.9); (1, -0.9).
        Try to plot them considering the y-axis reference equal to unity power factor.

        The user needs to translate this curve into a plot in which the y-axis reference is equal to 0 power factor.It means that two new XY coordinates need to be included, in this case they are: (0.35, 1); (0.35, -1).
        Try to plot them considering the y-axis reference equal to 0 power factor.
        The discontinity in 0.35pu is not a problem since var is zero for either power factor equal to 1 or -1.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 29)

    @wattpf_curve_obj.setter
    def wattpf_curve_obj(self, value: XYcurve):
        self._set_batch_string(29, value)

    @property
    def wattvar_curve(self) -> List[str]:
        """
        DSS property name: wattvar_curve
        DSS property index: 30

        Required for WATTVAR mode. 

        Name of the XYCurve object containing the watt-var curve. The positive values of the y-axis of the watt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property.

        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 30)

    @wattvar_curve.setter
    def wattvar_curve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(30, value)
            return

        self._set_batch_string(30, value)

    @property
    def wattvar_curve_obj(self) -> List[str]:
        """
        DSS property name: wattvar_curve
        DSS property index: 30

        Required for WATTVAR mode. 

        Name of the XYCurve object containing the watt-var curve. The positive values of the y-axis of the watt-var curve represent values in pu of the provided base reactive power. The negative values of the y-axis are values in pu of the absorbed base reactive power. 
        Provided and absorbed base reactive power values are defined in the RefReactivePower property.

        Units for the x-axis are per-unit output active power, and the base active power is the Pmpp for PVSystem and kWrated for Storage.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 30)

    @wattvar_curve_obj.setter
    def wattvar_curve_obj(self, value: XYcurve):
        self._set_batch_string(30, value)

    @property
    def PVSystemList(self) -> List[List[str]]:
        """
        DSS property name: PVSystemList
        DSS property index: 31

        Deprecated, use DERList instead.
        """
        return self._get_string_ll(31)

    @PVSystemList.setter
    def PVSystemList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 31, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def Vsetpoint(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vsetpoint
        DSS property index: 32

        Required for Active Voltage Regulation (AVR).
        """
        return BatchFloat64ArrayProxy(self, 32)

    @Vsetpoint.setter
    def Vsetpoint(self, value):
        self._set_batch_float64_array(32, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 33

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 33)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(33, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 34

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 34)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 34, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 35

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(35, value)

class ExpControlBatch(DSSBatch):
    _cls_name = 'ExpControl'
    _obj_cls = ExpControl
    _cls_idx = 42


    @property
    def PVSystemList(self) -> List[List[str]]:
        """
        DSS property name: PVSystemList
        DSS property index: 1

        Array list of PVSystems to be controlled.

        If not specified, all PVSystems in the circuit are assumed to be controlled by this ExpControl.
        """
        return self._get_string_ll(1)

    @PVSystemList.setter
    def PVSystemList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 1, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def Vreg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vreg
        DSS property index: 2

        Per-unit voltage at which reactive power is zero; defaults to 1.0.

        This may dynamically self-adjust when VregTau > 0, limited by VregMin and VregMax.If imput as 0, Vreg will be initialized from a snapshot solution with no inverter Q.The equilibrium point of reactive power is also affected by Qbias
        """
        return BatchFloat64ArrayProxy(self, 2)

    @Vreg.setter
    def Vreg(self, value):
        self._set_batch_float64_array(2, value)

    @property
    def Slope(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Slope
        DSS property index: 3

        Per-unit reactive power injection / per-unit voltage deviation from Vreg; defaults to 50.

        Unlike InvControl, base reactive power is constant at the inverter kva rating.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @Slope.setter
    def Slope(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def VregTau(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VregTau
        DSS property index: 4

        Time constant for adaptive Vreg. Defaults to 1200 seconds.

        When the control injects or absorbs reactive power due to a voltage deviation from the Q=0 crossing of the volt-var curve, the Q=0 crossing will move toward the actual terminal voltage with this time constant. Over time, the effect is to gradually bring inverter reactive power to zero as the grid voltage changes due to non-solar effects. If zero, then Vreg stays fixed. IEEE1547-2018 requires adjustability from 300s to 5000s
        """
        return BatchFloat64ArrayProxy(self, 4)

    @VregTau.setter
    def VregTau(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def Qbias(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Qbias
        DSS property index: 5

        Equilibrium per-unit reactive power when V=Vreg; defaults to 0.

        Enter > 0 for lagging (capacitive) bias, < 0 for leading (inductive) bias.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @Qbias.setter
    def Qbias(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def VregMin(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VregMin
        DSS property index: 6

        Lower limit on adaptive Vreg; defaults to 0.95 per-unit
        """
        return BatchFloat64ArrayProxy(self, 6)

    @VregMin.setter
    def VregMin(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def VregMax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: VregMax
        DSS property index: 7

        Upper limit on adaptive Vreg; defaults to 1.05 per-unit
        """
        return BatchFloat64ArrayProxy(self, 7)

    @VregMax.setter
    def VregMax(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def QmaxLead(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: QmaxLead
        DSS property index: 8

        Limit on leading (inductive) reactive power injection, in per-unit of base kva; defaults to 0.44.For Category A inverters per P1547/D7, set this value to 0.25.

        Regardless of QmaxLead, the reactive power injection is still limited by dynamic headroom when actual real power output exceeds 0%
        """
        return BatchFloat64ArrayProxy(self, 8)

    @QmaxLead.setter
    def QmaxLead(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def QmaxLag(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: QmaxLag
        DSS property index: 9

        Limit on lagging (capacitive) reactive power injection, in per-unit of base kva; defaults to 0.44.

        For Category A inverters per P1547/D7, set this value to 0.25.Regardless of QmaxLag, the reactive power injection is still limited by dynamic headroom when actual real power output exceeds 0%
        """
        return BatchFloat64ArrayProxy(self, 9)

    @QmaxLag.setter
    def QmaxLag(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def EventLog(self) -> List[bool]:
        """
        DSS property name: EventLog
        DSS property index: 10

        {Yes/True* | No/False} Default is No for ExpControl. Log control actions to Eventlog.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 10)
        ]
    @EventLog.setter
    def EventLog(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 10, value)

    @property
    def DeltaQ_factor(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: DeltaQ_factor
        DSS property index: 11

        Convergence parameter; Defaults to 0.7. 

        Sets the maximum change (in per unit) from the prior var output level to the desired var output level during each control iteration. If numerical instability is noticed in solutions such as var sign changing from one control iteration to the next and voltages oscillating between two values with some separation, this is an indication of numerical instability (use the EventLog to diagnose). If the maximum control iterations are exceeded, and no numerical instability is seen in the EventLog of via monitors, then try increasing the value of this parameter to reduce the number of control iterations needed to achieve the control criteria, and move to the power flow solution.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @DeltaQ_factor.setter
    def DeltaQ_factor(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def PreferQ(self) -> List[bool]:
        """
        DSS property name: PreferQ
        DSS property index: 12

        {Yes/True* | No/False} Default is No for ExpControl.

        Curtails real power output as needed to meet the reactive power requirement. IEEE1547-2018 requires Yes, but the default is No for backward compatibility of OpenDSS models.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 12)
        ]
    @PreferQ.setter
    def PreferQ(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 12, value)

    @property
    def Tresponse(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Tresponse
        DSS property index: 13

        Open-loop response time for changes in Q.

        The value of Q reaches 90% of the target change within Tresponse, which corresponds to a low-pass filter having tau = Tresponse / 2.3026. The behavior is similar to LPFTAU in InvControl, but here the response time is input instead of the time constant. IEEE1547-2018 default is 10s for Catagory A and 5s for Category B, adjustable from 1s to 90s for both categories. However, the default is 0 for backward compatibility of OpenDSS models.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @Tresponse.setter
    def Tresponse(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def DERList(self) -> List[List[str]]:
        """
        DSS property name: DERList
        DSS property index: 14

        Alternative to PVSystemList for CIM export and import.

        However, storage is not actually implemented yet. Use fully qualified PVSystem names.
        """
        return self._get_string_ll(14)

    @DERList.setter
    def DERList(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 14, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 15

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 16

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 16)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 16, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 17

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(17, value)

class GICLineBatch(DSSBatch):
    _cls_name = 'GICLine'
    _obj_cls = GICLine
    _cls_idx = 43


    @property
    def bus1(self) -> List[str]:
        """
        DSS property name: bus1
        DSS property index: 1

        Name of bus to which the main terminal (1) is connected.
        bus1=busname
        bus1=busname.1.2.3
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @bus1.setter
    def bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def bus2(self) -> List[str]:
        """
        DSS property name: bus2
        DSS property index: 2

        Name of bus to which 2nd terminal is connected.
        bus2=busname
        bus2=busname.1.2.3

        No Default; must be specified.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @bus2.setter
    def bus2(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def Volts(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Volts
        DSS property index: 3

        Voltage magnitude, in volts, of the GIC voltage induced across this line. When spedified, voltage source is assumed defined by Voltage and Angle properties. 

        Specify this value

        OR

        EN, EE, lat1, lon1, lat2, lon2. 

        Not both!!  Last one entered will take precedence. Assumed identical in each phase of the Line object.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @Volts.setter
    def Volts(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def Angle(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Angle
        DSS property index: 4

        Phase angle in degrees of first phase. Default=0.0.  See Voltage property
        """
        return BatchFloat64ArrayProxy(self, 4)

    @Angle.setter
    def Angle(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def frequency(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: frequency
        DSS property index: 5

        Source frequency.  Defaults to 0.1 Hz.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @frequency.setter
    def frequency(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 6

        Number of phases.  Defaults to 3.
        """
        return BatchInt32ArrayProxy(self, 6)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(6, value)

    @property
    def R(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: R
        DSS property index: 7

        Resistance of line, ohms of impedance in series with GIC voltage source. 
        """
        return BatchFloat64ArrayProxy(self, 7)

    @R.setter
    def R(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def X(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: X
        DSS property index: 8

        Reactance at base frequency, ohms. Default = 0.0. This value is generally not important for GIC studies but may be used if desired.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @X.setter
    def X(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def C(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: C
        DSS property index: 9

        Value of line blocking capacitance in microfarads. Default = 0.0, implying that there is no line blocking capacitor.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @C.setter
    def C(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def EN(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: EN
        DSS property index: 10

        Northward Electric field (V/km). If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @EN.setter
    def EN(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def EE(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: EE
        DSS property index: 11

        Eastward Electric field (V/km).  If specified, Voltage and Angle are computed from EN, EE, lat and lon values.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @EE.setter
    def EE(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def Lat1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lat1
        DSS property index: 12

        Latitude of Bus1 (degrees)
        """
        return BatchFloat64ArrayProxy(self, 12)

    @Lat1.setter
    def Lat1(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def Lon1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lon1
        DSS property index: 13

        Longitude of Bus1 (degrees)
        """
        return BatchFloat64ArrayProxy(self, 13)

    @Lon1.setter
    def Lon1(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def Lat2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lat2
        DSS property index: 14

        Latitude of Bus2 (degrees)
        """
        return BatchFloat64ArrayProxy(self, 14)

    @Lat2.setter
    def Lat2(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def Lon2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Lon2
        DSS property index: 15

        Longitude of Bus2 (degrees)
        """
        return BatchFloat64ArrayProxy(self, 15)

    @Lon2.setter
    def Lon2(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 16

        Inherited Property for all PCElements. Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 16)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(16, value)
            return

        self._set_batch_string(16, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 16

        Inherited Property for all PCElements. Name of harmonic spectrum for this source.  Default is "defaultvsource", which is defined when the DSS starts.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 16)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(16, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 17

        Inherited Property for all PCElements. Base frequency for specification of reactance value.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 18

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 18)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 18, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 19

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(19, value)

class GICTransformerBatch(DSSBatch):
    _cls_name = 'GICTransformer'
    _obj_cls = GICTransformer
    _cls_idx = 44


    @property
    def BusH(self) -> List[str]:
        """
        DSS property name: BusH
        DSS property index: 1

        Name of High-side(H) bus. Examples:
        BusH=busname
        BusH=busname.1.2.3
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1) 

    @BusH.setter
    def BusH(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 1, value)

    @property
    def BusNH(self) -> List[str]:
        """
        DSS property name: BusNH
        DSS property index: 2

        Name of Neutral bus for H, or first, winding. Defaults to all phases connected to H-side bus, node 0, if not specified and transformer type is either GSU or YY. (Shunt Wye Connection to ground reference)For Auto, this is automatically set to the X bus.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @BusNH.setter
    def BusNH(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def BusX(self) -> List[str]:
        """
        DSS property name: BusX
        DSS property index: 3

        Name of Low-side(X) bus, if type=Auto or YY. 
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 3) 

    @BusX.setter
    def BusX(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 3, value)

    @property
    def BusNX(self) -> List[str]:
        """
        DSS property name: BusNX
        DSS property index: 4

        Name of Neutral bus for X, or Second, winding. Defaults to all phases connected to X-side bus, node 0, if not specified. (Shunt Wye Connection to ground reference)
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 4) 

    @BusNX.setter
    def BusNX(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 4, value)

    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 5

        Number of Phases. Default is 3.
        """
        return BatchInt32ArrayProxy(self, 5)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(5, value)

    @property
    def Type(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Type
        DSS property index: 6

        Type of transformer: {GSU* | Auto | YY}. Default is GSU.
        """
        return BatchInt32ArrayProxy(self, 6)

    @Type.setter
    def Type(self, value: Union[AnyStr, int, GICTransformer.GICTransformerType, List[AnyStr], List[Union[int, GICTransformer.GICTransformerType]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(6, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(6, value)

    @property
    def Type_str(self) -> str:
        """
        DSS property name: Type
        DSS property index: 6

        Type of transformer: {GSU* | Auto | YY}. Default is GSU.
        """
        return self._get_prop_string(6)

    @Type_str.setter
    def Type_str(self, value: AnyStr):
        self.Type = value

    @property
    def R1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: R1
        DSS property index: 7

        Resistance, each phase, ohms for H winding, (Series winding, if Auto). Default is 0.0001. If 
        """
        return BatchFloat64ArrayProxy(self, 7)

    @R1.setter
    def R1(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def R2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: R2
        DSS property index: 8

        Resistance, each phase, ohms for X winding, (Common winding, if Auto). Default is 0.0001. 
        """
        return BatchFloat64ArrayProxy(self, 8)

    @R2.setter
    def R2(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def KVLL1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: KVLL1
        DSS property index: 9

        Optional. kV LL rating for H winding (winding 1). Default is 500. Required if you are going to export vars for power flow analysis or enter winding resistances in percent.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @KVLL1.setter
    def KVLL1(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def KVLL2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: KVLL2
        DSS property index: 10

        Optional. kV LL rating for X winding (winding 2). Default is 138. Required if you are going to export vars for power flow analysis or enter winding resistances in percent..
        """
        return BatchFloat64ArrayProxy(self, 10)

    @KVLL2.setter
    def KVLL2(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def MVA(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: MVA
        DSS property index: 11

        Optional. MVA Rating assumed Transformer. Default is 100. Used for computing vars due to GIC and winding resistances if kV and MVA ratings are specified.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @MVA.setter
    def MVA(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def VarCurve(self) -> List[str]:
        """
        DSS property name: VarCurve
        DSS property index: 12

        Optional. XYCurve object name. Curve is expected as TOTAL pu vars vs pu GIC amps/phase. Vars are in pu of the MVA property. No Default value. Required only if you are going to export vars for power flow analysis. See K property.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 12)

    @VarCurve.setter
    def VarCurve(self, value: Union[AnyStr, XYcurve]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(12, value)
            return

        self._set_batch_string(12, value)

    @property
    def VarCurve_obj(self) -> List[str]:
        """
        DSS property name: VarCurve
        DSS property index: 12

        Optional. XYCurve object name. Curve is expected as TOTAL pu vars vs pu GIC amps/phase. Vars are in pu of the MVA property. No Default value. Required only if you are going to export vars for power flow analysis. See K property.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 12)

    @VarCurve_obj.setter
    def VarCurve_obj(self, value: XYcurve):
        self._set_batch_string(12, value)

    @property
    def pctR1(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %R1
        DSS property index: 13

        Optional. Percent Resistance, each phase, for H winding (1), (Series winding, if Auto). Default is 0.2. 

        Alternative way to enter R1 value. It is the actual resistances in ohmns that matter. MVA and kV should be specified.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @pctR1.setter
    def pctR1(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def pctR2(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %R2
        DSS property index: 14

        Optional. Percent Resistance, each phase, for X winding (2), (Common winding, if Auto). Default is 0.2. 

        Alternative way to enter R2 value. It is the actual resistances in ohms that matter. MVA and kV should be specified.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @pctR2.setter
    def pctR2(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def K(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: K
        DSS property index: 15

        Mvar K factor. Default way to convert GIC Amps in H winding (winding 1) to Mvar. Default is 2.2. Commonly-used simple multiplier for estimating Mvar losses for power flow analysis. 

        Mvar = K * kvLL * GIC per phase / 1000 

        Mutually exclusive with using the VarCurve property and pu curves.If you specify this (default), VarCurve is ignored.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @K.setter
    def K(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def normamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: normamps
        DSS property index: 16

        Normal rated current.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @normamps.setter
    def normamps(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def emergamps(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: emergamps
        DSS property index: 17

        Maximum or emerg current.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @emergamps.setter
    def emergamps(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def faultrate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: faultrate
        DSS property index: 18

        Failure rate per year.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @faultrate.setter
    def faultrate(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def pctperm(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: pctperm
        DSS property index: 19

        Percent of failures that become permanent.
        """
        return BatchFloat64ArrayProxy(self, 19)

    @pctperm.setter
    def pctperm(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def repair(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: repair
        DSS property index: 20

        Hours to repair.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @repair.setter
    def repair(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 21

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 22

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 22)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 22, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 23

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(23, value)

class VSConverterBatch(DSSBatch):
    _cls_name = 'VSConverter'
    _obj_cls = VSConverter
    _cls_idx = 45


    @property
    def phases(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: phases
        DSS property index: 1

        Number of AC plus DC conductors. Default is 4. AC phases numbered before DC conductors.
        """
        return BatchInt32ArrayProxy(self, 1)

    @phases.setter
    def phases(self, value):
        self._set_batch_int32_array(1, value)

    @property
    def Bus1(self) -> List[str]:
        """
        DSS property name: Bus1
        DSS property index: 2

        Name of converter bus, containing both AC and DC conductors. Bus2 is always ground.
        """

        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 2) 

    @Bus1.setter
    def Bus1(self, value: AnyStr): #TODO: list of AnyStr
        if not isinstance(value, bytes):
            value = value.encode(self._api_util.codec)
        self._lib.Batch_SetString(self.pointer[0], self.count[0], 2, value)

    @property
    def kVac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVac
        DSS property index: 3

        Nominal AC line-neutral voltage in kV. Must be specified > 0.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kVac.setter
    def kVac(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def kVdc(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVdc
        DSS property index: 4

        Nominal DC voltage in kV. Must be specified > 0.
        """
        return BatchFloat64ArrayProxy(self, 4)

    @kVdc.setter
    def kVdc(self, value):
        self._set_batch_float64_array(4, value)

    @property
    def kW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kW
        DSS property index: 5

        Nominal converter power in kW. Must be specified > 0.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kW.setter
    def kW(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def Ndc(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Ndc
        DSS property index: 6

        Number of DC conductors. Default is 1. DC conductors numbered after AC phases.
        """
        return BatchInt32ArrayProxy(self, 6)

    @Ndc.setter
    def Ndc(self, value):
        self._set_batch_int32_array(6, value)

    @property
    def Rac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Rac
        DSS property index: 7

        AC resistance (ohms) for the converter transformer, plus any series reactors. Default is 0.
        Must be 0 for Vac control mode.
        """
        return BatchFloat64ArrayProxy(self, 7)

    @Rac.setter
    def Rac(self, value):
        self._set_batch_float64_array(7, value)

    @property
    def Xac(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Xac
        DSS property index: 8

        AC reactance (ohms) for the converter transformer, plus any series reactors. Default is 0.
        Must be 0 for Vac control mode. Must be >0 for PacVac, PacQac or VacVdc control mode.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @Xac.setter
    def Xac(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def m0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: m0
        DSS property index: 9

        Fixed or initial value of the modulation index. Default is 0.5.
        """
        return BatchFloat64ArrayProxy(self, 9)

    @m0.setter
    def m0(self, value):
        self._set_batch_float64_array(9, value)

    @property
    def d0(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: d0
        DSS property index: 10

        Fixed or initial value of the power angle in degrees. Default is 0.
        """
        return BatchFloat64ArrayProxy(self, 10)

    @d0.setter
    def d0(self, value):
        self._set_batch_float64_array(10, value)

    @property
    def Mmin(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Mmin
        DSS property index: 11

        Minimum value of modulation index. Default is 0.1.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @Mmin.setter
    def Mmin(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def Mmax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Mmax
        DSS property index: 12

        Maximum value of modulation index. Default is 0.9.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @Mmax.setter
    def Mmax(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def Iacmax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Iacmax
        DSS property index: 13

        Maximum value of AC line current, per-unit of nominal. Default is 2.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @Iacmax.setter
    def Iacmax(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def Idcmax(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Idcmax
        DSS property index: 14

        Maximum value of DC current, per-unit of nominal. Default is 2.
        """
        return BatchFloat64ArrayProxy(self, 14)

    @Idcmax.setter
    def Idcmax(self, value):
        self._set_batch_float64_array(14, value)

    @property
    def Vacref(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vacref
        DSS property index: 15

        Reference AC line-to-neutral voltage, RMS Volts. Default is 0.
        Applies to PacVac and VdcVac control modes, influencing m.
        """
        return BatchFloat64ArrayProxy(self, 15)

    @Vacref.setter
    def Vacref(self, value):
        self._set_batch_float64_array(15, value)

    @property
    def Pacref(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Pacref
        DSS property index: 16

        Reference total AC real power, Watts. Default is 0.
        Applies to PacVac and PacQac control modes, influencing d.
        """
        return BatchFloat64ArrayProxy(self, 16)

    @Pacref.setter
    def Pacref(self, value):
        self._set_batch_float64_array(16, value)

    @property
    def Qacref(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Qacref
        DSS property index: 17

        Reference total AC reactive power, Vars. Default is 0.
        Applies to PacQac and VdcQac control modes, influencing m.
        """
        return BatchFloat64ArrayProxy(self, 17)

    @Qacref.setter
    def Qacref(self, value):
        self._set_batch_float64_array(17, value)

    @property
    def Vdcref(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Vdcref
        DSS property index: 18

        Reference DC voltage, Volts. Default is 0.
        Applies to VdcVac control mode, influencing d.
        """
        return BatchFloat64ArrayProxy(self, 18)

    @Vdcref.setter
    def Vdcref(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def VscMode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: VscMode
        DSS property index: 19

        Control Mode (Fixed|PacVac|PacQac|VdcVac|VdcQac). Default is Fixed.
        """
        return BatchInt32ArrayProxy(self, 19)

    @VscMode.setter
    def VscMode(self, value: Union[AnyStr, int, VSConverter.VSConverterControlMode, List[AnyStr], List[Union[int, VSConverter.VSConverterControlMode]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(19, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(19, value)

    @property
    def VscMode_str(self) -> str:
        """
        DSS property name: VscMode
        DSS property index: 19

        Control Mode (Fixed|PacVac|PacQac|VdcVac|VdcQac). Default is Fixed.
        """
        return self._get_prop_string(19)

    @VscMode_str.setter
    def VscMode_str(self, value: AnyStr):
        self.VscMode = value

    @property
    def spectrum(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 20

        Name of harmonic spectrum for this device.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 20)

    @spectrum.setter
    def spectrum(self, value: Union[AnyStr, Spectrum]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(20, value)
            return

        self._set_batch_string(20, value)

    @property
    def spectrum_obj(self) -> List[str]:
        """
        DSS property name: spectrum
        DSS property index: 20

        Name of harmonic spectrum for this device.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 20)

    @spectrum_obj.setter
    def spectrum_obj(self, value: Spectrum):
        self._set_batch_string(20, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 21

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 22

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 22)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 22, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 23

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(23, value)

class MonitorBatch(DSSBatch):
    _cls_name = 'Monitor'
    _obj_cls = Monitor
    _cls_idx = 46


    @property
    def element(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def element_obj(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def terminal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the monitor is connected. 1 or 2, typically. For monitoring states, attach monitor to terminal 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @terminal.setter
    def terminal(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def mode(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: mode
        DSS property index: 3

        Bitmask integer designating the values the monitor is to capture: 
        0 = Voltages and currents at designated terminal
        1 = Powers at designated terminal
        2 = Tap Position (Transformer Device only)
        3 = State Variables (PCElements only)
        4 = Flicker level and severity index (Pst) for voltages. No adders apply.
            Flicker level at simulation time step, Pst at 10-minute time step.
        5 = Solution variables (Iterations, etc).
        Normally, these would be actual phasor quantities from solution.
        6 = Capacitor Switching (Capacitors only)
        7 = Storage state vars (Storage device only)
        8 = All winding currents (Transformer device only)
        9 = Losses, watts and var (of monitored device)
        10 = All Winding voltages (Transformer device only)
        Normally, these would be actual phasor quantities from solution.
        11 = All terminal node voltages and line currents of monitored device
        12 = All terminal node voltages LL and line currents of monitored device
        Combine mode with adders below to achieve other results for terminal quantities:
        +16 = Sequence quantities
        +32 = Magnitude only
        +64 = Positive sequence only or avg of all phases

        Mix adder to obtain desired results. For example:
        Mode=112 will save positive sequence voltage and current magnitudes only
        Mode=48 will save all sequence voltages and currents, but magnitude only.
        """
        return BatchInt32ArrayProxy(self, 3)

    @mode.setter
    def mode(self, value):
        self._set_batch_int32_array(3, value)

    def action(self, value: Union[str, bytes, int]):
        """
        DSS property name: action
        DSS property index: 4

        {Clear | Save | Take | Process}
        (C)lears or (S)aves current buffer.
        (T)ake action takes a sample.
        (P)rocesses the data taken so far (e.g. Pst for mode 4).

        Note that monitors are automatically reset (cleared) when the Set Mode= command is issued. Otherwise, the user must explicitly reset all monitors (reset monitors command) or individual monitors with the Clear action.
        """
        if isinstance(value, int):
            self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 4, value)
        else:
            self._set_batch_string(4, value)

    @property
    def residual(self) -> List[bool]:
        """
        DSS property name: residual
        DSS property index: 5

        {Yes/True | No/False} Default = No.  Include Residual cbannel (sum of all phases) for voltage and current. Does not apply to sequence quantity modes or power modes.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 5)
        ]
    @residual.setter
    def residual(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 5, value)

    @property
    def VIPolar(self) -> List[bool]:
        """
        DSS property name: VIPolar
        DSS property index: 6

        {Yes/True | No/False} Default = YES. Report voltage and current in polar form (Mag/Angle). (default)  Otherwise, it will be real and imaginary.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 6)
        ]
    @VIPolar.setter
    def VIPolar(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 6, value)

    @property
    def PPolar(self) -> List[bool]:
        """
        DSS property name: PPolar
        DSS property index: 7

        {Yes/True | No/False} Default = YES. Report power in Apparent power, S, in polar form (Mag/Angle).(default)  Otherwise, is P and Q
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 7)
        ]
    @PPolar.setter
    def PPolar(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 7, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 8

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 8)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(8, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 9

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 9)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 9, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 10

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(10, value)

class EnergyMeterBatch(DSSBatch):
    _cls_name = 'EnergyMeter'
    _obj_cls = EnergyMeter
    _cls_idx = 47


    @property
    def element(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def element_obj(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the monitor is connected.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def terminal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the monitor is connected. 1 or 2, typically.
        """
        return BatchInt32ArrayProxy(self, 2)

    @terminal.setter
    def terminal(self, value):
        self._set_batch_int32_array(2, value)

    def action(self, value: Union[str, bytes, int]):
        """
        DSS property name: action
        DSS property index: 3

        {Clear (reset) | Save | Take | Zonedump | Allocate | Reduce} 

        (A)llocate = Allocate loads on the meter zone to match PeakCurrent.
        (C)lear = reset all registers to zero
        (R)educe = reduces zone by merging lines (see Set Keeplist & ReduceOption)
        (S)ave = saves the current register values to a file.
           File name is "MTR_metername.CSV".
        (T)ake = Takes a sample at present solution
        (Z)onedump = Dump names of elements in meter zone to a file
           File name is "Zone_metername.CSV".
        """
        if isinstance(value, int):
            self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 3, value)
        else:
            self._set_batch_string(3, value)

    @property
    def option(self) -> List[List[str]]:
        """
        DSS property name: option
        DSS property index: 4

        Enter a string ARRAY of any combination of the following. Options processed left-to-right:

        (E)xcess : (default) UE/EEN is estimate of energy over capacity 
        (T)otal : UE/EEN is total energy after capacity exceeded
        (R)adial : (default) Treats zone as a radial circuit
        (M)esh : Treats zone as meshed network (not radial).
        (C)ombined : (default) Load UE/EEN computed from combination of overload and undervoltage.
        (V)oltage : Load UE/EEN computed based on voltage only.

        Example: option=(E, R)
        """
        return self._get_string_ll(4)

    @option.setter
    def option(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 4, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def kVAnormal(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVAnormal
        DSS property index: 5

        Upper limit on kVA load in the zone, Normal configuration. Default is 0.0 (ignored). Overrides limits on individual lines for overload EEN. With "LocalOnly=Yes" option, uses only load in metered branch.
        """
        return BatchFloat64ArrayProxy(self, 5)

    @kVAnormal.setter
    def kVAnormal(self, value):
        self._set_batch_float64_array(5, value)

    @property
    def kVAemerg(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kVAemerg
        DSS property index: 6

        Upper limit on kVA load in the zone, Emergency configuration. Default is 0.0 (ignored). Overrides limits on individual lines for overload UE. With "LocalOnly=Yes" option, uses only load in metered branch.
        """
        return BatchFloat64ArrayProxy(self, 6)

    @kVAemerg.setter
    def kVAemerg(self, value):
        self._set_batch_float64_array(6, value)

    @property
    def peakcurrent(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: peakcurrent
        DSS property index: 7

        ARRAY of current magnitudes representing the peak currents measured at this location for the load allocation function.  Default is (400, 400, 400). Enter one current for each phase
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @peakcurrent.setter
    def peakcurrent(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def Zonelist(self) -> List[List[str]]:
        """
        DSS property name: Zonelist
        DSS property index: 8

        ARRAY of full element names for this meter's zone.  Default is for meter to find it's own zone. If specified, DSS uses this list instead.  Can access the names in a single-column text file.  Examples: 

        zonelist=[line.L1, transformer.T1, Line.L3] 
        zonelist=(file=branchlist.txt)
        """
        return self._get_string_ll(8)

    @Zonelist.setter
    def Zonelist(self, value: List[str]):
        value, value_ptr, value_count = self._prepare_string_array(value)
        for x in self._ffi.unpack(self.pointer[0], self.count[0]):
            self._lib.Obj_SetStringArray(x, 8, value_ptr, value_count)
    
        self._check_for_error()

    @property
    def LocalOnly(self) -> List[bool]:
        """
        DSS property name: LocalOnly
        DSS property index: 9

        {Yes | No}  Default is NO.  If Yes, meter considers only the monitored element for EEN and UE calcs.  Uses whole zone for losses.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 9)
        ]
    @LocalOnly.setter
    def LocalOnly(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 9, value)

    @property
    def Mask(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: Mask
        DSS property index: 10

        Mask for adding registers whenever all meters are totalized.  Array of floating point numbers representing the multiplier to be used for summing each register from this meter. Default = (1, 1, 1, 1, ... ).  You only have to enter as many as are changed (positional). Useful when two meters monitor same energy, etc.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 10)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @Mask.setter
    def Mask(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(10, value)

    @property
    def Losses(self) -> List[bool]:
        """
        DSS property name: Losses
        DSS property index: 11

        {Yes | No}  Default is YES. Compute Zone losses. If NO, then no losses at all are computed.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 11)
        ]
    @Losses.setter
    def Losses(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 11, value)

    @property
    def LineLosses(self) -> List[bool]:
        """
        DSS property name: LineLosses
        DSS property index: 12

        {Yes | No}  Default is YES. Compute Line losses. If NO, then none of the losses are computed.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 12)
        ]
    @LineLosses.setter
    def LineLosses(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 12, value)

    @property
    def XfmrLosses(self) -> List[bool]:
        """
        DSS property name: XfmrLosses
        DSS property index: 13

        {Yes | No}  Default is YES. Compute Transformer losses. If NO, transformers are ignored in loss calculations.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 13)
        ]
    @XfmrLosses.setter
    def XfmrLosses(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 13, value)

    @property
    def SeqLosses(self) -> List[bool]:
        """
        DSS property name: SeqLosses
        DSS property index: 14

        {Yes | No}  Default is YES. Compute Sequence losses in lines and segregate by line mode losses and zero mode losses.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 14)
        ]
    @SeqLosses.setter
    def SeqLosses(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 14, value)

    @property
    def threePaseLosses(self) -> List[bool]:
        """
        DSS property name: 3phaseLosses
        DSS property index: 15

        {Yes | No}  Default is YES. Compute Line losses and segregate by 3-phase and other (1- and 2-phase) line losses. 
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 15)
        ]
    @threePaseLosses.setter
    def threePaseLosses(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 15, value)

    @property
    def VbaseLosses(self) -> List[bool]:
        """
        DSS property name: VbaseLosses
        DSS property index: 16

        {Yes | No}  Default is YES. Compute losses and segregate by voltage base. If NO, then voltage-based tabulation is not reported.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 16)
        ]
    @VbaseLosses.setter
    def VbaseLosses(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 16, value)

    @property
    def PhaseVoltageReport(self) -> List[bool]:
        """
        DSS property name: PhaseVoltageReport
        DSS property index: 17

        {Yes | No}  Default is NO.  Report min, max, and average phase voltages for the zone and tabulate by voltage base. Demand Intervals must be turned on (Set Demand=true) and voltage bases must be defined for this property to take effect. Result is in a separate report file.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 17)
        ]
    @PhaseVoltageReport.setter
    def PhaseVoltageReport(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 17, value)

    @property
    def Int_Rate(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Int_Rate
        DSS property index: 18

        Average number of annual interruptions for head of the meter zone (source side of zone or feeder).
        """
        return BatchFloat64ArrayProxy(self, 18)

    @Int_Rate.setter
    def Int_Rate(self, value):
        self._set_batch_float64_array(18, value)

    @property
    def Int_Duration(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Int_Duration
        DSS property index: 19

        Average annual duration, in hr, of interruptions for head of the meter zone (source side of zone or feeder).
        """
        return BatchFloat64ArrayProxy(self, 19)

    @Int_Duration.setter
    def Int_Duration(self, value):
        self._set_batch_float64_array(19, value)

    @property
    def SAIFI(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: SAIFI
        DSS property index: 20

        (Read only) Makes SAIFI result available via return on query (? energymeter.myMeter.SAIFI.
        """
        return BatchFloat64ArrayProxy(self, 20)

    @SAIFI.setter
    def SAIFI(self, value):
        self._set_batch_float64_array(20, value)

    @property
    def SAIFIkW(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: SAIFIkW
        DSS property index: 21

        (Read only) Makes SAIFIkW result available via return on query (? energymeter.myMeter.SAIFIkW.
        """
        return BatchFloat64ArrayProxy(self, 21)

    @SAIFIkW.setter
    def SAIFIkW(self, value):
        self._set_batch_float64_array(21, value)

    @property
    def SAIDI(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: SAIDI
        DSS property index: 22

        (Read only) Makes SAIDI result available via return on query (? energymeter.myMeter.SAIDI.
        """
        return BatchFloat64ArrayProxy(self, 22)

    @SAIDI.setter
    def SAIDI(self, value):
        self._set_batch_float64_array(22, value)

    @property
    def CAIDI(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: CAIDI
        DSS property index: 23

        (Read only) Makes CAIDI result available via return on query (? energymeter.myMeter.CAIDI.
        """
        return BatchFloat64ArrayProxy(self, 23)

    @CAIDI.setter
    def CAIDI(self, value):
        self._set_batch_float64_array(23, value)

    @property
    def CustInterrupts(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: CustInterrupts
        DSS property index: 24

        (Read only) Makes Total Customer Interrupts value result available via return on query (? energymeter.myMeter.CustInterrupts.
        """
        return BatchFloat64ArrayProxy(self, 24)

    @CustInterrupts.setter
    def CustInterrupts(self, value):
        self._set_batch_float64_array(24, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 25

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 25)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(25, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 26

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 26)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 26, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 27

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(27, value)

class SensorBatch(DSSBatch):
    _cls_name = 'Sensor'
    _obj_cls = Sensor
    _cls_idx = 48


    @property
    def element(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the Sensor is connected.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element.setter
    def element(self, value: Union[AnyStr, DSSObj]):
        if isinstance(value, DSSObj):
            self._set_batch_obj(1, value)
            return

        self._set_batch_string(1, value)

    @property
    def element_obj(self) -> List[str]:
        """
        DSS property name: element
        DSS property index: 1

        Name (Full Object name) of element to which the Sensor is connected.
        """
        return self._get_string_array(self._lib.Batch_GetString, self.pointer[0], self.count[0], 1)

    @element_obj.setter
    def element_obj(self, value: DSSObj):
        self._set_batch_string(1, value)

    @property
    def terminal(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: terminal
        DSS property index: 2

        Number of the terminal of the circuit element to which the Sensor is connected. 1 or 2, typically. Default is 1.
        """
        return BatchInt32ArrayProxy(self, 2)

    @terminal.setter
    def terminal(self, value):
        self._set_batch_int32_array(2, value)

    @property
    def kvbase(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: kvbase
        DSS property index: 3

        Voltage base for the sensor, in kV. If connected to a 2- or 3-phase terminal, 
        specify L-L voltage. For 1-phase devices specify L-N or actual 1-phase voltage. Like many other DSS devices, default is 12.47kV.
        """
        return BatchFloat64ArrayProxy(self, 3)

    @kvbase.setter
    def kvbase(self, value):
        self._set_batch_float64_array(3, value)

    @property
    def clear(self) -> List[bool]:
        """
        DSS property name: clear
        DSS property index: 4

        { Yes | No }. Clear=Yes clears sensor values. Should be issued before putting in a new set of measurements.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 4)
        ]
    @clear.setter
    def clear(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 4, value)

    @property
    def kVs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kVs
        DSS property index: 5

        Array of Voltages (kV) measured by the voltage sensor. For Delta-connected sensors, Line-Line voltages are expected. For Wye, Line-Neutral are expected.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 5)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kVs.setter
    def kVs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(5, value)

    @property
    def currents(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: currents
        DSS property index: 6

        Array of Currents (amps) measured by the current sensor. Specify this or power quantities; not both.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 6)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @currents.setter
    def currents(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(6, value)

    @property
    def kWs(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kWs
        DSS property index: 7

        Array of Active power (kW) measurements at the sensor. Is converted into Currents along with q=[...]
        Will override any currents=[...] specification.
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 7)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kWs.setter
    def kWs(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(7, value)

    @property
    def kvars(self) -> List[npt.NDArray[np.float64]]:
        """
        DSS property name: kvars
        DSS property index: 8

        Array of Reactive power (kvar) measurements at the sensor. Is converted into Currents along with p=[...]
        """
        return [
            self._get_float64_array(self._lib.Obj_GetFloat64Array, x, 8)
            for x in self._ffi.unpack(self.pointer[0], self.count[0])
        ]

    @kvars.setter
    def kvars(self, value: npt.NDArray[np.float64]):
        self._set_float64_array(8, value)

    @property
    def conn(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: conn
        DSS property index: 9

        Voltage sensor Connection: { wye | delta | LN | LL }.  Default is wye. Applies to voltage measurement only. 
        Currents are always assumed to be line currents.
        If wye or LN, voltage is assumed measured line-neutral; otherwise, line-line.
        """
        return BatchInt32ArrayProxy(self, 9)

    @conn.setter
    def conn(self, value: Union[AnyStr, int, Connection, List[AnyStr], List[Union[int, Connection]]]):
        if isinstance(value, str) or isinstance(value, bytes):
            self._set_batch_string(9, value)
            return
    
        if not isinstance(value, int) and (isinstance(value[0], str) or isinstance(value[0], bytes)):
            raise NotImplemented

        self._set_batch_int32_array(9, value)

    @property
    def conn_str(self) -> str:
        """
        DSS property name: conn
        DSS property index: 9

        Voltage sensor Connection: { wye | delta | LN | LL }.  Default is wye. Applies to voltage measurement only. 
        Currents are always assumed to be line currents.
        If wye or LN, voltage is assumed measured line-neutral; otherwise, line-line.
        """
        return self._get_prop_string(9)

    @conn_str.setter
    def conn_str(self, value: AnyStr):
        self.conn = value

    @property
    def Deltadirection(self) -> BatchInt32ArrayProxy:
        """
        DSS property name: Deltadirection
        DSS property index: 10

        {1 or -1}  Default is 1:  1-2, 2-3, 3-1.  For reverse rotation, enter -1. Any positive or negative entry will suffice.
        """
        return BatchInt32ArrayProxy(self, 10)

    @Deltadirection.setter
    def Deltadirection(self, value):
        self._set_batch_int32_array(10, value)

    @property
    def pctError(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: %Error
        DSS property index: 11

        Assumed percent error in the measurement. Default is 1.
        """
        return BatchFloat64ArrayProxy(self, 11)

    @pctError.setter
    def pctError(self, value):
        self._set_batch_float64_array(11, value)

    @property
    def Weight(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: Weight
        DSS property index: 12

        Weighting factor: Default is 1.
        """
        return BatchFloat64ArrayProxy(self, 12)

    @Weight.setter
    def Weight(self, value):
        self._set_batch_float64_array(12, value)

    @property
    def basefreq(self) -> BatchFloat64ArrayProxy:
        """
        DSS property name: basefreq
        DSS property index: 13

        Base Frequency for ratings.
        """
        return BatchFloat64ArrayProxy(self, 13)

    @basefreq.setter
    def basefreq(self, value):
        self._set_batch_float64_array(13, value)

    @property
    def enabled(self) -> List[bool]:
        """
        DSS property name: enabled
        DSS property index: 14

        {Yes|No or True|False} Indicates whether this element is enabled.
        """
        return [v != 0 for v in 
            self._get_int32_array(self._lib.Batch_GetInt32, self.pointer[0], self.count[0], 14)
        ]
    @enabled.setter
    def enabled(self, value: bool):
        self._lib.Batch_SetInt32(self.pointer[0], self.count[0], 14, value)

    def like(self, value: AnyStr):
        """
        DSS property name: like
        DSS property index: 15

        Make like another object, e.g.:

        New Capacitor.C2 like=c1  ...
        """
        self._set_batch_string(15, value)

class IObj(Base):
    __slots__ = [
        'LineCode',
        'LoadShape',
        'TShape',
        'PriceShape',
        'XYcurve',
        'GrowthShape',
        'TCC_Curve',
        'Spectrum',
        'WireData',
        'CNData',
        'TSData',
        'LineSpacing',
        'LineGeometry',
        'XfmrCode',
        'Line',
        'Vsource',
        'Isource',
        'VCCS',
        'Load',
        'Transformer',
        'Capacitor',
        'Reactor',
        'CapControl',
        'Fault',
        'Generator',
        'GenDispatcher',
        'Storage',
        'StorageController',
        'Relay',
        'Recloser',
        'Fuse',
        'SwtControl',
        'PVSystem',
        'UPFC',
        'UPFCControl',
        'ESPVLControl',
        'IndMach012',
        'GICsource',
        'AutoTrans',
        'RegControl',
        'InvControl',
        'ExpControl',
        'GICLine',
        'GICTransformer',
        'VSConverter',
        'Monitor',
        'EnergyMeter',
        'Sensor',
        '_idx_to_cls',
    ]

    def __init__(self, api_util):
        Base.__init__(self, api_util)
        self._idx_to_cls = dict()

        self.LineCode = IDSSObj(self, 1, LineCode, LineCodeBatch)
        self.LoadShape = IDSSObj(self, 2, LoadShape, LoadShapeBatch)
        self.TShape = IDSSObj(self, 3, TShape, TShapeBatch)
        self.PriceShape = IDSSObj(self, 4, PriceShape, PriceShapeBatch)
        self.XYcurve = IDSSObj(self, 5, XYcurve, XYcurveBatch)
        self.GrowthShape = IDSSObj(self, 6, GrowthShape, GrowthShapeBatch)
        self.TCC_Curve = IDSSObj(self, 7, TCC_Curve, TCC_CurveBatch)
        self.Spectrum = IDSSObj(self, 8, Spectrum, SpectrumBatch)
        self.WireData = IDSSObj(self, 9, WireData, WireDataBatch)
        self.CNData = IDSSObj(self, 10, CNData, CNDataBatch)
        self.TSData = IDSSObj(self, 11, TSData, TSDataBatch)
        self.LineSpacing = IDSSObj(self, 12, LineSpacing, LineSpacingBatch)
        self.LineGeometry = IDSSObj(self, 13, LineGeometry, LineGeometryBatch)
        self.XfmrCode = IDSSObj(self, 14, XfmrCode, XfmrCodeBatch)
        self.Line = IDSSObj(self, 15, Line, LineBatch)
        self.Vsource = IDSSObj(self, 16, Vsource, VsourceBatch)
        self.Isource = IDSSObj(self, 17, Isource, IsourceBatch)
        self.VCCS = IDSSObj(self, 18, VCCS, VCCSBatch)
        self.Load = IDSSObj(self, 19, Load, LoadBatch)
        self.Transformer = IDSSObj(self, 20, Transformer, TransformerBatch)
        self.Capacitor = IDSSObj(self, 22, Capacitor, CapacitorBatch)
        self.Reactor = IDSSObj(self, 23, Reactor, ReactorBatch)
        self.CapControl = IDSSObj(self, 24, CapControl, CapControlBatch)
        self.Fault = IDSSObj(self, 25, Fault, FaultBatch)
        self.Generator = IDSSObj(self, 26, Generator, GeneratorBatch)
        self.GenDispatcher = IDSSObj(self, 27, GenDispatcher, GenDispatcherBatch)
        self.Storage = IDSSObj(self, 28, Storage, StorageBatch)
        self.StorageController = IDSSObj(self, 29, StorageController, StorageControllerBatch)
        self.Relay = IDSSObj(self, 30, Relay, RelayBatch)
        self.Recloser = IDSSObj(self, 31, Recloser, RecloserBatch)
        self.Fuse = IDSSObj(self, 32, Fuse, FuseBatch)
        self.SwtControl = IDSSObj(self, 33, SwtControl, SwtControlBatch)
        self.PVSystem = IDSSObj(self, 34, PVSystem, PVSystemBatch)
        self.UPFC = IDSSObj(self, 35, UPFC, UPFCBatch)
        self.UPFCControl = IDSSObj(self, 36, UPFCControl, UPFCControlBatch)
        self.ESPVLControl = IDSSObj(self, 37, ESPVLControl, ESPVLControlBatch)
        self.IndMach012 = IDSSObj(self, 38, IndMach012, IndMach012Batch)
        self.GICsource = IDSSObj(self, 39, GICsource, GICsourceBatch)
        self.AutoTrans = IDSSObj(self, 40, AutoTrans, AutoTransBatch)
        self.RegControl = IDSSObj(self, 21, RegControl, RegControlBatch)
        self.InvControl = IDSSObj(self, 41, InvControl, InvControlBatch)
        self.ExpControl = IDSSObj(self, 42, ExpControl, ExpControlBatch)
        self.GICLine = IDSSObj(self, 43, GICLine, GICLineBatch)
        self.GICTransformer = IDSSObj(self, 44, GICTransformer, GICTransformerBatch)
        self.VSConverter = IDSSObj(self, 45, VSConverter, VSConverterBatch)
        self.Monitor = IDSSObj(self, 46, Monitor, MonitorBatch)
        self.EnergyMeter = IDSSObj(self, 47, EnergyMeter, EnergyMeterBatch)
        self.Sensor = IDSSObj(self, 48, Sensor, SensorBatch)

__all__ = [
    "IObj",
    "EarthModel",
    "LineType",
    "DimensionUnits",
    "ScanType",
    "SequenceType",
    "Connection",
    "CoreType",
    "PhaseSequence",
    "LoadSolutionModel",
    "RandomType",
    "ControlMode",
    "SolutionMode",
    "SolutionAlgorithm",
    "CircuitModel",
    "AutoAddDeviceType",
    "LoadShapeClass",
    "MonitoredPhase",
]

